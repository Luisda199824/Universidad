Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    RBRACE
    CLRSCR
    LBRACE
    APOSTROPHE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT
Rule 2     declaration_initial -> uses_declaration
Rule 3     declaration_initial -> declaracion_variables
Rule 4     declaration_initial -> declaration_initial uses_declaration
Rule 5     declaration_initial -> declaration_initial declaracion_variables
Rule 6     declaracion_variables -> VAR var_declaration COLON type_specifier SEMI
Rule 7     declaracion_variables -> CONST var_declaration COLON type_specifier SEMI
Rule 8     var_declaration -> ID
Rule 9     var_declaration -> ID COMMA var_declaration
Rule 10    type_specifier -> INTEGER
Rule 11    type_specifier -> CHAR
Rule 12    type_specifier -> BYTE
Rule 13    type_specifier -> REAL
Rule 14    type_specifier -> SINGLE
Rule 15    type_specifier -> DOUBLE
Rule 16    type_specifier -> STRING
Rule 17    type_specifier -> BOOLEAN
Rule 18    type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI
Rule 19    uses_declaration -> USES ID SEMI
Rule 20    declarations -> write_declaration
Rule 21    declarations -> write_declaration declarations
Rule 22    declarations -> readln_declaration
Rule 23    declarations -> readln_declaration declarations
Rule 24    declarations -> declaracion_variables
Rule 25    declarations -> declaracion_variables declarations
Rule 26    declarations -> stament
Rule 27    declarations -> stament declarations
Rule 28    declarations -> var_assignation
Rule 29    declarations -> var_assignation declarations
Rule 30    declarations -> functions_declarations
Rule 31    declarations -> functions_declarations declarations
Rule 32    var_assignation -> array_assignation
Rule 33    var_assignation -> op_var ASSIGN arith_operation SEMI
Rule 34    var_assignation -> op_var ASSIGN op_var SEMI
Rule 35    array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
Rule 36    array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI
Rule 37    array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
Rule 38    array_assignation -> array_call
Rule 39    arith_operation -> op_var op_arith op_var
Rule 40    arith_operation -> op_var op_arith arith_operation
Rule 41    arith_operation -> operation
Rule 42    operation -> op_var
Rule 43    operation -> operation op_arith operation
Rule 44    operation -> LPARENT operation RPARENT
Rule 45    stament -> while_declaration
Rule 46    stament -> for_declaration
Rule 47    stament -> if_declaration
Rule 48    stament -> declarations ID ASSIGN
Rule 49    stament -> ID LPARENT declarations RPARENT
Rule 50    stament -> BREAK SEMI
Rule 51    while_declaration -> WHILE relation DO BEGIN declarations END SEMI
Rule 52    for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI
Rule 53    assignation -> op_var ASSIGN op_var
Rule 54    if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI
Rule 55    relation -> op_var
Rule 56    relation -> operation
Rule 57    relation -> relation op_logic relation
Rule 58    relation -> LPARENT relation RPARENT
Rule 59    relacion_if -> relation
Rule 60    relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic op_var
Rule 61    else_stament -> ELSE declarations
Rule 62    else_stament -> <empty>
Rule 63    write_declaration -> WRITE LPARENT op_write RPARENT SEMI
Rule 64    op_write -> string_sentence
Rule 65    op_write -> op_var
Rule 66    op_write -> array_call
Rule 67    op_write -> op_write COMMA op_write
Rule 68    array_call -> ID LBLOCK op_var RBLOCK
Rule 69    string_sentence -> STRINGVAL
Rule 70    string_sentence -> STRINGVAL PLUS ID
Rule 71    string_sentence -> STRINGVAL PLUS string_sentence
Rule 72    readln_declaration -> READLN LPARENT ID RPARENT SEMI
Rule 73    op_var -> ID
Rule 74    op_var -> NUMBER
Rule 75    op_var -> array_call
Rule 76    op_arith -> PLUS
Rule 77    op_arith -> MINUS
Rule 78    op_arith -> TIMES
Rule 79    op_arith -> DIVIDE
Rule 80    op_arith -> MOD
Rule 81    op_logic -> EQ
Rule 82    op_logic -> NE
Rule 83    op_logic -> LT
Rule 84    op_logic -> LE
Rule 85    op_logic -> GT
Rule 86    op_logic -> GE
Rule 87    op_logic -> LNOT
Rule 88    op_logic -> LOR
Rule 89    op_logic -> LAND
Rule 90    op_logic -> LXOR
Rule 91    functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
Rule 92    parameters -> ID end_parameters
Rule 93    parameters -> ID COMMA parameters
Rule 94    end_parameters -> COLON type_specifier
Rule 95    declaration_function_initial -> ID COLON type_specifier SEMI
Rule 96    declaration_function_initial -> ID COLON type_specifier SEMI declaration_function_initial

Terminals, with rules where they appear

APOSTROPHE           : 
ARRAY                : 18
ASSIGN               : 33 34 35 36 37 48 53
BEGIN                : 1 51 52 54 91
BOOLEAN              : 17
BREAK                : 50
BYTE                 : 12
CHAR                 : 11
CLRSCR               : 
COLON                : 6 7 91 94 95 96
COMMA                : 9 67 93
CONST                : 7
DIVIDE               : 79
DO                   : 51 52
DOT                  : 1 18 18
DOUBLE               : 15
ELSE                 : 61
END                  : 1 51 52 54 91
EQ                   : 81
FOR                  : 52
FUNCTION             : 91
GE                   : 86
GT                   : 85
ID                   : 1 8 9 19 35 36 36 37 48 49 68 70 72 73 91 92 93 95 96
IF                   : 54
INTEGER              : 10
LAND                 : 89
LBLOCK               : 18 35 36 37 68
LBRACE               : 
LE                   : 84
LNOT                 : 87
LOR                  : 88
LPARENT              : 44 49 58 60 63 72 91
LT                   : 83
LXOR                 : 90
MINUS                : 77
MOD                  : 80
NE                   : 82
NUMBER               : 18 18 35 74
OF                   : 18
PLUS                 : 70 71 76
PROGRAM              : 1
RBLOCK               : 18 35 36 37 68
RBRACE               : 
READLN               : 72
REAL                 : 13
RPARENT              : 44 49 58 60 63 72 91
SEMI                 : 1 6 7 18 19 33 34 35 36 37 50 51 52 54 63 72 91 91 95 96
SINGLE               : 14
STRING               : 16
STRINGVAL            : 69 70 71
THEN                 : 54
TIMES                : 78
TO                   : 52
USES                 : 19
VAR                  : 6 91
WHILE                : 51
WRITE                : 63
error                : 

Nonterminals, with rules where they appear

arith_operation      : 33 40
array_assignation    : 32 37
array_call           : 38 66 75
assignation          : 52
declaracion_variables : 3 5 24 25
declaration_function_initial : 91 96
declaration_initial  : 1 4 5
declarations         : 1 21 23 25 27 29 31 48 49 51 52 54 61 91
else_stament         : 54
end_parameters       : 92
for_declaration      : 46
functions_declarations : 30 31
if_declaration       : 47
op_arith             : 39 40 43 60
op_logic             : 57 60
op_var               : 33 34 34 39 39 40 42 52 53 53 55 60 60 60 65 68
op_write             : 63 67 67
operation            : 35 36 37 41 43 43 44 56
parameters           : 91 93
programa             : 0
readln_declaration   : 22 23
relacion_if          : 54
relation             : 51 57 57 58 59
stament              : 26 27
string_sentence      : 64 71
type_specifier       : 6 7 18 91 94 95 96
uses_declaration     : 2 4
var_assignation      : 28 29
var_declaration      : 6 7 9
while_declaration    : 45
write_declaration    : 20 21

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT

    PROGRAM         shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> PROGRAM . ID SEMI declaration_initial BEGIN declarations END DOT

    ID              shift and go to state 3


state 2

    (0) S' -> programa .



state 3

    (1) programa -> PROGRAM ID . SEMI declaration_initial BEGIN declarations END DOT

    SEMI            shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMI . declaration_initial BEGIN declarations END DOT
    (2) declaration_initial -> . uses_declaration
    (3) declaration_initial -> . declaracion_variables
    (4) declaration_initial -> . declaration_initial uses_declaration
    (5) declaration_initial -> . declaration_initial declaracion_variables
    (19) uses_declaration -> . USES ID SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI

    USES            shift and go to state 7
    VAR             shift and go to state 9
    CONST           shift and go to state 6

    declaration_initial            shift and go to state 8
    declaracion_variables          shift and go to state 5
    uses_declaration               shift and go to state 10

state 5

    (3) declaration_initial -> declaracion_variables .

    BEGIN           reduce using rule 3 (declaration_initial -> declaracion_variables .)
    USES            reduce using rule 3 (declaration_initial -> declaracion_variables .)
    VAR             reduce using rule 3 (declaration_initial -> declaracion_variables .)
    CONST           reduce using rule 3 (declaration_initial -> declaracion_variables .)


state 6

    (7) declaracion_variables -> CONST . var_declaration COLON type_specifier SEMI
    (8) var_declaration -> . ID
    (9) var_declaration -> . ID COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 11

state 7

    (19) uses_declaration -> USES . ID SEMI

    ID              shift and go to state 13


state 8

    (1) programa -> PROGRAM ID SEMI declaration_initial . BEGIN declarations END DOT
    (4) declaration_initial -> declaration_initial . uses_declaration
    (5) declaration_initial -> declaration_initial . declaracion_variables
    (19) uses_declaration -> . USES ID SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI

    BEGIN           shift and go to state 14
    USES            shift and go to state 7
    VAR             shift and go to state 9
    CONST           shift and go to state 6

    declaracion_variables          shift and go to state 15
    uses_declaration               shift and go to state 16

state 9

    (6) declaracion_variables -> VAR . var_declaration COLON type_specifier SEMI
    (8) var_declaration -> . ID
    (9) var_declaration -> . ID COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 17

state 10

    (2) declaration_initial -> uses_declaration .

    BEGIN           reduce using rule 2 (declaration_initial -> uses_declaration .)
    USES            reduce using rule 2 (declaration_initial -> uses_declaration .)
    VAR             reduce using rule 2 (declaration_initial -> uses_declaration .)
    CONST           reduce using rule 2 (declaration_initial -> uses_declaration .)


state 11

    (7) declaracion_variables -> CONST var_declaration . COLON type_specifier SEMI

    COLON           shift and go to state 18


state 12

    (8) var_declaration -> ID .
    (9) var_declaration -> ID . COMMA var_declaration

    COLON           reduce using rule 8 (var_declaration -> ID .)
    COMMA           shift and go to state 19


state 13

    (19) uses_declaration -> USES ID . SEMI

    SEMI            shift and go to state 20


state 14

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN . declarations END DOT
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 38
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 15

    (5) declaration_initial -> declaration_initial declaracion_variables .

    BEGIN           reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)
    USES            reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)
    VAR             reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)
    CONST           reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)


state 16

    (4) declaration_initial -> declaration_initial uses_declaration .

    BEGIN           reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)
    USES            reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)
    VAR             reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)
    CONST           reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)


state 17

    (6) declaracion_variables -> VAR var_declaration . COLON type_specifier SEMI

    COLON           shift and go to state 43


state 18

    (7) declaracion_variables -> CONST var_declaration COLON . type_specifier SEMI
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 51
    CHAR            shift and go to state 48
    BYTE            shift and go to state 52
    REAL            shift and go to state 44
    SINGLE          shift and go to state 49
    DOUBLE          shift and go to state 47
    STRING          shift and go to state 46
    BOOLEAN         shift and go to state 50
    ARRAY           shift and go to state 53

    type_specifier                 shift and go to state 45

state 19

    (9) var_declaration -> ID COMMA . var_declaration
    (8) var_declaration -> . ID
    (9) var_declaration -> . ID COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 54

state 20

    (19) uses_declaration -> USES ID SEMI .

    BEGIN           reduce using rule 19 (uses_declaration -> USES ID SEMI .)
    USES            reduce using rule 19 (uses_declaration -> USES ID SEMI .)
    VAR             reduce using rule 19 (uses_declaration -> USES ID SEMI .)
    CONST           reduce using rule 19 (uses_declaration -> USES ID SEMI .)


state 21

    (74) op_var -> NUMBER .

    PLUS            reduce using rule 74 (op_var -> NUMBER .)
    MINUS           reduce using rule 74 (op_var -> NUMBER .)
    TIMES           reduce using rule 74 (op_var -> NUMBER .)
    DIVIDE          reduce using rule 74 (op_var -> NUMBER .)
    MOD             reduce using rule 74 (op_var -> NUMBER .)
    DO              reduce using rule 74 (op_var -> NUMBER .)
    EQ              reduce using rule 74 (op_var -> NUMBER .)
    NE              reduce using rule 74 (op_var -> NUMBER .)
    LT              reduce using rule 74 (op_var -> NUMBER .)
    LE              reduce using rule 74 (op_var -> NUMBER .)
    GT              reduce using rule 74 (op_var -> NUMBER .)
    GE              reduce using rule 74 (op_var -> NUMBER .)
    LNOT            reduce using rule 74 (op_var -> NUMBER .)
    LOR             reduce using rule 74 (op_var -> NUMBER .)
    LAND            reduce using rule 74 (op_var -> NUMBER .)
    LXOR            reduce using rule 74 (op_var -> NUMBER .)
    THEN            reduce using rule 74 (op_var -> NUMBER .)
    RPARENT         reduce using rule 74 (op_var -> NUMBER .)
    SEMI            reduce using rule 74 (op_var -> NUMBER .)
    ASSIGN          reduce using rule 74 (op_var -> NUMBER .)
    COMMA           reduce using rule 74 (op_var -> NUMBER .)
    TO              reduce using rule 74 (op_var -> NUMBER .)
    RBLOCK          reduce using rule 74 (op_var -> NUMBER .)


state 22

    (51) while_declaration -> WHILE . relation DO BEGIN declarations END SEMI
    (55) relation -> . op_var
    (56) relation -> . operation
    (57) relation -> . relation op_logic relation
    (58) relation -> . LPARENT relation RPARENT
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 55
    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    array_call                     shift and go to state 58
    op_var                         shift and go to state 57
    relation                       shift and go to state 56
    operation                      shift and go to state 59

state 23

    (33) var_assignation -> op_var . ASSIGN arith_operation SEMI
    (34) var_assignation -> op_var . ASSIGN op_var SEMI

    ASSIGN          shift and go to state 61


state 24

    (26) declarations -> stament .
    (27) declarations -> stament . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 26 (declarations -> stament .)
    ELSE            reduce using rule 26 (declarations -> stament .)
    RPARENT         reduce using rule 26 (declarations -> stament .)
    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 26 (declarations -> stament .) ]

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 62
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 25

    (28) declarations -> var_assignation .
    (29) declarations -> var_assignation . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 28 (declarations -> var_assignation .)
    ELSE            reduce using rule 28 (declarations -> var_assignation .)
    RPARENT         reduce using rule 28 (declarations -> var_assignation .)
    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 28 (declarations -> var_assignation .) ]

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 63
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 26

    (22) declarations -> readln_declaration .
    (23) declarations -> readln_declaration . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 22 (declarations -> readln_declaration .)
    ELSE            reduce using rule 22 (declarations -> readln_declaration .)
    RPARENT         reduce using rule 22 (declarations -> readln_declaration .)
    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 22 (declarations -> readln_declaration .) ]

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 64
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 27

    (46) stament -> for_declaration .

    WRITE           reduce using rule 46 (stament -> for_declaration .)
    READLN          reduce using rule 46 (stament -> for_declaration .)
    VAR             reduce using rule 46 (stament -> for_declaration .)
    CONST           reduce using rule 46 (stament -> for_declaration .)
    ID              reduce using rule 46 (stament -> for_declaration .)
    BREAK           reduce using rule 46 (stament -> for_declaration .)
    FUNCTION        reduce using rule 46 (stament -> for_declaration .)
    WHILE           reduce using rule 46 (stament -> for_declaration .)
    FOR             reduce using rule 46 (stament -> for_declaration .)
    IF              reduce using rule 46 (stament -> for_declaration .)
    NUMBER          reduce using rule 46 (stament -> for_declaration .)
    END             reduce using rule 46 (stament -> for_declaration .)
    RPARENT         reduce using rule 46 (stament -> for_declaration .)
    ELSE            reduce using rule 46 (stament -> for_declaration .)


state 28

    (91) functions_declarations -> FUNCTION . ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI

    ID              shift and go to state 65


state 29

    (50) stament -> BREAK . SEMI

    SEMI            shift and go to state 66


state 30

    (52) for_declaration -> FOR . assignation TO op_var DO BEGIN declarations END SEMI
    (53) assignation -> . op_var ASSIGN op_var
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    array_call                     shift and go to state 58
    assignation                    shift and go to state 67
    op_var                         shift and go to state 68

state 31

    (20) declarations -> write_declaration .
    (21) declarations -> write_declaration . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 20 (declarations -> write_declaration .)
    ELSE            reduce using rule 20 (declarations -> write_declaration .)
    RPARENT         reduce using rule 20 (declarations -> write_declaration .)
    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 20 (declarations -> write_declaration .) ]

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 69
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 32

    (30) declarations -> functions_declarations .
    (31) declarations -> functions_declarations . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 30 (declarations -> functions_declarations .)
    ELSE            reduce using rule 30 (declarations -> functions_declarations .)
    RPARENT         reduce using rule 30 (declarations -> functions_declarations .)
    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 30 (declarations -> functions_declarations .) ]

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 70
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 33

    (63) write_declaration -> WRITE . LPARENT op_write RPARENT SEMI

    LPARENT         shift and go to state 71


state 34

    (24) declarations -> declaracion_variables .
    (25) declarations -> declaracion_variables . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 24 (declarations -> declaracion_variables .)
    ELSE            reduce using rule 24 (declarations -> declaracion_variables .)
    RPARENT         reduce using rule 24 (declarations -> declaracion_variables .)
    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 24 (declarations -> declaracion_variables .) ]

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 72
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 35

    (49) stament -> ID . LPARENT declarations RPARENT
    (35) array_assignation -> ID . LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> ID . LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> ID . LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (73) op_var -> ID .
    (68) array_call -> ID . LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 73
    LBLOCK          shift and go to state 74
    ASSIGN          reduce using rule 73 (op_var -> ID .)


state 36

    (45) stament -> while_declaration .

    WRITE           reduce using rule 45 (stament -> while_declaration .)
    READLN          reduce using rule 45 (stament -> while_declaration .)
    VAR             reduce using rule 45 (stament -> while_declaration .)
    CONST           reduce using rule 45 (stament -> while_declaration .)
    ID              reduce using rule 45 (stament -> while_declaration .)
    BREAK           reduce using rule 45 (stament -> while_declaration .)
    FUNCTION        reduce using rule 45 (stament -> while_declaration .)
    WHILE           reduce using rule 45 (stament -> while_declaration .)
    FOR             reduce using rule 45 (stament -> while_declaration .)
    IF              reduce using rule 45 (stament -> while_declaration .)
    NUMBER          reduce using rule 45 (stament -> while_declaration .)
    END             reduce using rule 45 (stament -> while_declaration .)
    RPARENT         reduce using rule 45 (stament -> while_declaration .)
    ELSE            reduce using rule 45 (stament -> while_declaration .)


state 37

    (54) if_declaration -> IF . relacion_if THEN BEGIN declarations else_stament END SEMI
    (59) relacion_if -> . relation
    (60) relacion_if -> . LPARENT op_var op_arith op_var RPARENT op_logic op_var
    (55) relation -> . op_var
    (56) relation -> . operation
    (57) relation -> . relation op_logic relation
    (58) relation -> . LPARENT relation RPARENT
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 75
    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    relation                       shift and go to state 76
    op_var                         shift and go to state 57
    relacion_if                    shift and go to state 77
    array_call                     shift and go to state 58
    operation                      shift and go to state 59

state 38

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations . END DOT
    (48) stament -> declarations . ID ASSIGN

    END             shift and go to state 78
    ID              shift and go to state 79


state 39

    (32) var_assignation -> array_assignation .

    WRITE           reduce using rule 32 (var_assignation -> array_assignation .)
    READLN          reduce using rule 32 (var_assignation -> array_assignation .)
    VAR             reduce using rule 32 (var_assignation -> array_assignation .)
    CONST           reduce using rule 32 (var_assignation -> array_assignation .)
    ID              reduce using rule 32 (var_assignation -> array_assignation .)
    BREAK           reduce using rule 32 (var_assignation -> array_assignation .)
    FUNCTION        reduce using rule 32 (var_assignation -> array_assignation .)
    WHILE           reduce using rule 32 (var_assignation -> array_assignation .)
    FOR             reduce using rule 32 (var_assignation -> array_assignation .)
    IF              reduce using rule 32 (var_assignation -> array_assignation .)
    NUMBER          reduce using rule 32 (var_assignation -> array_assignation .)
    END             reduce using rule 32 (var_assignation -> array_assignation .)
    RPARENT         reduce using rule 32 (var_assignation -> array_assignation .)
    ELSE            reduce using rule 32 (var_assignation -> array_assignation .)


state 40

    (72) readln_declaration -> READLN . LPARENT ID RPARENT SEMI

    LPARENT         shift and go to state 80


state 41

    (38) array_assignation -> array_call .
    (75) op_var -> array_call .

  ! reduce/reduce conflict for RBLOCK resolved using rule 38 (array_assignation -> array_call .)
    WRITE           reduce using rule 38 (array_assignation -> array_call .)
    READLN          reduce using rule 38 (array_assignation -> array_call .)
    VAR             reduce using rule 38 (array_assignation -> array_call .)
    CONST           reduce using rule 38 (array_assignation -> array_call .)
    ID              reduce using rule 38 (array_assignation -> array_call .)
    BREAK           reduce using rule 38 (array_assignation -> array_call .)
    FUNCTION        reduce using rule 38 (array_assignation -> array_call .)
    WHILE           reduce using rule 38 (array_assignation -> array_call .)
    FOR             reduce using rule 38 (array_assignation -> array_call .)
    IF              reduce using rule 38 (array_assignation -> array_call .)
    NUMBER          reduce using rule 38 (array_assignation -> array_call .)
    END             reduce using rule 38 (array_assignation -> array_call .)
    RPARENT         reduce using rule 38 (array_assignation -> array_call .)
    ELSE            reduce using rule 38 (array_assignation -> array_call .)
    RBLOCK          reduce using rule 38 (array_assignation -> array_call .)
    ASSIGN          reduce using rule 75 (op_var -> array_call .)

  ! RBLOCK          [ reduce using rule 75 (op_var -> array_call .) ]


state 42

    (47) stament -> if_declaration .

    WRITE           reduce using rule 47 (stament -> if_declaration .)
    READLN          reduce using rule 47 (stament -> if_declaration .)
    VAR             reduce using rule 47 (stament -> if_declaration .)
    CONST           reduce using rule 47 (stament -> if_declaration .)
    ID              reduce using rule 47 (stament -> if_declaration .)
    BREAK           reduce using rule 47 (stament -> if_declaration .)
    FUNCTION        reduce using rule 47 (stament -> if_declaration .)
    WHILE           reduce using rule 47 (stament -> if_declaration .)
    FOR             reduce using rule 47 (stament -> if_declaration .)
    IF              reduce using rule 47 (stament -> if_declaration .)
    NUMBER          reduce using rule 47 (stament -> if_declaration .)
    END             reduce using rule 47 (stament -> if_declaration .)
    RPARENT         reduce using rule 47 (stament -> if_declaration .)
    ELSE            reduce using rule 47 (stament -> if_declaration .)


state 43

    (6) declaracion_variables -> VAR var_declaration COLON . type_specifier SEMI
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 51
    CHAR            shift and go to state 48
    BYTE            shift and go to state 52
    REAL            shift and go to state 44
    SINGLE          shift and go to state 49
    DOUBLE          shift and go to state 47
    STRING          shift and go to state 46
    BOOLEAN         shift and go to state 50
    ARRAY           shift and go to state 53

    type_specifier                 shift and go to state 81

state 44

    (13) type_specifier -> REAL .

    SEMI            reduce using rule 13 (type_specifier -> REAL .)
    RPARENT         reduce using rule 13 (type_specifier -> REAL .)


state 45

    (7) declaracion_variables -> CONST var_declaration COLON type_specifier . SEMI

    SEMI            shift and go to state 82


state 46

    (16) type_specifier -> STRING .

    SEMI            reduce using rule 16 (type_specifier -> STRING .)
    RPARENT         reduce using rule 16 (type_specifier -> STRING .)


state 47

    (15) type_specifier -> DOUBLE .

    SEMI            reduce using rule 15 (type_specifier -> DOUBLE .)
    RPARENT         reduce using rule 15 (type_specifier -> DOUBLE .)


state 48

    (11) type_specifier -> CHAR .

    SEMI            reduce using rule 11 (type_specifier -> CHAR .)
    RPARENT         reduce using rule 11 (type_specifier -> CHAR .)


state 49

    (14) type_specifier -> SINGLE .

    SEMI            reduce using rule 14 (type_specifier -> SINGLE .)
    RPARENT         reduce using rule 14 (type_specifier -> SINGLE .)


state 50

    (17) type_specifier -> BOOLEAN .

    SEMI            reduce using rule 17 (type_specifier -> BOOLEAN .)
    RPARENT         reduce using rule 17 (type_specifier -> BOOLEAN .)


state 51

    (10) type_specifier -> INTEGER .

    SEMI            reduce using rule 10 (type_specifier -> INTEGER .)
    RPARENT         reduce using rule 10 (type_specifier -> INTEGER .)


state 52

    (12) type_specifier -> BYTE .

    SEMI            reduce using rule 12 (type_specifier -> BYTE .)
    RPARENT         reduce using rule 12 (type_specifier -> BYTE .)


state 53

    (18) type_specifier -> ARRAY . LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    LBLOCK          shift and go to state 83


state 54

    (9) var_declaration -> ID COMMA var_declaration .

    COLON           reduce using rule 9 (var_declaration -> ID COMMA var_declaration .)


state 55

    (58) relation -> LPARENT . relation RPARENT
    (44) operation -> LPARENT . operation RPARENT
    (55) relation -> . op_var
    (56) relation -> . operation
    (57) relation -> . relation op_logic relation
    (58) relation -> . LPARENT relation RPARENT
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 55
    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    array_call                     shift and go to state 58
    op_var                         shift and go to state 57
    relation                       shift and go to state 84
    operation                      shift and go to state 85

state 56

    (51) while_declaration -> WHILE relation . DO BEGIN declarations END SEMI
    (57) relation -> relation . op_logic relation
    (81) op_logic -> . EQ
    (82) op_logic -> . NE
    (83) op_logic -> . LT
    (84) op_logic -> . LE
    (85) op_logic -> . GT
    (86) op_logic -> . GE
    (87) op_logic -> . LNOT
    (88) op_logic -> . LOR
    (89) op_logic -> . LAND
    (90) op_logic -> . LXOR

    DO              shift and go to state 86
    EQ              shift and go to state 97
    NE              shift and go to state 92
    LT              shift and go to state 90
    LE              shift and go to state 87
    GT              shift and go to state 94
    GE              shift and go to state 89
    LNOT            shift and go to state 96
    LOR             shift and go to state 93
    LAND            shift and go to state 95
    LXOR            shift and go to state 88

    op_logic                       shift and go to state 91

state 57

    (55) relation -> op_var .
    (42) operation -> op_var .

  ! reduce/reduce conflict for DO resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for EQ resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for NE resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LT resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LE resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for GT resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for GE resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LNOT resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LOR resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LAND resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LXOR resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for THEN resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for RPARENT resolved using rule 42 (operation -> op_var .)
    PLUS            reduce using rule 42 (operation -> op_var .)
    MINUS           reduce using rule 42 (operation -> op_var .)
    TIMES           reduce using rule 42 (operation -> op_var .)
    DIVIDE          reduce using rule 42 (operation -> op_var .)
    MOD             reduce using rule 42 (operation -> op_var .)
    DO              reduce using rule 42 (operation -> op_var .)
    EQ              reduce using rule 42 (operation -> op_var .)
    NE              reduce using rule 42 (operation -> op_var .)
    LT              reduce using rule 42 (operation -> op_var .)
    LE              reduce using rule 42 (operation -> op_var .)
    GT              reduce using rule 42 (operation -> op_var .)
    GE              reduce using rule 42 (operation -> op_var .)
    LNOT            reduce using rule 42 (operation -> op_var .)
    LOR             reduce using rule 42 (operation -> op_var .)
    LAND            reduce using rule 42 (operation -> op_var .)
    LXOR            reduce using rule 42 (operation -> op_var .)
    THEN            reduce using rule 42 (operation -> op_var .)
    RPARENT         reduce using rule 42 (operation -> op_var .)

  ! EQ              [ reduce using rule 55 (relation -> op_var .) ]
  ! NE              [ reduce using rule 55 (relation -> op_var .) ]
  ! LT              [ reduce using rule 55 (relation -> op_var .) ]
  ! LE              [ reduce using rule 55 (relation -> op_var .) ]
  ! GT              [ reduce using rule 55 (relation -> op_var .) ]
  ! GE              [ reduce using rule 55 (relation -> op_var .) ]
  ! LNOT            [ reduce using rule 55 (relation -> op_var .) ]
  ! LOR             [ reduce using rule 55 (relation -> op_var .) ]
  ! LAND            [ reduce using rule 55 (relation -> op_var .) ]
  ! LXOR            [ reduce using rule 55 (relation -> op_var .) ]
  ! THEN            [ reduce using rule 55 (relation -> op_var .) ]
  ! RPARENT         [ reduce using rule 55 (relation -> op_var .) ]
  ! DO              [ reduce using rule 55 (relation -> op_var .) ]


state 58

    (75) op_var -> array_call .

    PLUS            reduce using rule 75 (op_var -> array_call .)
    MINUS           reduce using rule 75 (op_var -> array_call .)
    TIMES           reduce using rule 75 (op_var -> array_call .)
    DIVIDE          reduce using rule 75 (op_var -> array_call .)
    MOD             reduce using rule 75 (op_var -> array_call .)
    DO              reduce using rule 75 (op_var -> array_call .)
    EQ              reduce using rule 75 (op_var -> array_call .)
    NE              reduce using rule 75 (op_var -> array_call .)
    LT              reduce using rule 75 (op_var -> array_call .)
    LE              reduce using rule 75 (op_var -> array_call .)
    GT              reduce using rule 75 (op_var -> array_call .)
    GE              reduce using rule 75 (op_var -> array_call .)
    LNOT            reduce using rule 75 (op_var -> array_call .)
    LOR             reduce using rule 75 (op_var -> array_call .)
    LAND            reduce using rule 75 (op_var -> array_call .)
    LXOR            reduce using rule 75 (op_var -> array_call .)
    THEN            reduce using rule 75 (op_var -> array_call .)
    RPARENT         reduce using rule 75 (op_var -> array_call .)
    SEMI            reduce using rule 75 (op_var -> array_call .)
    TO              reduce using rule 75 (op_var -> array_call .)
    RBLOCK          reduce using rule 75 (op_var -> array_call .)
    ASSIGN          reduce using rule 75 (op_var -> array_call .)


state 59

    (56) relation -> operation .
    (43) operation -> operation . op_arith operation
    (76) op_arith -> . PLUS
    (77) op_arith -> . MINUS
    (78) op_arith -> . TIMES
    (79) op_arith -> . DIVIDE
    (80) op_arith -> . MOD

    EQ              reduce using rule 56 (relation -> operation .)
    NE              reduce using rule 56 (relation -> operation .)
    LT              reduce using rule 56 (relation -> operation .)
    LE              reduce using rule 56 (relation -> operation .)
    GT              reduce using rule 56 (relation -> operation .)
    GE              reduce using rule 56 (relation -> operation .)
    LNOT            reduce using rule 56 (relation -> operation .)
    LOR             reduce using rule 56 (relation -> operation .)
    LAND            reduce using rule 56 (relation -> operation .)
    LXOR            reduce using rule 56 (relation -> operation .)
    THEN            reduce using rule 56 (relation -> operation .)
    DO              reduce using rule 56 (relation -> operation .)
    RPARENT         reduce using rule 56 (relation -> operation .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 102
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 103

    op_arith                       shift and go to state 101

state 60

    (73) op_var -> ID .
    (68) array_call -> ID . LBLOCK op_var RBLOCK

    PLUS            reduce using rule 73 (op_var -> ID .)
    MINUS           reduce using rule 73 (op_var -> ID .)
    TIMES           reduce using rule 73 (op_var -> ID .)
    DIVIDE          reduce using rule 73 (op_var -> ID .)
    MOD             reduce using rule 73 (op_var -> ID .)
    DO              reduce using rule 73 (op_var -> ID .)
    EQ              reduce using rule 73 (op_var -> ID .)
    NE              reduce using rule 73 (op_var -> ID .)
    LT              reduce using rule 73 (op_var -> ID .)
    LE              reduce using rule 73 (op_var -> ID .)
    GT              reduce using rule 73 (op_var -> ID .)
    GE              reduce using rule 73 (op_var -> ID .)
    LNOT            reduce using rule 73 (op_var -> ID .)
    LOR             reduce using rule 73 (op_var -> ID .)
    LAND            reduce using rule 73 (op_var -> ID .)
    LXOR            reduce using rule 73 (op_var -> ID .)
    THEN            reduce using rule 73 (op_var -> ID .)
    RPARENT         reduce using rule 73 (op_var -> ID .)
    SEMI            reduce using rule 73 (op_var -> ID .)
    COMMA           reduce using rule 73 (op_var -> ID .)
    TO              reduce using rule 73 (op_var -> ID .)
    RBLOCK          reduce using rule 73 (op_var -> ID .)
    ASSIGN          reduce using rule 73 (op_var -> ID .)
    LBLOCK          shift and go to state 104


state 61

    (33) var_assignation -> op_var ASSIGN . arith_operation SEMI
    (34) var_assignation -> op_var ASSIGN . op_var SEMI
    (39) arith_operation -> . op_var op_arith op_var
    (40) arith_operation -> . op_var op_arith arith_operation
    (41) arith_operation -> . operation
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 60
    NUMBER          shift and go to state 21
    LPARENT         shift and go to state 106

    operation                      shift and go to state 108
    arith_operation                shift and go to state 105
    array_call                     shift and go to state 58
    op_var                         shift and go to state 107

state 62

    (27) declarations -> stament declarations .
    (48) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 27 (declarations -> stament declarations .)
    ELSE            reduce using rule 27 (declarations -> stament declarations .)
    RPARENT         reduce using rule 27 (declarations -> stament declarations .)
    ID              shift and go to state 79

  ! ID              [ reduce using rule 27 (declarations -> stament declarations .) ]


state 63

    (29) declarations -> var_assignation declarations .
    (48) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 29 (declarations -> var_assignation declarations .)
    ELSE            reduce using rule 29 (declarations -> var_assignation declarations .)
    RPARENT         reduce using rule 29 (declarations -> var_assignation declarations .)
    ID              shift and go to state 79

  ! ID              [ reduce using rule 29 (declarations -> var_assignation declarations .) ]


state 64

    (23) declarations -> readln_declaration declarations .
    (48) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 23 (declarations -> readln_declaration declarations .)
    ELSE            reduce using rule 23 (declarations -> readln_declaration declarations .)
    RPARENT         reduce using rule 23 (declarations -> readln_declaration declarations .)
    ID              shift and go to state 79

  ! ID              [ reduce using rule 23 (declarations -> readln_declaration declarations .) ]


state 65

    (91) functions_declarations -> FUNCTION ID . LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI

    LPARENT         shift and go to state 109


state 66

    (50) stament -> BREAK SEMI .

    WRITE           reduce using rule 50 (stament -> BREAK SEMI .)
    READLN          reduce using rule 50 (stament -> BREAK SEMI .)
    VAR             reduce using rule 50 (stament -> BREAK SEMI .)
    CONST           reduce using rule 50 (stament -> BREAK SEMI .)
    ID              reduce using rule 50 (stament -> BREAK SEMI .)
    BREAK           reduce using rule 50 (stament -> BREAK SEMI .)
    FUNCTION        reduce using rule 50 (stament -> BREAK SEMI .)
    WHILE           reduce using rule 50 (stament -> BREAK SEMI .)
    FOR             reduce using rule 50 (stament -> BREAK SEMI .)
    IF              reduce using rule 50 (stament -> BREAK SEMI .)
    NUMBER          reduce using rule 50 (stament -> BREAK SEMI .)
    END             reduce using rule 50 (stament -> BREAK SEMI .)
    RPARENT         reduce using rule 50 (stament -> BREAK SEMI .)
    ELSE            reduce using rule 50 (stament -> BREAK SEMI .)


state 67

    (52) for_declaration -> FOR assignation . TO op_var DO BEGIN declarations END SEMI

    TO              shift and go to state 110


state 68

    (53) assignation -> op_var . ASSIGN op_var

    ASSIGN          shift and go to state 111


state 69

    (21) declarations -> write_declaration declarations .
    (48) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 21 (declarations -> write_declaration declarations .)
    ELSE            reduce using rule 21 (declarations -> write_declaration declarations .)
    RPARENT         reduce using rule 21 (declarations -> write_declaration declarations .)
    ID              shift and go to state 79

  ! ID              [ reduce using rule 21 (declarations -> write_declaration declarations .) ]


state 70

    (31) declarations -> functions_declarations declarations .
    (48) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 31 (declarations -> functions_declarations declarations .)
    ELSE            reduce using rule 31 (declarations -> functions_declarations declarations .)
    RPARENT         reduce using rule 31 (declarations -> functions_declarations declarations .)
    ID              shift and go to state 79

  ! ID              [ reduce using rule 31 (declarations -> functions_declarations declarations .) ]


state 71

    (63) write_declaration -> WRITE LPARENT . op_write RPARENT SEMI
    (64) op_write -> . string_sentence
    (65) op_write -> . op_var
    (66) op_write -> . array_call
    (67) op_write -> . op_write COMMA op_write
    (69) string_sentence -> . STRINGVAL
    (70) string_sentence -> . STRINGVAL PLUS ID
    (71) string_sentence -> . STRINGVAL PLUS string_sentence
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    STRINGVAL       shift and go to state 113
    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    string_sentence                shift and go to state 116
    array_call                     shift and go to state 114
    op_write                       shift and go to state 115
    op_var                         shift and go to state 112

state 72

    (25) declarations -> declaracion_variables declarations .
    (48) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 25 (declarations -> declaracion_variables declarations .)
    ELSE            reduce using rule 25 (declarations -> declaracion_variables declarations .)
    RPARENT         reduce using rule 25 (declarations -> declaracion_variables declarations .)
    ID              shift and go to state 79

  ! ID              [ reduce using rule 25 (declarations -> declaracion_variables declarations .) ]


state 73

    (49) stament -> ID LPARENT . declarations RPARENT
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 117
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 74

    (35) array_assignation -> ID LBLOCK . NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> ID LBLOCK . ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> ID LBLOCK . array_assignation RBLOCK ASSIGN operation SEMI
    (68) array_call -> ID LBLOCK . op_var RBLOCK
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    NUMBER          shift and go to state 118
    ID              shift and go to state 119

    array_call                     shift and go to state 41
    array_assignation              shift and go to state 120
    op_var                         shift and go to state 121

state 75

    (60) relacion_if -> LPARENT . op_var op_arith op_var RPARENT op_logic op_var
    (58) relation -> LPARENT . relation RPARENT
    (44) operation -> LPARENT . operation RPARENT
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (55) relation -> . op_var
    (56) relation -> . operation
    (57) relation -> . relation op_logic relation
    (58) relation -> . LPARENT relation RPARENT
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 60
    NUMBER          shift and go to state 21
    LPARENT         shift and go to state 55

    array_call                     shift and go to state 58
    op_var                         shift and go to state 122
    relation                       shift and go to state 84
    operation                      shift and go to state 85

state 76

    (59) relacion_if -> relation .
    (57) relation -> relation . op_logic relation
    (81) op_logic -> . EQ
    (82) op_logic -> . NE
    (83) op_logic -> . LT
    (84) op_logic -> . LE
    (85) op_logic -> . GT
    (86) op_logic -> . GE
    (87) op_logic -> . LNOT
    (88) op_logic -> . LOR
    (89) op_logic -> . LAND
    (90) op_logic -> . LXOR

    THEN            reduce using rule 59 (relacion_if -> relation .)
    EQ              shift and go to state 97
    NE              shift and go to state 92
    LT              shift and go to state 90
    LE              shift and go to state 87
    GT              shift and go to state 94
    GE              shift and go to state 89
    LNOT            shift and go to state 96
    LOR             shift and go to state 93
    LAND            shift and go to state 95
    LXOR            shift and go to state 88

    op_logic                       shift and go to state 91

state 77

    (54) if_declaration -> IF relacion_if . THEN BEGIN declarations else_stament END SEMI

    THEN            shift and go to state 123


state 78

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END . DOT

    DOT             shift and go to state 124


state 79

    (48) stament -> declarations ID . ASSIGN

    ASSIGN          shift and go to state 125


state 80

    (72) readln_declaration -> READLN LPARENT . ID RPARENT SEMI

    ID              shift and go to state 126


state 81

    (6) declaracion_variables -> VAR var_declaration COLON type_specifier . SEMI

    SEMI            shift and go to state 127


state 82

    (7) declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .

    WRITE           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    READLN          reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    VAR             reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    CONST           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    ID              reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    BREAK           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    FUNCTION        reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    WHILE           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    FOR             reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    IF              reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    NUMBER          reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    END             reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    RPARENT         reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    ELSE            reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    BEGIN           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    USES            reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)


state 83

    (18) type_specifier -> ARRAY LBLOCK . NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    NUMBER          shift and go to state 128


state 84

    (58) relation -> LPARENT relation . RPARENT
    (57) relation -> relation . op_logic relation
    (81) op_logic -> . EQ
    (82) op_logic -> . NE
    (83) op_logic -> . LT
    (84) op_logic -> . LE
    (85) op_logic -> . GT
    (86) op_logic -> . GE
    (87) op_logic -> . LNOT
    (88) op_logic -> . LOR
    (89) op_logic -> . LAND
    (90) op_logic -> . LXOR

    RPARENT         shift and go to state 129
    EQ              shift and go to state 97
    NE              shift and go to state 92
    LT              shift and go to state 90
    LE              shift and go to state 87
    GT              shift and go to state 94
    GE              shift and go to state 89
    LNOT            shift and go to state 96
    LOR             shift and go to state 93
    LAND            shift and go to state 95
    LXOR            shift and go to state 88

    op_logic                       shift and go to state 91

state 85

    (44) operation -> LPARENT operation . RPARENT
    (56) relation -> operation .
    (43) operation -> operation . op_arith operation
    (76) op_arith -> . PLUS
    (77) op_arith -> . MINUS
    (78) op_arith -> . TIMES
    (79) op_arith -> . DIVIDE
    (80) op_arith -> . MOD

  ! shift/reduce conflict for RPARENT resolved as shift
    RPARENT         shift and go to state 130
    EQ              reduce using rule 56 (relation -> operation .)
    NE              reduce using rule 56 (relation -> operation .)
    LT              reduce using rule 56 (relation -> operation .)
    LE              reduce using rule 56 (relation -> operation .)
    GT              reduce using rule 56 (relation -> operation .)
    GE              reduce using rule 56 (relation -> operation .)
    LNOT            reduce using rule 56 (relation -> operation .)
    LOR             reduce using rule 56 (relation -> operation .)
    LAND            reduce using rule 56 (relation -> operation .)
    LXOR            reduce using rule 56 (relation -> operation .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 102
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 103

  ! RPARENT         [ reduce using rule 56 (relation -> operation .) ]

    op_arith                       shift and go to state 101

state 86

    (51) while_declaration -> WHILE relation DO . BEGIN declarations END SEMI

    BEGIN           shift and go to state 131


state 87

    (84) op_logic -> LE .

    LPARENT         reduce using rule 84 (op_logic -> LE .)
    ID              reduce using rule 84 (op_logic -> LE .)
    NUMBER          reduce using rule 84 (op_logic -> LE .)


state 88

    (90) op_logic -> LXOR .

    LPARENT         reduce using rule 90 (op_logic -> LXOR .)
    ID              reduce using rule 90 (op_logic -> LXOR .)
    NUMBER          reduce using rule 90 (op_logic -> LXOR .)


state 89

    (86) op_logic -> GE .

    LPARENT         reduce using rule 86 (op_logic -> GE .)
    ID              reduce using rule 86 (op_logic -> GE .)
    NUMBER          reduce using rule 86 (op_logic -> GE .)


state 90

    (83) op_logic -> LT .

    LPARENT         reduce using rule 83 (op_logic -> LT .)
    ID              reduce using rule 83 (op_logic -> LT .)
    NUMBER          reduce using rule 83 (op_logic -> LT .)


state 91

    (57) relation -> relation op_logic . relation
    (55) relation -> . op_var
    (56) relation -> . operation
    (57) relation -> . relation op_logic relation
    (58) relation -> . LPARENT relation RPARENT
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 55
    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    array_call                     shift and go to state 58
    op_var                         shift and go to state 57
    relation                       shift and go to state 132
    operation                      shift and go to state 59

state 92

    (82) op_logic -> NE .

    LPARENT         reduce using rule 82 (op_logic -> NE .)
    ID              reduce using rule 82 (op_logic -> NE .)
    NUMBER          reduce using rule 82 (op_logic -> NE .)


state 93

    (88) op_logic -> LOR .

    LPARENT         reduce using rule 88 (op_logic -> LOR .)
    ID              reduce using rule 88 (op_logic -> LOR .)
    NUMBER          reduce using rule 88 (op_logic -> LOR .)


state 94

    (85) op_logic -> GT .

    LPARENT         reduce using rule 85 (op_logic -> GT .)
    ID              reduce using rule 85 (op_logic -> GT .)
    NUMBER          reduce using rule 85 (op_logic -> GT .)


state 95

    (89) op_logic -> LAND .

    LPARENT         reduce using rule 89 (op_logic -> LAND .)
    ID              reduce using rule 89 (op_logic -> LAND .)
    NUMBER          reduce using rule 89 (op_logic -> LAND .)


state 96

    (87) op_logic -> LNOT .

    LPARENT         reduce using rule 87 (op_logic -> LNOT .)
    ID              reduce using rule 87 (op_logic -> LNOT .)
    NUMBER          reduce using rule 87 (op_logic -> LNOT .)


state 97

    (81) op_logic -> EQ .

    LPARENT         reduce using rule 81 (op_logic -> EQ .)
    ID              reduce using rule 81 (op_logic -> EQ .)
    NUMBER          reduce using rule 81 (op_logic -> EQ .)


state 98

    (79) op_arith -> DIVIDE .

    LPARENT         reduce using rule 79 (op_arith -> DIVIDE .)
    ID              reduce using rule 79 (op_arith -> DIVIDE .)
    NUMBER          reduce using rule 79 (op_arith -> DIVIDE .)


state 99

    (78) op_arith -> TIMES .

    LPARENT         reduce using rule 78 (op_arith -> TIMES .)
    ID              reduce using rule 78 (op_arith -> TIMES .)
    NUMBER          reduce using rule 78 (op_arith -> TIMES .)


state 100

    (76) op_arith -> PLUS .

    LPARENT         reduce using rule 76 (op_arith -> PLUS .)
    ID              reduce using rule 76 (op_arith -> PLUS .)
    NUMBER          reduce using rule 76 (op_arith -> PLUS .)


state 101

    (43) operation -> operation op_arith . operation
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 106
    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    operation                      shift and go to state 134
    array_call                     shift and go to state 58
    op_var                         shift and go to state 133

state 102

    (77) op_arith -> MINUS .

    LPARENT         reduce using rule 77 (op_arith -> MINUS .)
    ID              reduce using rule 77 (op_arith -> MINUS .)
    NUMBER          reduce using rule 77 (op_arith -> MINUS .)


state 103

    (80) op_arith -> MOD .

    LPARENT         reduce using rule 80 (op_arith -> MOD .)
    ID              reduce using rule 80 (op_arith -> MOD .)
    NUMBER          reduce using rule 80 (op_arith -> MOD .)


state 104

    (68) array_call -> ID LBLOCK . op_var RBLOCK
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    array_call                     shift and go to state 58
    op_var                         shift and go to state 121

state 105

    (33) var_assignation -> op_var ASSIGN arith_operation . SEMI

    SEMI            shift and go to state 135


state 106

    (44) operation -> LPARENT . operation RPARENT
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 106
    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    operation                      shift and go to state 136
    array_call                     shift and go to state 58
    op_var                         shift and go to state 133

state 107

    (34) var_assignation -> op_var ASSIGN op_var . SEMI
    (39) arith_operation -> op_var . op_arith op_var
    (40) arith_operation -> op_var . op_arith arith_operation
    (42) operation -> op_var .
    (76) op_arith -> . PLUS
    (77) op_arith -> . MINUS
    (78) op_arith -> . TIMES
    (79) op_arith -> . DIVIDE
    (80) op_arith -> . MOD

  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMI            shift and go to state 137
    PLUS            shift and go to state 100
    MINUS           shift and go to state 102
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 103

  ! PLUS            [ reduce using rule 42 (operation -> op_var .) ]
  ! MINUS           [ reduce using rule 42 (operation -> op_var .) ]
  ! TIMES           [ reduce using rule 42 (operation -> op_var .) ]
  ! DIVIDE          [ reduce using rule 42 (operation -> op_var .) ]
  ! MOD             [ reduce using rule 42 (operation -> op_var .) ]
  ! SEMI            [ reduce using rule 42 (operation -> op_var .) ]

    op_arith                       shift and go to state 138

state 108

    (41) arith_operation -> operation .
    (43) operation -> operation . op_arith operation
    (76) op_arith -> . PLUS
    (77) op_arith -> . MINUS
    (78) op_arith -> . TIMES
    (79) op_arith -> . DIVIDE
    (80) op_arith -> . MOD

    SEMI            reduce using rule 41 (arith_operation -> operation .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 102
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 103

    op_arith                       shift and go to state 101

state 109

    (91) functions_declarations -> FUNCTION ID LPARENT . parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (92) parameters -> . ID end_parameters
    (93) parameters -> . ID COMMA parameters

    ID              shift and go to state 140

    parameters                     shift and go to state 139

state 110

    (52) for_declaration -> FOR assignation TO . op_var DO BEGIN declarations END SEMI
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    array_call                     shift and go to state 58
    op_var                         shift and go to state 141

state 111

    (53) assignation -> op_var ASSIGN . op_var
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    array_call                     shift and go to state 58
    op_var                         shift and go to state 142

state 112

    (65) op_write -> op_var .

    RPARENT         reduce using rule 65 (op_write -> op_var .)
    COMMA           reduce using rule 65 (op_write -> op_var .)


state 113

    (69) string_sentence -> STRINGVAL .
    (70) string_sentence -> STRINGVAL . PLUS ID
    (71) string_sentence -> STRINGVAL . PLUS string_sentence

    COMMA           reduce using rule 69 (string_sentence -> STRINGVAL .)
    RPARENT         reduce using rule 69 (string_sentence -> STRINGVAL .)
    PLUS            shift and go to state 143


state 114

    (66) op_write -> array_call .
    (75) op_var -> array_call .

  ! reduce/reduce conflict for RPARENT resolved using rule 66 (op_write -> array_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 66 (op_write -> array_call .)
    RPARENT         reduce using rule 66 (op_write -> array_call .)
    COMMA           reduce using rule 66 (op_write -> array_call .)

  ! RPARENT         [ reduce using rule 75 (op_var -> array_call .) ]
  ! COMMA           [ reduce using rule 75 (op_var -> array_call .) ]


state 115

    (63) write_declaration -> WRITE LPARENT op_write . RPARENT SEMI
    (67) op_write -> op_write . COMMA op_write

    RPARENT         shift and go to state 145
    COMMA           shift and go to state 144


state 116

    (64) op_write -> string_sentence .

    RPARENT         reduce using rule 64 (op_write -> string_sentence .)
    COMMA           reduce using rule 64 (op_write -> string_sentence .)


state 117

    (49) stament -> ID LPARENT declarations . RPARENT
    (48) stament -> declarations . ID ASSIGN

    RPARENT         shift and go to state 146
    ID              shift and go to state 79


state 118

    (35) array_assignation -> ID LBLOCK NUMBER . RBLOCK ASSIGN operation SEMI
    (74) op_var -> NUMBER .

  ! shift/reduce conflict for RBLOCK resolved as shift
    RBLOCK          shift and go to state 147

  ! RBLOCK          [ reduce using rule 74 (op_var -> NUMBER .) ]


state 119

    (36) array_assignation -> ID LBLOCK ID . RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> ID . LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> ID . LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> ID . LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (73) op_var -> ID .
    (68) array_call -> ID . LBLOCK op_var RBLOCK

  ! shift/reduce conflict for RBLOCK resolved as shift
    RBLOCK          shift and go to state 148
    LBLOCK          shift and go to state 74

  ! RBLOCK          [ reduce using rule 73 (op_var -> ID .) ]


state 120

    (37) array_assignation -> ID LBLOCK array_assignation . RBLOCK ASSIGN operation SEMI

    RBLOCK          shift and go to state 149


state 121

    (68) array_call -> ID LBLOCK op_var . RBLOCK

    RBLOCK          shift and go to state 150


state 122

    (60) relacion_if -> LPARENT op_var . op_arith op_var RPARENT op_logic op_var
    (55) relation -> op_var .
    (42) operation -> op_var .
    (76) op_arith -> . PLUS
    (77) op_arith -> . MINUS
    (78) op_arith -> . TIMES
    (79) op_arith -> . DIVIDE
    (80) op_arith -> . MOD

  ! reduce/reduce conflict for RPARENT resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for EQ resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for NE resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LT resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LE resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for GT resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for GE resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LNOT resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LOR resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LAND resolved using rule 42 (operation -> op_var .)
  ! reduce/reduce conflict for LXOR resolved using rule 42 (operation -> op_var .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    RPARENT         reduce using rule 42 (operation -> op_var .)
    EQ              reduce using rule 42 (operation -> op_var .)
    NE              reduce using rule 42 (operation -> op_var .)
    LT              reduce using rule 42 (operation -> op_var .)
    LE              reduce using rule 42 (operation -> op_var .)
    GT              reduce using rule 42 (operation -> op_var .)
    GE              reduce using rule 42 (operation -> op_var .)
    LNOT            reduce using rule 42 (operation -> op_var .)
    LOR             reduce using rule 42 (operation -> op_var .)
    LAND            reduce using rule 42 (operation -> op_var .)
    LXOR            reduce using rule 42 (operation -> op_var .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 102
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 103

  ! RPARENT         [ reduce using rule 55 (relation -> op_var .) ]
  ! EQ              [ reduce using rule 55 (relation -> op_var .) ]
  ! NE              [ reduce using rule 55 (relation -> op_var .) ]
  ! LT              [ reduce using rule 55 (relation -> op_var .) ]
  ! LE              [ reduce using rule 55 (relation -> op_var .) ]
  ! GT              [ reduce using rule 55 (relation -> op_var .) ]
  ! GE              [ reduce using rule 55 (relation -> op_var .) ]
  ! LNOT            [ reduce using rule 55 (relation -> op_var .) ]
  ! LOR             [ reduce using rule 55 (relation -> op_var .) ]
  ! LAND            [ reduce using rule 55 (relation -> op_var .) ]
  ! LXOR            [ reduce using rule 55 (relation -> op_var .) ]
  ! PLUS            [ reduce using rule 42 (operation -> op_var .) ]
  ! MINUS           [ reduce using rule 42 (operation -> op_var .) ]
  ! TIMES           [ reduce using rule 42 (operation -> op_var .) ]
  ! DIVIDE          [ reduce using rule 42 (operation -> op_var .) ]
  ! MOD             [ reduce using rule 42 (operation -> op_var .) ]

    op_arith                       shift and go to state 151

state 123

    (54) if_declaration -> IF relacion_if THEN . BEGIN declarations else_stament END SEMI

    BEGIN           shift and go to state 152


state 124

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT .)


state 125

    (48) stament -> declarations ID ASSIGN .

    WRITE           reduce using rule 48 (stament -> declarations ID ASSIGN .)
    READLN          reduce using rule 48 (stament -> declarations ID ASSIGN .)
    VAR             reduce using rule 48 (stament -> declarations ID ASSIGN .)
    CONST           reduce using rule 48 (stament -> declarations ID ASSIGN .)
    ID              reduce using rule 48 (stament -> declarations ID ASSIGN .)
    BREAK           reduce using rule 48 (stament -> declarations ID ASSIGN .)
    FUNCTION        reduce using rule 48 (stament -> declarations ID ASSIGN .)
    WHILE           reduce using rule 48 (stament -> declarations ID ASSIGN .)
    FOR             reduce using rule 48 (stament -> declarations ID ASSIGN .)
    IF              reduce using rule 48 (stament -> declarations ID ASSIGN .)
    NUMBER          reduce using rule 48 (stament -> declarations ID ASSIGN .)
    END             reduce using rule 48 (stament -> declarations ID ASSIGN .)
    RPARENT         reduce using rule 48 (stament -> declarations ID ASSIGN .)
    ELSE            reduce using rule 48 (stament -> declarations ID ASSIGN .)


state 126

    (72) readln_declaration -> READLN LPARENT ID . RPARENT SEMI

    RPARENT         shift and go to state 153


state 127

    (6) declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .

    WRITE           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    READLN          reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    VAR             reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    CONST           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    ID              reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    BREAK           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    FUNCTION        reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    WHILE           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    FOR             reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    IF              reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    NUMBER          reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    END             reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    RPARENT         reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    ELSE            reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    BEGIN           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    USES            reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)


state 128

    (18) type_specifier -> ARRAY LBLOCK NUMBER . DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    DOT             shift and go to state 154


state 129

    (58) relation -> LPARENT relation RPARENT .

    EQ              reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    NE              reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    LT              reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    LE              reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    GT              reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    GE              reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    LNOT            reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    LOR             reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    LAND            reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    LXOR            reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    THEN            reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    RPARENT         reduce using rule 58 (relation -> LPARENT relation RPARENT .)
    DO              reduce using rule 58 (relation -> LPARENT relation RPARENT .)


state 130

    (44) operation -> LPARENT operation RPARENT .

    PLUS            reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    MINUS           reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    TIMES           reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    DIVIDE          reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    MOD             reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    DO              reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    EQ              reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    NE              reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    LT              reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    LE              reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    GT              reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    GE              reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    LNOT            reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    LOR             reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    LAND            reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    LXOR            reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    SEMI            reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    THEN            reduce using rule 44 (operation -> LPARENT operation RPARENT .)
    RPARENT         reduce using rule 44 (operation -> LPARENT operation RPARENT .)


state 131

    (51) while_declaration -> WHILE relation DO BEGIN . declarations END SEMI
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 155
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 132

    (57) relation -> relation op_logic relation .
    (57) relation -> relation . op_logic relation
    (81) op_logic -> . EQ
    (82) op_logic -> . NE
    (83) op_logic -> . LT
    (84) op_logic -> . LE
    (85) op_logic -> . GT
    (86) op_logic -> . GE
    (87) op_logic -> . LNOT
    (88) op_logic -> . LOR
    (89) op_logic -> . LAND
    (90) op_logic -> . LXOR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LNOT resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LXOR resolved as shift
    THEN            reduce using rule 57 (relation -> relation op_logic relation .)
    RPARENT         reduce using rule 57 (relation -> relation op_logic relation .)
    DO              reduce using rule 57 (relation -> relation op_logic relation .)
    EQ              shift and go to state 97
    NE              shift and go to state 92
    LT              shift and go to state 90
    LE              shift and go to state 87
    GT              shift and go to state 94
    GE              shift and go to state 89
    LNOT            shift and go to state 96
    LOR             shift and go to state 93
    LAND            shift and go to state 95
    LXOR            shift and go to state 88

  ! EQ              [ reduce using rule 57 (relation -> relation op_logic relation .) ]
  ! NE              [ reduce using rule 57 (relation -> relation op_logic relation .) ]
  ! LT              [ reduce using rule 57 (relation -> relation op_logic relation .) ]
  ! LE              [ reduce using rule 57 (relation -> relation op_logic relation .) ]
  ! GT              [ reduce using rule 57 (relation -> relation op_logic relation .) ]
  ! GE              [ reduce using rule 57 (relation -> relation op_logic relation .) ]
  ! LNOT            [ reduce using rule 57 (relation -> relation op_logic relation .) ]
  ! LOR             [ reduce using rule 57 (relation -> relation op_logic relation .) ]
  ! LAND            [ reduce using rule 57 (relation -> relation op_logic relation .) ]
  ! LXOR            [ reduce using rule 57 (relation -> relation op_logic relation .) ]

    op_logic                       shift and go to state 91

state 133

    (42) operation -> op_var .

    SEMI            reduce using rule 42 (operation -> op_var .)
    PLUS            reduce using rule 42 (operation -> op_var .)
    MINUS           reduce using rule 42 (operation -> op_var .)
    TIMES           reduce using rule 42 (operation -> op_var .)
    DIVIDE          reduce using rule 42 (operation -> op_var .)
    MOD             reduce using rule 42 (operation -> op_var .)
    DO              reduce using rule 42 (operation -> op_var .)
    EQ              reduce using rule 42 (operation -> op_var .)
    NE              reduce using rule 42 (operation -> op_var .)
    LT              reduce using rule 42 (operation -> op_var .)
    LE              reduce using rule 42 (operation -> op_var .)
    GT              reduce using rule 42 (operation -> op_var .)
    GE              reduce using rule 42 (operation -> op_var .)
    LNOT            reduce using rule 42 (operation -> op_var .)
    LOR             reduce using rule 42 (operation -> op_var .)
    LAND            reduce using rule 42 (operation -> op_var .)
    LXOR            reduce using rule 42 (operation -> op_var .)
    THEN            reduce using rule 42 (operation -> op_var .)
    RPARENT         reduce using rule 42 (operation -> op_var .)


state 134

    (43) operation -> operation op_arith operation .
    (43) operation -> operation . op_arith operation
    (76) op_arith -> . PLUS
    (77) op_arith -> . MINUS
    (78) op_arith -> . TIMES
    (79) op_arith -> . DIVIDE
    (80) op_arith -> . MOD

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    DO              reduce using rule 43 (operation -> operation op_arith operation .)
    EQ              reduce using rule 43 (operation -> operation op_arith operation .)
    NE              reduce using rule 43 (operation -> operation op_arith operation .)
    LT              reduce using rule 43 (operation -> operation op_arith operation .)
    LE              reduce using rule 43 (operation -> operation op_arith operation .)
    GT              reduce using rule 43 (operation -> operation op_arith operation .)
    GE              reduce using rule 43 (operation -> operation op_arith operation .)
    LNOT            reduce using rule 43 (operation -> operation op_arith operation .)
    LOR             reduce using rule 43 (operation -> operation op_arith operation .)
    LAND            reduce using rule 43 (operation -> operation op_arith operation .)
    LXOR            reduce using rule 43 (operation -> operation op_arith operation .)
    SEMI            reduce using rule 43 (operation -> operation op_arith operation .)
    THEN            reduce using rule 43 (operation -> operation op_arith operation .)
    RPARENT         reduce using rule 43 (operation -> operation op_arith operation .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 102
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 103

  ! PLUS            [ reduce using rule 43 (operation -> operation op_arith operation .) ]
  ! MINUS           [ reduce using rule 43 (operation -> operation op_arith operation .) ]
  ! TIMES           [ reduce using rule 43 (operation -> operation op_arith operation .) ]
  ! DIVIDE          [ reduce using rule 43 (operation -> operation op_arith operation .) ]
  ! MOD             [ reduce using rule 43 (operation -> operation op_arith operation .) ]

    op_arith                       shift and go to state 101

state 135

    (33) var_assignation -> op_var ASSIGN arith_operation SEMI .

    WRITE           reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    READLN          reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    VAR             reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    CONST           reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    ID              reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    BREAK           reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    FUNCTION        reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    WHILE           reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    FOR             reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    IF              reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    NUMBER          reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    END             reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    RPARENT         reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    ELSE            reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)


state 136

    (44) operation -> LPARENT operation . RPARENT
    (43) operation -> operation . op_arith operation
    (76) op_arith -> . PLUS
    (77) op_arith -> . MINUS
    (78) op_arith -> . TIMES
    (79) op_arith -> . DIVIDE
    (80) op_arith -> . MOD

    RPARENT         shift and go to state 130
    PLUS            shift and go to state 100
    MINUS           shift and go to state 102
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 103

    op_arith                       shift and go to state 101

state 137

    (34) var_assignation -> op_var ASSIGN op_var SEMI .

    WRITE           reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    READLN          reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    VAR             reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    CONST           reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    ID              reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    BREAK           reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    FUNCTION        reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    WHILE           reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    FOR             reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    IF              reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    NUMBER          reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    END             reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    RPARENT         reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)
    ELSE            reduce using rule 34 (var_assignation -> op_var ASSIGN op_var SEMI .)


state 138

    (39) arith_operation -> op_var op_arith . op_var
    (40) arith_operation -> op_var op_arith . arith_operation
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (39) arith_operation -> . op_var op_arith op_var
    (40) arith_operation -> . op_var op_arith arith_operation
    (41) arith_operation -> . operation
    (68) array_call -> . ID LBLOCK op_var RBLOCK
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT

    ID              shift and go to state 60
    NUMBER          shift and go to state 21
    LPARENT         shift and go to state 106

    operation                      shift and go to state 108
    arith_operation                shift and go to state 156
    array_call                     shift and go to state 58
    op_var                         shift and go to state 157

state 139

    (91) functions_declarations -> FUNCTION ID LPARENT parameters . RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI

    RPARENT         shift and go to state 158


state 140

    (92) parameters -> ID . end_parameters
    (93) parameters -> ID . COMMA parameters
    (94) end_parameters -> . COLON type_specifier

    COMMA           shift and go to state 160
    COLON           shift and go to state 161

    end_parameters                 shift and go to state 159

state 141

    (52) for_declaration -> FOR assignation TO op_var . DO BEGIN declarations END SEMI

    DO              shift and go to state 162


state 142

    (53) assignation -> op_var ASSIGN op_var .

    TO              reduce using rule 53 (assignation -> op_var ASSIGN op_var .)


state 143

    (70) string_sentence -> STRINGVAL PLUS . ID
    (71) string_sentence -> STRINGVAL PLUS . string_sentence
    (69) string_sentence -> . STRINGVAL
    (70) string_sentence -> . STRINGVAL PLUS ID
    (71) string_sentence -> . STRINGVAL PLUS string_sentence

    ID              shift and go to state 164
    STRINGVAL       shift and go to state 113

    string_sentence                shift and go to state 163

state 144

    (67) op_write -> op_write COMMA . op_write
    (64) op_write -> . string_sentence
    (65) op_write -> . op_var
    (66) op_write -> . array_call
    (67) op_write -> . op_write COMMA op_write
    (69) string_sentence -> . STRINGVAL
    (70) string_sentence -> . STRINGVAL PLUS ID
    (71) string_sentence -> . STRINGVAL PLUS string_sentence
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    STRINGVAL       shift and go to state 113
    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    string_sentence                shift and go to state 116
    array_call                     shift and go to state 114
    op_write                       shift and go to state 165
    op_var                         shift and go to state 112

state 145

    (63) write_declaration -> WRITE LPARENT op_write RPARENT . SEMI

    SEMI            shift and go to state 166


state 146

    (49) stament -> ID LPARENT declarations RPARENT .

    WRITE           reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    READLN          reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    VAR             reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    CONST           reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    ID              reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    BREAK           reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    FUNCTION        reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    WHILE           reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    FOR             reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    IF              reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    NUMBER          reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    END             reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    RPARENT         reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)
    ELSE            reduce using rule 49 (stament -> ID LPARENT declarations RPARENT .)


state 147

    (35) array_assignation -> ID LBLOCK NUMBER RBLOCK . ASSIGN operation SEMI

    ASSIGN          shift and go to state 167


state 148

    (36) array_assignation -> ID LBLOCK ID RBLOCK . ASSIGN operation SEMI

    ASSIGN          shift and go to state 168


state 149

    (37) array_assignation -> ID LBLOCK array_assignation RBLOCK . ASSIGN operation SEMI

    ASSIGN          shift and go to state 169


state 150

    (68) array_call -> ID LBLOCK op_var RBLOCK .

    EQ              reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    NE              reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    LT              reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    LE              reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    GT              reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    GE              reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    LNOT            reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    LOR             reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    LAND            reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    LXOR            reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    DO              reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    THEN            reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    RPARENT         reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    PLUS            reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    MINUS           reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    TIMES           reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    DIVIDE          reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    MOD             reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    SEMI            reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    WRITE           reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    READLN          reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    VAR             reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    CONST           reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    ID              reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    BREAK           reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    FUNCTION        reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    WHILE           reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    FOR             reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    IF              reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    NUMBER          reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    END             reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    ASSIGN          reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    COMMA           reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    RBLOCK          reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    ELSE            reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)
    TO              reduce using rule 68 (array_call -> ID LBLOCK op_var RBLOCK .)


state 151

    (60) relacion_if -> LPARENT op_var op_arith . op_var RPARENT op_logic op_var
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    array_call                     shift and go to state 58
    op_var                         shift and go to state 170

state 152

    (54) if_declaration -> IF relacion_if THEN BEGIN . declarations else_stament END SEMI
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 171
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 153

    (72) readln_declaration -> READLN LPARENT ID RPARENT . SEMI

    SEMI            shift and go to state 172


state 154

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT . DOT NUMBER RBLOCK OF type_specifier SEMI

    DOT             shift and go to state 173


state 155

    (51) while_declaration -> WHILE relation DO BEGIN declarations . END SEMI
    (48) stament -> declarations . ID ASSIGN

    END             shift and go to state 174
    ID              shift and go to state 79


state 156

    (40) arith_operation -> op_var op_arith arith_operation .

    SEMI            reduce using rule 40 (arith_operation -> op_var op_arith arith_operation .)


state 157

    (39) arith_operation -> op_var op_arith op_var .
    (39) arith_operation -> op_var . op_arith op_var
    (40) arith_operation -> op_var . op_arith arith_operation
    (42) operation -> op_var .
    (76) op_arith -> . PLUS
    (77) op_arith -> . MINUS
    (78) op_arith -> . TIMES
    (79) op_arith -> . DIVIDE
    (80) op_arith -> . MOD

  ! reduce/reduce conflict for SEMI resolved using rule 39 (arith_operation -> op_var op_arith op_var .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMI            reduce using rule 39 (arith_operation -> op_var op_arith op_var .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 102
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 103

  ! PLUS            [ reduce using rule 42 (operation -> op_var .) ]
  ! MINUS           [ reduce using rule 42 (operation -> op_var .) ]
  ! TIMES           [ reduce using rule 42 (operation -> op_var .) ]
  ! DIVIDE          [ reduce using rule 42 (operation -> op_var .) ]
  ! MOD             [ reduce using rule 42 (operation -> op_var .) ]
  ! SEMI            [ reduce using rule 42 (operation -> op_var .) ]

    op_arith                       shift and go to state 138

state 158

    (91) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT . COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI

    COLON           shift and go to state 175


state 159

    (92) parameters -> ID end_parameters .

    RPARENT         reduce using rule 92 (parameters -> ID end_parameters .)


state 160

    (93) parameters -> ID COMMA . parameters
    (92) parameters -> . ID end_parameters
    (93) parameters -> . ID COMMA parameters

    ID              shift and go to state 140

    parameters                     shift and go to state 176

state 161

    (94) end_parameters -> COLON . type_specifier
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 51
    CHAR            shift and go to state 48
    BYTE            shift and go to state 52
    REAL            shift and go to state 44
    SINGLE          shift and go to state 49
    DOUBLE          shift and go to state 47
    STRING          shift and go to state 46
    BOOLEAN         shift and go to state 50
    ARRAY           shift and go to state 53

    type_specifier                 shift and go to state 177

state 162

    (52) for_declaration -> FOR assignation TO op_var DO . BEGIN declarations END SEMI

    BEGIN           shift and go to state 178


state 163

    (71) string_sentence -> STRINGVAL PLUS string_sentence .

    COMMA           reduce using rule 71 (string_sentence -> STRINGVAL PLUS string_sentence .)
    RPARENT         reduce using rule 71 (string_sentence -> STRINGVAL PLUS string_sentence .)


state 164

    (70) string_sentence -> STRINGVAL PLUS ID .

    COMMA           reduce using rule 70 (string_sentence -> STRINGVAL PLUS ID .)
    RPARENT         reduce using rule 70 (string_sentence -> STRINGVAL PLUS ID .)


state 165

    (67) op_write -> op_write COMMA op_write .
    (67) op_write -> op_write . COMMA op_write

  ! shift/reduce conflict for COMMA resolved as shift
    RPARENT         reduce using rule 67 (op_write -> op_write COMMA op_write .)
    COMMA           shift and go to state 144

  ! COMMA           [ reduce using rule 67 (op_write -> op_write COMMA op_write .) ]


state 166

    (63) write_declaration -> WRITE LPARENT op_write RPARENT SEMI .

    WRITE           reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    READLN          reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    VAR             reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    CONST           reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    ID              reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    BREAK           reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    FUNCTION        reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    WHILE           reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    FOR             reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    IF              reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    NUMBER          reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    END             reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    RPARENT         reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    ELSE            reduce using rule 63 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)


state 167

    (35) array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN . operation SEMI
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 106
    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    operation                      shift and go to state 179
    array_call                     shift and go to state 58
    op_var                         shift and go to state 133

state 168

    (36) array_assignation -> ID LBLOCK ID RBLOCK ASSIGN . operation SEMI
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 106
    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    operation                      shift and go to state 180
    array_call                     shift and go to state 58
    op_var                         shift and go to state 133

state 169

    (37) array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN . operation SEMI
    (42) operation -> . op_var
    (43) operation -> . operation op_arith operation
    (44) operation -> . LPARENT operation RPARENT
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 106
    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    operation                      shift and go to state 181
    array_call                     shift and go to state 58
    op_var                         shift and go to state 133

state 170

    (60) relacion_if -> LPARENT op_var op_arith op_var . RPARENT op_logic op_var

    RPARENT         shift and go to state 182


state 171

    (54) if_declaration -> IF relacion_if THEN BEGIN declarations . else_stament END SEMI
    (48) stament -> declarations . ID ASSIGN
    (61) else_stament -> . ELSE declarations
    (62) else_stament -> .

    ID              shift and go to state 79
    ELSE            shift and go to state 184
    END             reduce using rule 62 (else_stament -> .)

    else_stament                   shift and go to state 183

state 172

    (72) readln_declaration -> READLN LPARENT ID RPARENT SEMI .

    WRITE           reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    READLN          reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    VAR             reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    CONST           reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    ID              reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    BREAK           reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    FUNCTION        reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    WHILE           reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    FOR             reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    IF              reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    NUMBER          reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    END             reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    RPARENT         reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    ELSE            reduce using rule 72 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)


state 173

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT . NUMBER RBLOCK OF type_specifier SEMI

    NUMBER          shift and go to state 185


state 174

    (51) while_declaration -> WHILE relation DO BEGIN declarations END . SEMI

    SEMI            shift and go to state 186


state 175

    (91) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON . type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 51
    CHAR            shift and go to state 48
    BYTE            shift and go to state 52
    REAL            shift and go to state 44
    SINGLE          shift and go to state 49
    DOUBLE          shift and go to state 47
    STRING          shift and go to state 46
    BOOLEAN         shift and go to state 50
    ARRAY           shift and go to state 53

    type_specifier                 shift and go to state 187

state 176

    (93) parameters -> ID COMMA parameters .

    RPARENT         reduce using rule 93 (parameters -> ID COMMA parameters .)


state 177

    (94) end_parameters -> COLON type_specifier .

    RPARENT         reduce using rule 94 (end_parameters -> COLON type_specifier .)


state 178

    (52) for_declaration -> FOR assignation TO op_var DO BEGIN . declarations END SEMI
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 188
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 179

    (35) array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation . SEMI
    (43) operation -> operation . op_arith operation
    (76) op_arith -> . PLUS
    (77) op_arith -> . MINUS
    (78) op_arith -> . TIMES
    (79) op_arith -> . DIVIDE
    (80) op_arith -> . MOD

    SEMI            shift and go to state 189
    PLUS            shift and go to state 100
    MINUS           shift and go to state 102
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 103

    op_arith                       shift and go to state 101

state 180

    (36) array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation . SEMI
    (43) operation -> operation . op_arith operation
    (76) op_arith -> . PLUS
    (77) op_arith -> . MINUS
    (78) op_arith -> . TIMES
    (79) op_arith -> . DIVIDE
    (80) op_arith -> . MOD

    SEMI            shift and go to state 190
    PLUS            shift and go to state 100
    MINUS           shift and go to state 102
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 103

    op_arith                       shift and go to state 101

state 181

    (37) array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation . SEMI
    (43) operation -> operation . op_arith operation
    (76) op_arith -> . PLUS
    (77) op_arith -> . MINUS
    (78) op_arith -> . TIMES
    (79) op_arith -> . DIVIDE
    (80) op_arith -> . MOD

    SEMI            shift and go to state 191
    PLUS            shift and go to state 100
    MINUS           shift and go to state 102
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 103

    op_arith                       shift and go to state 101

state 182

    (60) relacion_if -> LPARENT op_var op_arith op_var RPARENT . op_logic op_var
    (81) op_logic -> . EQ
    (82) op_logic -> . NE
    (83) op_logic -> . LT
    (84) op_logic -> . LE
    (85) op_logic -> . GT
    (86) op_logic -> . GE
    (87) op_logic -> . LNOT
    (88) op_logic -> . LOR
    (89) op_logic -> . LAND
    (90) op_logic -> . LXOR

    EQ              shift and go to state 97
    NE              shift and go to state 92
    LT              shift and go to state 90
    LE              shift and go to state 87
    GT              shift and go to state 94
    GE              shift and go to state 89
    LNOT            shift and go to state 96
    LOR             shift and go to state 93
    LAND            shift and go to state 95
    LXOR            shift and go to state 88

    op_logic                       shift and go to state 192

state 183

    (54) if_declaration -> IF relacion_if THEN BEGIN declarations else_stament . END SEMI

    END             shift and go to state 193


state 184

    (61) else_stament -> ELSE . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 194
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 185

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER . RBLOCK OF type_specifier SEMI

    RBLOCK          shift and go to state 195


state 186

    (51) while_declaration -> WHILE relation DO BEGIN declarations END SEMI .

    WRITE           reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    READLN          reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    VAR             reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    CONST           reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    ID              reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    BREAK           reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    FUNCTION        reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    WHILE           reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    FOR             reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    IF              reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    NUMBER          reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    END             reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    RPARENT         reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    ELSE            reduce using rule 51 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)


state 187

    (91) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier . SEMI VAR declaration_function_initial BEGIN declarations END SEMI

    SEMI            shift and go to state 196


state 188

    (52) for_declaration -> FOR assignation TO op_var DO BEGIN declarations . END SEMI
    (48) stament -> declarations . ID ASSIGN

    END             shift and go to state 197
    ID              shift and go to state 79


state 189

    (35) array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .

    WRITE           reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    READLN          reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    VAR             reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    CONST           reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    ID              reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    BREAK           reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    FUNCTION        reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    WHILE           reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    FOR             reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    IF              reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    NUMBER          reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    END             reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    RPARENT         reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    ELSE            reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    RBLOCK          reduce using rule 35 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)


state 190

    (36) array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .

    WRITE           reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    READLN          reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    VAR             reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    CONST           reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    ID              reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    BREAK           reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    FUNCTION        reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    WHILE           reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    FOR             reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    IF              reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    NUMBER          reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    END             reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    RPARENT         reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    ELSE            reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    RBLOCK          reduce using rule 36 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)


state 191

    (37) array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .

    WRITE           reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    READLN          reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    VAR             reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    CONST           reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    ID              reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    BREAK           reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    FUNCTION        reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    WHILE           reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    FOR             reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    IF              reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    NUMBER          reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    END             reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    RPARENT         reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    ELSE            reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    RBLOCK          reduce using rule 37 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)


state 192

    (60) relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic . op_var
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 60
    NUMBER          shift and go to state 21

    array_call                     shift and go to state 58
    op_var                         shift and go to state 198

state 193

    (54) if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END . SEMI

    SEMI            shift and go to state 199


state 194

    (61) else_stament -> ELSE declarations .
    (48) stament -> declarations . ID ASSIGN

    END             reduce using rule 61 (else_stament -> ELSE declarations .)
    ID              shift and go to state 79


state 195

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK . OF type_specifier SEMI

    OF              shift and go to state 200


state 196

    (91) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI . VAR declaration_function_initial BEGIN declarations END SEMI

    VAR             shift and go to state 201


state 197

    (52) for_declaration -> FOR assignation TO op_var DO BEGIN declarations END . SEMI

    SEMI            shift and go to state 202


state 198

    (60) relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic op_var .

    THEN            reduce using rule 60 (relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic op_var .)


state 199

    (54) if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .

    WRITE           reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    READLN          reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    VAR             reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    CONST           reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    ID              reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    BREAK           reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    FUNCTION        reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    WHILE           reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    FOR             reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    IF              reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    NUMBER          reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    END             reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    RPARENT         reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    ELSE            reduce using rule 54 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)


state 200

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF . type_specifier SEMI
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 51
    CHAR            shift and go to state 48
    BYTE            shift and go to state 52
    REAL            shift and go to state 44
    SINGLE          shift and go to state 49
    DOUBLE          shift and go to state 47
    STRING          shift and go to state 46
    BOOLEAN         shift and go to state 50
    ARRAY           shift and go to state 53

    type_specifier                 shift and go to state 203

state 201

    (91) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR . declaration_function_initial BEGIN declarations END SEMI
    (95) declaration_function_initial -> . ID COLON type_specifier SEMI
    (96) declaration_function_initial -> . ID COLON type_specifier SEMI declaration_function_initial

    ID              shift and go to state 205

    declaration_function_initial   shift and go to state 204

state 202

    (52) for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .

    WRITE           reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    READLN          reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    VAR             reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    CONST           reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    ID              reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    BREAK           reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    FUNCTION        reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    WHILE           reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    FOR             reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    IF              reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    NUMBER          reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    RPARENT         reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    END             reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    ELSE            reduce using rule 52 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)


state 203

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier . SEMI

    SEMI            shift and go to state 206


state 204

    (91) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial . BEGIN declarations END SEMI

    BEGIN           shift and go to state 207


state 205

    (95) declaration_function_initial -> ID . COLON type_specifier SEMI
    (96) declaration_function_initial -> ID . COLON type_specifier SEMI declaration_function_initial

    COLON           shift and go to state 208


state 206

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI .

    SEMI            reduce using rule 18 (type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI .)
    RPARENT         reduce using rule 18 (type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI .)


state 207

    (91) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN . declarations END SEMI
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (63) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (72) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (45) stament -> . while_declaration
    (46) stament -> . for_declaration
    (47) stament -> . if_declaration
    (48) stament -> . declarations ID ASSIGN
    (49) stament -> . ID LPARENT declarations RPARENT
    (50) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN op_var SEMI
    (91) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (51) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (52) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (54) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (35) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . array_call
    (73) op_var -> . ID
    (74) op_var -> . NUMBER
    (75) op_var -> . array_call
    (68) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 33
    READLN          shift and go to state 40
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 35
    BREAK           shift and go to state 29
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 22
    FOR             shift and go to state 30
    IF              shift and go to state 37
    NUMBER          shift and go to state 21

    op_var                         shift and go to state 23
    stament                        shift and go to state 24
    var_assignation                shift and go to state 25
    readln_declaration             shift and go to state 26
    array_assignation              shift and go to state 39
    write_declaration              shift and go to state 31
    functions_declarations         shift and go to state 32
    for_declaration                shift and go to state 27
    declaracion_variables          shift and go to state 34
    while_declaration              shift and go to state 36
    declarations                   shift and go to state 209
    array_call                     shift and go to state 41
    if_declaration                 shift and go to state 42

state 208

    (95) declaration_function_initial -> ID COLON . type_specifier SEMI
    (96) declaration_function_initial -> ID COLON . type_specifier SEMI declaration_function_initial
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 51
    CHAR            shift and go to state 48
    BYTE            shift and go to state 52
    REAL            shift and go to state 44
    SINGLE          shift and go to state 49
    DOUBLE          shift and go to state 47
    STRING          shift and go to state 46
    BOOLEAN         shift and go to state 50
    ARRAY           shift and go to state 53

    type_specifier                 shift and go to state 210

state 209

    (91) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations . END SEMI
    (48) stament -> declarations . ID ASSIGN

    END             shift and go to state 211
    ID              shift and go to state 79


state 210

    (95) declaration_function_initial -> ID COLON type_specifier . SEMI
    (96) declaration_function_initial -> ID COLON type_specifier . SEMI declaration_function_initial

    SEMI            shift and go to state 212


state 211

    (91) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END . SEMI

    SEMI            shift and go to state 213


state 212

    (95) declaration_function_initial -> ID COLON type_specifier SEMI .
    (96) declaration_function_initial -> ID COLON type_specifier SEMI . declaration_function_initial
    (95) declaration_function_initial -> . ID COLON type_specifier SEMI
    (96) declaration_function_initial -> . ID COLON type_specifier SEMI declaration_function_initial

    BEGIN           reduce using rule 95 (declaration_function_initial -> ID COLON type_specifier SEMI .)
    ID              shift and go to state 205

    declaration_function_initial   shift and go to state 214

state 213

    (91) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .

    WRITE           reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    READLN          reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    VAR             reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    CONST           reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    ID              reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    BREAK           reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    FUNCTION        reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    WHILE           reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    FOR             reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    IF              reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    NUMBER          reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    END             reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    RPARENT         reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    ELSE            reduce using rule 91 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)


state 214

    (96) declaration_function_initial -> ID COLON type_specifier SEMI declaration_function_initial .

    BEGIN           reduce using rule 96 (declaration_function_initial -> ID COLON type_specifier SEMI declaration_function_initial .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 24 resolved as shift
WARNING: shift/reduce conflict for ID in state 25 resolved as shift
WARNING: shift/reduce conflict for ID in state 26 resolved as shift
WARNING: shift/reduce conflict for ID in state 31 resolved as shift
WARNING: shift/reduce conflict for ID in state 32 resolved as shift
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 72 resolved as shift
WARNING: shift/reduce conflict for RPARENT in state 85 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for MOD in state 107 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 118 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 122 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 122 resolved as shift
WARNING: shift/reduce conflict for MOD in state 122 resolved as shift
WARNING: shift/reduce conflict for EQ in state 132 resolved as shift
WARNING: shift/reduce conflict for NE in state 132 resolved as shift
WARNING: shift/reduce conflict for LT in state 132 resolved as shift
WARNING: shift/reduce conflict for LE in state 132 resolved as shift
WARNING: shift/reduce conflict for GT in state 132 resolved as shift
WARNING: shift/reduce conflict for GE in state 132 resolved as shift
WARNING: shift/reduce conflict for LNOT in state 132 resolved as shift
WARNING: shift/reduce conflict for LOR in state 132 resolved as shift
WARNING: shift/reduce conflict for LAND in state 132 resolved as shift
WARNING: shift/reduce conflict for LXOR in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 134 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 134 resolved as shift
WARNING: shift/reduce conflict for MOD in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 157 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 157 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 157 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 157 resolved as shift
WARNING: shift/reduce conflict for MOD in state 157 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 165 resolved as shift
WARNING: reduce/reduce conflict in state 41 resolved using rule (array_assignation -> array_call)
WARNING: rejected rule (op_var -> array_call) in state 41
WARNING: reduce/reduce conflict in state 57 resolved using rule (operation -> op_var)
WARNING: rejected rule (relation -> op_var) in state 57
WARNING: reduce/reduce conflict in state 114 resolved using rule (op_write -> array_call)
WARNING: rejected rule (op_var -> array_call) in state 114
WARNING: reduce/reduce conflict in state 122 resolved using rule (operation -> op_var)
WARNING: rejected rule (relation -> op_var) in state 122
WARNING: reduce/reduce conflict in state 157 resolved using rule (arith_operation -> op_var op_arith op_var)
WARNING: rejected rule (operation -> op_var) in state 157
WARNING: Rule (relation -> op_var) is never reduced
