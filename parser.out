Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    RBRACE
    CLRSCR
    LBRACE
    APOSTROPHE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT
Rule 2     declaration_initial -> uses_declaration
Rule 3     declaration_initial -> declaracion_variables
Rule 4     declaration_initial -> declaration_initial uses_declaration
Rule 5     declaration_initial -> declaration_initial declaracion_variables
Rule 6     declaracion_variables -> VAR var_declaration COLON type_specifier SEMI
Rule 7     declaracion_variables -> CONST var_declaration COLON type_specifier SEMI
Rule 8     var_declaration -> ID
Rule 9     var_declaration -> ID COMMA var_declaration
Rule 10    type_specifier -> INTEGER
Rule 11    type_specifier -> CHAR
Rule 12    type_specifier -> BYTE
Rule 13    type_specifier -> REAL
Rule 14    type_specifier -> SINGLE
Rule 15    type_specifier -> DOUBLE
Rule 16    type_specifier -> STRING
Rule 17    type_specifier -> BOOLEAN
Rule 18    type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI
Rule 19    uses_declaration -> USES ID SEMI
Rule 20    declarations -> write_declaration
Rule 21    declarations -> write_declaration declarations
Rule 22    declarations -> readln_declaration
Rule 23    declarations -> readln_declaration declarations
Rule 24    declarations -> declaracion_variables
Rule 25    declarations -> declaracion_variables declarations
Rule 26    declarations -> stament
Rule 27    declarations -> stament declarations
Rule 28    declarations -> var_assignation
Rule 29    declarations -> var_assignation declarations
Rule 30    declarations -> functions_declarations
Rule 31    declarations -> functions_declarations declarations
Rule 32    var_assignation -> array_assignation
Rule 33    var_assignation -> op_var ASSIGN arith_operation SEMI
Rule 34    var_assignation -> op_var ASSIGN STRINGVAL SEMI
Rule 35    var_assignation -> op_var ASSIGN op_var SEMI
Rule 36    array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
Rule 37    array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI
Rule 38    array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
Rule 39    array_assignation -> array_call
Rule 40    arith_operation -> op_var op_arith op_var
Rule 41    arith_operation -> op_var op_arith arith_operation
Rule 42    arith_operation -> operation
Rule 43    operation -> op_var
Rule 44    operation -> operation op_arith operation
Rule 45    operation -> LPARENT operation RPARENT
Rule 46    stament -> while_declaration
Rule 47    stament -> for_declaration
Rule 48    stament -> if_declaration
Rule 49    stament -> declarations ID ASSIGN
Rule 50    stament -> ID LPARENT declarations RPARENT
Rule 51    stament -> BREAK SEMI
Rule 52    while_declaration -> WHILE relation DO BEGIN declarations END SEMI
Rule 53    for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI
Rule 54    function_call -> ID LPARENT var_declaration RPARENT
Rule 55    assignation -> op_var ASSIGN op_var
Rule 56    if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI
Rule 57    relation -> op_var
Rule 58    relation -> operation
Rule 59    relation -> relation op_logic relation
Rule 60    relation -> LPARENT relation RPARENT
Rule 61    relacion_if -> relation
Rule 62    relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic op_var
Rule 63    else_stament -> ELSE declarations
Rule 64    else_stament -> <empty>
Rule 65    write_declaration -> WRITE LPARENT op_write RPARENT SEMI
Rule 66    op_write -> string_sentence
Rule 67    op_write -> op_var
Rule 68    op_write -> array_call
Rule 69    op_write -> op_write COMMA op_write
Rule 70    array_call -> ID LBLOCK op_var RBLOCK
Rule 71    string_sentence -> STRINGVAL
Rule 72    string_sentence -> STRINGVAL PLUS ID
Rule 73    string_sentence -> STRINGVAL PLUS string_sentence
Rule 74    readln_declaration -> READLN LPARENT ID RPARENT SEMI
Rule 75    op_var -> ID
Rule 76    op_var -> NUMBER
Rule 77    op_var -> array_call
Rule 78    op_var -> function_call
Rule 79    op_arith -> PLUS
Rule 80    op_arith -> MINUS
Rule 81    op_arith -> TIMES
Rule 82    op_arith -> DIVIDE
Rule 83    op_arith -> MOD
Rule 84    op_logic -> EQ
Rule 85    op_logic -> NE
Rule 86    op_logic -> LT
Rule 87    op_logic -> LE
Rule 88    op_logic -> GT
Rule 89    op_logic -> GE
Rule 90    op_logic -> LNOT
Rule 91    op_logic -> LOR
Rule 92    op_logic -> LAND
Rule 93    op_logic -> LXOR
Rule 94    functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
Rule 95    parameters -> ID end_parameters
Rule 96    parameters -> ID COMMA parameters
Rule 97    end_parameters -> COLON type_specifier
Rule 98    declaration_function_initial -> ID COLON type_specifier SEMI
Rule 99    declaration_function_initial -> ID COLON type_specifier SEMI declaration_function_initial

Terminals, with rules where they appear

APOSTROPHE           : 
ARRAY                : 18
ASSIGN               : 33 34 35 36 37 38 49 55
BEGIN                : 1 52 53 56 94
BOOLEAN              : 17
BREAK                : 51
BYTE                 : 12
CHAR                 : 11
CLRSCR               : 
COLON                : 6 7 94 97 98 99
COMMA                : 9 69 96
CONST                : 7
DIVIDE               : 82
DO                   : 52 53
DOT                  : 1 18 18
DOUBLE               : 15
ELSE                 : 63
END                  : 1 52 53 56 94
EQ                   : 84
FOR                  : 53
FUNCTION             : 94
GE                   : 89
GT                   : 88
ID                   : 1 8 9 19 36 37 37 38 49 50 54 70 72 74 75 94 95 96 98 99
IF                   : 56
INTEGER              : 10
LAND                 : 92
LBLOCK               : 18 36 37 38 70
LBRACE               : 
LE                   : 87
LNOT                 : 90
LOR                  : 91
LPARENT              : 45 50 54 60 62 65 74 94
LT                   : 86
LXOR                 : 93
MINUS                : 80
MOD                  : 83
NE                   : 85
NUMBER               : 18 18 36 76
OF                   : 18
PLUS                 : 72 73 79
PROGRAM              : 1
RBLOCK               : 18 36 37 38 70
RBRACE               : 
READLN               : 74
REAL                 : 13
RPARENT              : 45 50 54 60 62 65 74 94
SEMI                 : 1 6 7 18 19 33 34 35 36 37 38 51 52 53 56 65 74 94 94 98 99
SINGLE               : 14
STRING               : 16
STRINGVAL            : 34 71 72 73
THEN                 : 56
TIMES                : 81
TO                   : 53
USES                 : 19
VAR                  : 6 94
WHILE                : 52
WRITE                : 65
error                : 

Nonterminals, with rules where they appear

arith_operation      : 33 41
array_assignation    : 32 38
array_call           : 39 68 77
assignation          : 53
declaracion_variables : 3 5 24 25
declaration_function_initial : 94 99
declaration_initial  : 1 4 5
declarations         : 1 21 23 25 27 29 31 49 50 52 53 56 63 94
else_stament         : 56
end_parameters       : 95
for_declaration      : 47
function_call        : 78
functions_declarations : 30 31
if_declaration       : 48
op_arith             : 40 41 44 62
op_logic             : 59 62
op_var               : 33 34 35 35 40 40 41 43 53 55 55 57 62 62 62 67 70
op_write             : 65 69 69
operation            : 36 37 38 42 44 44 45 58
parameters           : 94 96
programa             : 0
readln_declaration   : 22 23
relacion_if          : 56
relation             : 52 59 59 60 61
stament              : 26 27
string_sentence      : 66 73
type_specifier       : 6 7 18 94 97 98 99
uses_declaration     : 2 4
var_assignation      : 28 29
var_declaration      : 6 7 9 54
while_declaration    : 46
write_declaration    : 20 21

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT

    PROGRAM         shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> PROGRAM . ID SEMI declaration_initial BEGIN declarations END DOT

    ID              shift and go to state 3


state 2

    (0) S' -> programa .



state 3

    (1) programa -> PROGRAM ID . SEMI declaration_initial BEGIN declarations END DOT

    SEMI            shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMI . declaration_initial BEGIN declarations END DOT
    (2) declaration_initial -> . uses_declaration
    (3) declaration_initial -> . declaracion_variables
    (4) declaration_initial -> . declaration_initial uses_declaration
    (5) declaration_initial -> . declaration_initial declaracion_variables
    (19) uses_declaration -> . USES ID SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI

    USES            shift and go to state 7
    VAR             shift and go to state 9
    CONST           shift and go to state 6

    declaration_initial            shift and go to state 8
    declaracion_variables          shift and go to state 5
    uses_declaration               shift and go to state 10

state 5

    (3) declaration_initial -> declaracion_variables .

    BEGIN           reduce using rule 3 (declaration_initial -> declaracion_variables .)
    USES            reduce using rule 3 (declaration_initial -> declaracion_variables .)
    VAR             reduce using rule 3 (declaration_initial -> declaracion_variables .)
    CONST           reduce using rule 3 (declaration_initial -> declaracion_variables .)


state 6

    (7) declaracion_variables -> CONST . var_declaration COLON type_specifier SEMI
    (8) var_declaration -> . ID
    (9) var_declaration -> . ID COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 11

state 7

    (19) uses_declaration -> USES . ID SEMI

    ID              shift and go to state 13


state 8

    (1) programa -> PROGRAM ID SEMI declaration_initial . BEGIN declarations END DOT
    (4) declaration_initial -> declaration_initial . uses_declaration
    (5) declaration_initial -> declaration_initial . declaracion_variables
    (19) uses_declaration -> . USES ID SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI

    BEGIN           shift and go to state 14
    USES            shift and go to state 7
    VAR             shift and go to state 9
    CONST           shift and go to state 6

    declaracion_variables          shift and go to state 15
    uses_declaration               shift and go to state 16

state 9

    (6) declaracion_variables -> VAR . var_declaration COLON type_specifier SEMI
    (8) var_declaration -> . ID
    (9) var_declaration -> . ID COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 17

state 10

    (2) declaration_initial -> uses_declaration .

    BEGIN           reduce using rule 2 (declaration_initial -> uses_declaration .)
    USES            reduce using rule 2 (declaration_initial -> uses_declaration .)
    VAR             reduce using rule 2 (declaration_initial -> uses_declaration .)
    CONST           reduce using rule 2 (declaration_initial -> uses_declaration .)


state 11

    (7) declaracion_variables -> CONST var_declaration . COLON type_specifier SEMI

    COLON           shift and go to state 18


state 12

    (8) var_declaration -> ID .
    (9) var_declaration -> ID . COMMA var_declaration

    RPARENT         reduce using rule 8 (var_declaration -> ID .)
    COLON           reduce using rule 8 (var_declaration -> ID .)
    COMMA           shift and go to state 19


state 13

    (19) uses_declaration -> USES ID . SEMI

    SEMI            shift and go to state 20


state 14

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN . declarations END DOT
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 39
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 15

    (5) declaration_initial -> declaration_initial declaracion_variables .

    BEGIN           reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)
    USES            reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)
    VAR             reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)
    CONST           reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)


state 16

    (4) declaration_initial -> declaration_initial uses_declaration .

    BEGIN           reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)
    USES            reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)
    VAR             reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)
    CONST           reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)


state 17

    (6) declaracion_variables -> VAR var_declaration . COLON type_specifier SEMI

    COLON           shift and go to state 44


state 18

    (7) declaracion_variables -> CONST var_declaration COLON . type_specifier SEMI
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 52
    CHAR            shift and go to state 49
    BYTE            shift and go to state 53
    REAL            shift and go to state 45
    SINGLE          shift and go to state 50
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 47
    BOOLEAN         shift and go to state 51
    ARRAY           shift and go to state 54

    type_specifier                 shift and go to state 46

state 19

    (9) var_declaration -> ID COMMA . var_declaration
    (8) var_declaration -> . ID
    (9) var_declaration -> . ID COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 55

state 20

    (19) uses_declaration -> USES ID SEMI .

    BEGIN           reduce using rule 19 (uses_declaration -> USES ID SEMI .)
    USES            reduce using rule 19 (uses_declaration -> USES ID SEMI .)
    VAR             reduce using rule 19 (uses_declaration -> USES ID SEMI .)
    CONST           reduce using rule 19 (uses_declaration -> USES ID SEMI .)


state 21

    (76) op_var -> NUMBER .

    SEMI            reduce using rule 76 (op_var -> NUMBER .)
    PLUS            reduce using rule 76 (op_var -> NUMBER .)
    MINUS           reduce using rule 76 (op_var -> NUMBER .)
    TIMES           reduce using rule 76 (op_var -> NUMBER .)
    DIVIDE          reduce using rule 76 (op_var -> NUMBER .)
    MOD             reduce using rule 76 (op_var -> NUMBER .)
    RPARENT         reduce using rule 76 (op_var -> NUMBER .)
    EQ              reduce using rule 76 (op_var -> NUMBER .)
    NE              reduce using rule 76 (op_var -> NUMBER .)
    LT              reduce using rule 76 (op_var -> NUMBER .)
    LE              reduce using rule 76 (op_var -> NUMBER .)
    GT              reduce using rule 76 (op_var -> NUMBER .)
    GE              reduce using rule 76 (op_var -> NUMBER .)
    LNOT            reduce using rule 76 (op_var -> NUMBER .)
    LOR             reduce using rule 76 (op_var -> NUMBER .)
    LAND            reduce using rule 76 (op_var -> NUMBER .)
    LXOR            reduce using rule 76 (op_var -> NUMBER .)
    ASSIGN          reduce using rule 76 (op_var -> NUMBER .)
    DO              reduce using rule 76 (op_var -> NUMBER .)
    COMMA           reduce using rule 76 (op_var -> NUMBER .)
    TO              reduce using rule 76 (op_var -> NUMBER .)
    THEN            reduce using rule 76 (op_var -> NUMBER .)
    RBLOCK          reduce using rule 76 (op_var -> NUMBER .)


state 22

    (78) op_var -> function_call .

    SEMI            reduce using rule 78 (op_var -> function_call .)
    PLUS            reduce using rule 78 (op_var -> function_call .)
    MINUS           reduce using rule 78 (op_var -> function_call .)
    TIMES           reduce using rule 78 (op_var -> function_call .)
    DIVIDE          reduce using rule 78 (op_var -> function_call .)
    MOD             reduce using rule 78 (op_var -> function_call .)
    RBLOCK          reduce using rule 78 (op_var -> function_call .)
    RPARENT         reduce using rule 78 (op_var -> function_call .)
    EQ              reduce using rule 78 (op_var -> function_call .)
    NE              reduce using rule 78 (op_var -> function_call .)
    LT              reduce using rule 78 (op_var -> function_call .)
    LE              reduce using rule 78 (op_var -> function_call .)
    GT              reduce using rule 78 (op_var -> function_call .)
    GE              reduce using rule 78 (op_var -> function_call .)
    LNOT            reduce using rule 78 (op_var -> function_call .)
    LOR             reduce using rule 78 (op_var -> function_call .)
    LAND            reduce using rule 78 (op_var -> function_call .)
    LXOR            reduce using rule 78 (op_var -> function_call .)
    ASSIGN          reduce using rule 78 (op_var -> function_call .)
    DO              reduce using rule 78 (op_var -> function_call .)
    COMMA           reduce using rule 78 (op_var -> function_call .)
    TO              reduce using rule 78 (op_var -> function_call .)
    THEN            reduce using rule 78 (op_var -> function_call .)


state 23

    (52) while_declaration -> WHILE . relation DO BEGIN declarations END SEMI
    (57) relation -> . op_var
    (58) relation -> . operation
    (59) relation -> . relation op_logic relation
    (60) relation -> . LPARENT relation RPARENT
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    LPARENT         shift and go to state 56
    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 58
    relation                       shift and go to state 57
    operation                      shift and go to state 60

state 24

    (33) var_assignation -> op_var . ASSIGN arith_operation SEMI
    (34) var_assignation -> op_var . ASSIGN STRINGVAL SEMI
    (35) var_assignation -> op_var . ASSIGN op_var SEMI

    ASSIGN          shift and go to state 62


state 25

    (26) declarations -> stament .
    (27) declarations -> stament . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 26 (declarations -> stament .)
    RPARENT         reduce using rule 26 (declarations -> stament .)
    ELSE            reduce using rule 26 (declarations -> stament .)
    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 26 (declarations -> stament .) ]

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 63
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 26

    (28) declarations -> var_assignation .
    (29) declarations -> var_assignation . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 28 (declarations -> var_assignation .)
    RPARENT         reduce using rule 28 (declarations -> var_assignation .)
    ELSE            reduce using rule 28 (declarations -> var_assignation .)
    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 28 (declarations -> var_assignation .) ]

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 64
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 27

    (22) declarations -> readln_declaration .
    (23) declarations -> readln_declaration . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 22 (declarations -> readln_declaration .)
    RPARENT         reduce using rule 22 (declarations -> readln_declaration .)
    ELSE            reduce using rule 22 (declarations -> readln_declaration .)
    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 22 (declarations -> readln_declaration .) ]

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 65
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 28

    (47) stament -> for_declaration .

    WRITE           reduce using rule 47 (stament -> for_declaration .)
    READLN          reduce using rule 47 (stament -> for_declaration .)
    VAR             reduce using rule 47 (stament -> for_declaration .)
    CONST           reduce using rule 47 (stament -> for_declaration .)
    ID              reduce using rule 47 (stament -> for_declaration .)
    BREAK           reduce using rule 47 (stament -> for_declaration .)
    FUNCTION        reduce using rule 47 (stament -> for_declaration .)
    WHILE           reduce using rule 47 (stament -> for_declaration .)
    FOR             reduce using rule 47 (stament -> for_declaration .)
    IF              reduce using rule 47 (stament -> for_declaration .)
    NUMBER          reduce using rule 47 (stament -> for_declaration .)
    END             reduce using rule 47 (stament -> for_declaration .)
    RPARENT         reduce using rule 47 (stament -> for_declaration .)
    ELSE            reduce using rule 47 (stament -> for_declaration .)


state 29

    (94) functions_declarations -> FUNCTION . ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI

    ID              shift and go to state 66


state 30

    (51) stament -> BREAK . SEMI

    SEMI            shift and go to state 67


state 31

    (53) for_declaration -> FOR . assignation TO op_var DO BEGIN declarations END SEMI
    (55) assignation -> . op_var ASSIGN op_var
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    assignation                    shift and go to state 68
    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 69

state 32

    (20) declarations -> write_declaration .
    (21) declarations -> write_declaration . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 20 (declarations -> write_declaration .)
    RPARENT         reduce using rule 20 (declarations -> write_declaration .)
    ELSE            reduce using rule 20 (declarations -> write_declaration .)
    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 20 (declarations -> write_declaration .) ]

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 70
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 33

    (30) declarations -> functions_declarations .
    (31) declarations -> functions_declarations . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 30 (declarations -> functions_declarations .)
    RPARENT         reduce using rule 30 (declarations -> functions_declarations .)
    ELSE            reduce using rule 30 (declarations -> functions_declarations .)
    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 30 (declarations -> functions_declarations .) ]

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 71
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 34

    (65) write_declaration -> WRITE . LPARENT op_write RPARENT SEMI

    LPARENT         shift and go to state 72


state 35

    (24) declarations -> declaracion_variables .
    (25) declarations -> declaracion_variables . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 24 (declarations -> declaracion_variables .)
    RPARENT         reduce using rule 24 (declarations -> declaracion_variables .)
    ELSE            reduce using rule 24 (declarations -> declaracion_variables .)
    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

  ! ID              [ reduce using rule 24 (declarations -> declaracion_variables .) ]

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 73
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 36

    (50) stament -> ID . LPARENT declarations RPARENT
    (36) array_assignation -> ID . LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> ID . LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> ID . LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (75) op_var -> ID .
    (70) array_call -> ID . LBLOCK op_var RBLOCK
    (54) function_call -> ID . LPARENT var_declaration RPARENT

    LPARENT         shift and go to state 74
    LBLOCK          shift and go to state 75
    ASSIGN          reduce using rule 75 (op_var -> ID .)


state 37

    (46) stament -> while_declaration .

    WRITE           reduce using rule 46 (stament -> while_declaration .)
    READLN          reduce using rule 46 (stament -> while_declaration .)
    VAR             reduce using rule 46 (stament -> while_declaration .)
    CONST           reduce using rule 46 (stament -> while_declaration .)
    ID              reduce using rule 46 (stament -> while_declaration .)
    BREAK           reduce using rule 46 (stament -> while_declaration .)
    FUNCTION        reduce using rule 46 (stament -> while_declaration .)
    WHILE           reduce using rule 46 (stament -> while_declaration .)
    FOR             reduce using rule 46 (stament -> while_declaration .)
    IF              reduce using rule 46 (stament -> while_declaration .)
    NUMBER          reduce using rule 46 (stament -> while_declaration .)
    END             reduce using rule 46 (stament -> while_declaration .)
    RPARENT         reduce using rule 46 (stament -> while_declaration .)
    ELSE            reduce using rule 46 (stament -> while_declaration .)


state 38

    (56) if_declaration -> IF . relacion_if THEN BEGIN declarations else_stament END SEMI
    (61) relacion_if -> . relation
    (62) relacion_if -> . LPARENT op_var op_arith op_var RPARENT op_logic op_var
    (57) relation -> . op_var
    (58) relation -> . operation
    (59) relation -> . relation op_logic relation
    (60) relation -> . LPARENT relation RPARENT
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    LPARENT         shift and go to state 78
    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    relation                       shift and go to state 76
    op_var                         shift and go to state 58
    relacion_if                    shift and go to state 77
    array_call                     shift and go to state 59
    operation                      shift and go to state 60

state 39

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations . END DOT
    (49) stament -> declarations . ID ASSIGN

    END             shift and go to state 79
    ID              shift and go to state 80


state 40

    (32) var_assignation -> array_assignation .

    WRITE           reduce using rule 32 (var_assignation -> array_assignation .)
    READLN          reduce using rule 32 (var_assignation -> array_assignation .)
    VAR             reduce using rule 32 (var_assignation -> array_assignation .)
    CONST           reduce using rule 32 (var_assignation -> array_assignation .)
    ID              reduce using rule 32 (var_assignation -> array_assignation .)
    BREAK           reduce using rule 32 (var_assignation -> array_assignation .)
    FUNCTION        reduce using rule 32 (var_assignation -> array_assignation .)
    WHILE           reduce using rule 32 (var_assignation -> array_assignation .)
    FOR             reduce using rule 32 (var_assignation -> array_assignation .)
    IF              reduce using rule 32 (var_assignation -> array_assignation .)
    NUMBER          reduce using rule 32 (var_assignation -> array_assignation .)
    END             reduce using rule 32 (var_assignation -> array_assignation .)
    RPARENT         reduce using rule 32 (var_assignation -> array_assignation .)
    ELSE            reduce using rule 32 (var_assignation -> array_assignation .)


state 41

    (74) readln_declaration -> READLN . LPARENT ID RPARENT SEMI

    LPARENT         shift and go to state 81


state 42

    (39) array_assignation -> array_call .
    (77) op_var -> array_call .

  ! reduce/reduce conflict for RBLOCK resolved using rule 39 (array_assignation -> array_call .)
    WRITE           reduce using rule 39 (array_assignation -> array_call .)
    READLN          reduce using rule 39 (array_assignation -> array_call .)
    VAR             reduce using rule 39 (array_assignation -> array_call .)
    CONST           reduce using rule 39 (array_assignation -> array_call .)
    ID              reduce using rule 39 (array_assignation -> array_call .)
    BREAK           reduce using rule 39 (array_assignation -> array_call .)
    FUNCTION        reduce using rule 39 (array_assignation -> array_call .)
    WHILE           reduce using rule 39 (array_assignation -> array_call .)
    FOR             reduce using rule 39 (array_assignation -> array_call .)
    IF              reduce using rule 39 (array_assignation -> array_call .)
    NUMBER          reduce using rule 39 (array_assignation -> array_call .)
    END             reduce using rule 39 (array_assignation -> array_call .)
    RBLOCK          reduce using rule 39 (array_assignation -> array_call .)
    RPARENT         reduce using rule 39 (array_assignation -> array_call .)
    ELSE            reduce using rule 39 (array_assignation -> array_call .)
    ASSIGN          reduce using rule 77 (op_var -> array_call .)

  ! RBLOCK          [ reduce using rule 77 (op_var -> array_call .) ]


state 43

    (48) stament -> if_declaration .

    WRITE           reduce using rule 48 (stament -> if_declaration .)
    READLN          reduce using rule 48 (stament -> if_declaration .)
    VAR             reduce using rule 48 (stament -> if_declaration .)
    CONST           reduce using rule 48 (stament -> if_declaration .)
    ID              reduce using rule 48 (stament -> if_declaration .)
    BREAK           reduce using rule 48 (stament -> if_declaration .)
    FUNCTION        reduce using rule 48 (stament -> if_declaration .)
    WHILE           reduce using rule 48 (stament -> if_declaration .)
    FOR             reduce using rule 48 (stament -> if_declaration .)
    IF              reduce using rule 48 (stament -> if_declaration .)
    NUMBER          reduce using rule 48 (stament -> if_declaration .)
    END             reduce using rule 48 (stament -> if_declaration .)
    RPARENT         reduce using rule 48 (stament -> if_declaration .)
    ELSE            reduce using rule 48 (stament -> if_declaration .)


state 44

    (6) declaracion_variables -> VAR var_declaration COLON . type_specifier SEMI
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 52
    CHAR            shift and go to state 49
    BYTE            shift and go to state 53
    REAL            shift and go to state 45
    SINGLE          shift and go to state 50
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 47
    BOOLEAN         shift and go to state 51
    ARRAY           shift and go to state 54

    type_specifier                 shift and go to state 82

state 45

    (13) type_specifier -> REAL .

    RPARENT         reduce using rule 13 (type_specifier -> REAL .)
    SEMI            reduce using rule 13 (type_specifier -> REAL .)


state 46

    (7) declaracion_variables -> CONST var_declaration COLON type_specifier . SEMI

    SEMI            shift and go to state 83


state 47

    (16) type_specifier -> STRING .

    RPARENT         reduce using rule 16 (type_specifier -> STRING .)
    SEMI            reduce using rule 16 (type_specifier -> STRING .)


state 48

    (15) type_specifier -> DOUBLE .

    RPARENT         reduce using rule 15 (type_specifier -> DOUBLE .)
    SEMI            reduce using rule 15 (type_specifier -> DOUBLE .)


state 49

    (11) type_specifier -> CHAR .

    RPARENT         reduce using rule 11 (type_specifier -> CHAR .)
    SEMI            reduce using rule 11 (type_specifier -> CHAR .)


state 50

    (14) type_specifier -> SINGLE .

    RPARENT         reduce using rule 14 (type_specifier -> SINGLE .)
    SEMI            reduce using rule 14 (type_specifier -> SINGLE .)


state 51

    (17) type_specifier -> BOOLEAN .

    RPARENT         reduce using rule 17 (type_specifier -> BOOLEAN .)
    SEMI            reduce using rule 17 (type_specifier -> BOOLEAN .)


state 52

    (10) type_specifier -> INTEGER .

    RPARENT         reduce using rule 10 (type_specifier -> INTEGER .)
    SEMI            reduce using rule 10 (type_specifier -> INTEGER .)


state 53

    (12) type_specifier -> BYTE .

    RPARENT         reduce using rule 12 (type_specifier -> BYTE .)
    SEMI            reduce using rule 12 (type_specifier -> BYTE .)


state 54

    (18) type_specifier -> ARRAY . LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    LBLOCK          shift and go to state 84


state 55

    (9) var_declaration -> ID COMMA var_declaration .

    RPARENT         reduce using rule 9 (var_declaration -> ID COMMA var_declaration .)
    COLON           reduce using rule 9 (var_declaration -> ID COMMA var_declaration .)


state 56

    (60) relation -> LPARENT . relation RPARENT
    (45) operation -> LPARENT . operation RPARENT
    (57) relation -> . op_var
    (58) relation -> . operation
    (59) relation -> . relation op_logic relation
    (60) relation -> . LPARENT relation RPARENT
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    LPARENT         shift and go to state 56
    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 58
    relation                       shift and go to state 85
    operation                      shift and go to state 86

state 57

    (52) while_declaration -> WHILE relation . DO BEGIN declarations END SEMI
    (59) relation -> relation . op_logic relation
    (84) op_logic -> . EQ
    (85) op_logic -> . NE
    (86) op_logic -> . LT
    (87) op_logic -> . LE
    (88) op_logic -> . GT
    (89) op_logic -> . GE
    (90) op_logic -> . LNOT
    (91) op_logic -> . LOR
    (92) op_logic -> . LAND
    (93) op_logic -> . LXOR

    DO              shift and go to state 87
    EQ              shift and go to state 98
    NE              shift and go to state 93
    LT              shift and go to state 91
    LE              shift and go to state 88
    GT              shift and go to state 95
    GE              shift and go to state 90
    LNOT            shift and go to state 97
    LOR             shift and go to state 94
    LAND            shift and go to state 96
    LXOR            shift and go to state 89

    op_logic                       shift and go to state 92

state 58

    (57) relation -> op_var .
    (43) operation -> op_var .

  ! reduce/reduce conflict for RPARENT resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for EQ resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for NE resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LT resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LE resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for GT resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for GE resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LNOT resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LOR resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LAND resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LXOR resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for DO resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for THEN resolved using rule 43 (operation -> op_var .)
    RPARENT         reduce using rule 43 (operation -> op_var .)
    PLUS            reduce using rule 43 (operation -> op_var .)
    MINUS           reduce using rule 43 (operation -> op_var .)
    TIMES           reduce using rule 43 (operation -> op_var .)
    DIVIDE          reduce using rule 43 (operation -> op_var .)
    MOD             reduce using rule 43 (operation -> op_var .)
    EQ              reduce using rule 43 (operation -> op_var .)
    NE              reduce using rule 43 (operation -> op_var .)
    LT              reduce using rule 43 (operation -> op_var .)
    LE              reduce using rule 43 (operation -> op_var .)
    GT              reduce using rule 43 (operation -> op_var .)
    GE              reduce using rule 43 (operation -> op_var .)
    LNOT            reduce using rule 43 (operation -> op_var .)
    LOR             reduce using rule 43 (operation -> op_var .)
    LAND            reduce using rule 43 (operation -> op_var .)
    LXOR            reduce using rule 43 (operation -> op_var .)
    DO              reduce using rule 43 (operation -> op_var .)
    THEN            reduce using rule 43 (operation -> op_var .)

  ! EQ              [ reduce using rule 57 (relation -> op_var .) ]
  ! NE              [ reduce using rule 57 (relation -> op_var .) ]
  ! LT              [ reduce using rule 57 (relation -> op_var .) ]
  ! LE              [ reduce using rule 57 (relation -> op_var .) ]
  ! GT              [ reduce using rule 57 (relation -> op_var .) ]
  ! GE              [ reduce using rule 57 (relation -> op_var .) ]
  ! LNOT            [ reduce using rule 57 (relation -> op_var .) ]
  ! LOR             [ reduce using rule 57 (relation -> op_var .) ]
  ! LAND            [ reduce using rule 57 (relation -> op_var .) ]
  ! LXOR            [ reduce using rule 57 (relation -> op_var .) ]
  ! THEN            [ reduce using rule 57 (relation -> op_var .) ]
  ! DO              [ reduce using rule 57 (relation -> op_var .) ]
  ! RPARENT         [ reduce using rule 57 (relation -> op_var .) ]


state 59

    (77) op_var -> array_call .

    SEMI            reduce using rule 77 (op_var -> array_call .)
    PLUS            reduce using rule 77 (op_var -> array_call .)
    MINUS           reduce using rule 77 (op_var -> array_call .)
    TIMES           reduce using rule 77 (op_var -> array_call .)
    DIVIDE          reduce using rule 77 (op_var -> array_call .)
    MOD             reduce using rule 77 (op_var -> array_call .)
    RPARENT         reduce using rule 77 (op_var -> array_call .)
    EQ              reduce using rule 77 (op_var -> array_call .)
    NE              reduce using rule 77 (op_var -> array_call .)
    LT              reduce using rule 77 (op_var -> array_call .)
    LE              reduce using rule 77 (op_var -> array_call .)
    GT              reduce using rule 77 (op_var -> array_call .)
    GE              reduce using rule 77 (op_var -> array_call .)
    LNOT            reduce using rule 77 (op_var -> array_call .)
    LOR             reduce using rule 77 (op_var -> array_call .)
    LAND            reduce using rule 77 (op_var -> array_call .)
    LXOR            reduce using rule 77 (op_var -> array_call .)
    DO              reduce using rule 77 (op_var -> array_call .)
    TO              reduce using rule 77 (op_var -> array_call .)
    ASSIGN          reduce using rule 77 (op_var -> array_call .)
    THEN            reduce using rule 77 (op_var -> array_call .)
    RBLOCK          reduce using rule 77 (op_var -> array_call .)


state 60

    (58) relation -> operation .
    (44) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    EQ              reduce using rule 58 (relation -> operation .)
    NE              reduce using rule 58 (relation -> operation .)
    LT              reduce using rule 58 (relation -> operation .)
    LE              reduce using rule 58 (relation -> operation .)
    GT              reduce using rule 58 (relation -> operation .)
    GE              reduce using rule 58 (relation -> operation .)
    LNOT            reduce using rule 58 (relation -> operation .)
    LOR             reduce using rule 58 (relation -> operation .)
    LAND            reduce using rule 58 (relation -> operation .)
    LXOR            reduce using rule 58 (relation -> operation .)
    THEN            reduce using rule 58 (relation -> operation .)
    DO              reduce using rule 58 (relation -> operation .)
    RPARENT         reduce using rule 58 (relation -> operation .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 104

    op_arith                       shift and go to state 102

state 61

    (75) op_var -> ID .
    (70) array_call -> ID . LBLOCK op_var RBLOCK
    (54) function_call -> ID . LPARENT var_declaration RPARENT

    SEMI            reduce using rule 75 (op_var -> ID .)
    PLUS            reduce using rule 75 (op_var -> ID .)
    MINUS           reduce using rule 75 (op_var -> ID .)
    TIMES           reduce using rule 75 (op_var -> ID .)
    DIVIDE          reduce using rule 75 (op_var -> ID .)
    MOD             reduce using rule 75 (op_var -> ID .)
    RPARENT         reduce using rule 75 (op_var -> ID .)
    EQ              reduce using rule 75 (op_var -> ID .)
    NE              reduce using rule 75 (op_var -> ID .)
    LT              reduce using rule 75 (op_var -> ID .)
    LE              reduce using rule 75 (op_var -> ID .)
    GT              reduce using rule 75 (op_var -> ID .)
    GE              reduce using rule 75 (op_var -> ID .)
    LNOT            reduce using rule 75 (op_var -> ID .)
    LOR             reduce using rule 75 (op_var -> ID .)
    LAND            reduce using rule 75 (op_var -> ID .)
    LXOR            reduce using rule 75 (op_var -> ID .)
    DO              reduce using rule 75 (op_var -> ID .)
    COMMA           reduce using rule 75 (op_var -> ID .)
    TO              reduce using rule 75 (op_var -> ID .)
    ASSIGN          reduce using rule 75 (op_var -> ID .)
    THEN            reduce using rule 75 (op_var -> ID .)
    RBLOCK          reduce using rule 75 (op_var -> ID .)
    LBLOCK          shift and go to state 106
    LPARENT         shift and go to state 105


state 62

    (33) var_assignation -> op_var ASSIGN . arith_operation SEMI
    (34) var_assignation -> op_var ASSIGN . STRINGVAL SEMI
    (35) var_assignation -> op_var ASSIGN . op_var SEMI
    (40) arith_operation -> . op_var op_arith op_var
    (41) arith_operation -> . op_var op_arith arith_operation
    (42) arith_operation -> . operation
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    STRINGVAL       shift and go to state 108
    ID              shift and go to state 61
    NUMBER          shift and go to state 21
    LPARENT         shift and go to state 109

    arith_operation                shift and go to state 107
    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 110
    operation                      shift and go to state 111

state 63

    (27) declarations -> stament declarations .
    (49) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 27 (declarations -> stament declarations .)
    RPARENT         reduce using rule 27 (declarations -> stament declarations .)
    ELSE            reduce using rule 27 (declarations -> stament declarations .)
    ID              shift and go to state 80

  ! ID              [ reduce using rule 27 (declarations -> stament declarations .) ]


state 64

    (29) declarations -> var_assignation declarations .
    (49) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 29 (declarations -> var_assignation declarations .)
    RPARENT         reduce using rule 29 (declarations -> var_assignation declarations .)
    ELSE            reduce using rule 29 (declarations -> var_assignation declarations .)
    ID              shift and go to state 80

  ! ID              [ reduce using rule 29 (declarations -> var_assignation declarations .) ]


state 65

    (23) declarations -> readln_declaration declarations .
    (49) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 23 (declarations -> readln_declaration declarations .)
    RPARENT         reduce using rule 23 (declarations -> readln_declaration declarations .)
    ELSE            reduce using rule 23 (declarations -> readln_declaration declarations .)
    ID              shift and go to state 80

  ! ID              [ reduce using rule 23 (declarations -> readln_declaration declarations .) ]


state 66

    (94) functions_declarations -> FUNCTION ID . LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI

    LPARENT         shift and go to state 112


state 67

    (51) stament -> BREAK SEMI .

    WRITE           reduce using rule 51 (stament -> BREAK SEMI .)
    READLN          reduce using rule 51 (stament -> BREAK SEMI .)
    VAR             reduce using rule 51 (stament -> BREAK SEMI .)
    CONST           reduce using rule 51 (stament -> BREAK SEMI .)
    ID              reduce using rule 51 (stament -> BREAK SEMI .)
    BREAK           reduce using rule 51 (stament -> BREAK SEMI .)
    FUNCTION        reduce using rule 51 (stament -> BREAK SEMI .)
    WHILE           reduce using rule 51 (stament -> BREAK SEMI .)
    FOR             reduce using rule 51 (stament -> BREAK SEMI .)
    IF              reduce using rule 51 (stament -> BREAK SEMI .)
    NUMBER          reduce using rule 51 (stament -> BREAK SEMI .)
    END             reduce using rule 51 (stament -> BREAK SEMI .)
    RPARENT         reduce using rule 51 (stament -> BREAK SEMI .)
    ELSE            reduce using rule 51 (stament -> BREAK SEMI .)


state 68

    (53) for_declaration -> FOR assignation . TO op_var DO BEGIN declarations END SEMI

    TO              shift and go to state 113


state 69

    (55) assignation -> op_var . ASSIGN op_var

    ASSIGN          shift and go to state 114


state 70

    (21) declarations -> write_declaration declarations .
    (49) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 21 (declarations -> write_declaration declarations .)
    RPARENT         reduce using rule 21 (declarations -> write_declaration declarations .)
    ELSE            reduce using rule 21 (declarations -> write_declaration declarations .)
    ID              shift and go to state 80

  ! ID              [ reduce using rule 21 (declarations -> write_declaration declarations .) ]


state 71

    (31) declarations -> functions_declarations declarations .
    (49) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 31 (declarations -> functions_declarations declarations .)
    RPARENT         reduce using rule 31 (declarations -> functions_declarations declarations .)
    ELSE            reduce using rule 31 (declarations -> functions_declarations declarations .)
    ID              shift and go to state 80

  ! ID              [ reduce using rule 31 (declarations -> functions_declarations declarations .) ]


state 72

    (65) write_declaration -> WRITE LPARENT . op_write RPARENT SEMI
    (66) op_write -> . string_sentence
    (67) op_write -> . op_var
    (68) op_write -> . array_call
    (69) op_write -> . op_write COMMA op_write
    (71) string_sentence -> . STRINGVAL
    (72) string_sentence -> . STRINGVAL PLUS ID
    (73) string_sentence -> . STRINGVAL PLUS string_sentence
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    STRINGVAL       shift and go to state 116
    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 117
    op_write                       shift and go to state 118
    string_sentence                shift and go to state 119
    op_var                         shift and go to state 115

state 73

    (25) declarations -> declaracion_variables declarations .
    (49) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 25 (declarations -> declaracion_variables declarations .)
    RPARENT         reduce using rule 25 (declarations -> declaracion_variables declarations .)
    ELSE            reduce using rule 25 (declarations -> declaracion_variables declarations .)
    ID              shift and go to state 80

  ! ID              [ reduce using rule 25 (declarations -> declaracion_variables declarations .) ]


state 74

    (50) stament -> ID LPARENT . declarations RPARENT
    (54) function_call -> ID LPARENT . var_declaration RPARENT
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (8) var_declaration -> . ID
    (9) var_declaration -> . ID COMMA var_declaration
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    ID              shift and go to state 121
    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    var_declaration                shift and go to state 120
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 122
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 75

    (36) array_assignation -> ID LBLOCK . NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> ID LBLOCK . ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> ID LBLOCK . array_assignation RBLOCK ASSIGN operation SEMI
    (70) array_call -> ID LBLOCK . op_var RBLOCK
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    NUMBER          shift and go to state 123
    ID              shift and go to state 124

    function_call                  shift and go to state 22
    array_call                     shift and go to state 42
    op_var                         shift and go to state 126
    array_assignation              shift and go to state 125

state 76

    (61) relacion_if -> relation .
    (59) relation -> relation . op_logic relation
    (84) op_logic -> . EQ
    (85) op_logic -> . NE
    (86) op_logic -> . LT
    (87) op_logic -> . LE
    (88) op_logic -> . GT
    (89) op_logic -> . GE
    (90) op_logic -> . LNOT
    (91) op_logic -> . LOR
    (92) op_logic -> . LAND
    (93) op_logic -> . LXOR

    THEN            reduce using rule 61 (relacion_if -> relation .)
    EQ              shift and go to state 98
    NE              shift and go to state 93
    LT              shift and go to state 91
    LE              shift and go to state 88
    GT              shift and go to state 95
    GE              shift and go to state 90
    LNOT            shift and go to state 97
    LOR             shift and go to state 94
    LAND            shift and go to state 96
    LXOR            shift and go to state 89

    op_logic                       shift and go to state 92

state 77

    (56) if_declaration -> IF relacion_if . THEN BEGIN declarations else_stament END SEMI

    THEN            shift and go to state 127


state 78

    (62) relacion_if -> LPARENT . op_var op_arith op_var RPARENT op_logic op_var
    (60) relation -> LPARENT . relation RPARENT
    (45) operation -> LPARENT . operation RPARENT
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (57) relation -> . op_var
    (58) relation -> . operation
    (59) relation -> . relation op_logic relation
    (60) relation -> . LPARENT relation RPARENT
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    ID              shift and go to state 61
    NUMBER          shift and go to state 21
    LPARENT         shift and go to state 56

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 128
    relation                       shift and go to state 85
    operation                      shift and go to state 86

state 79

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END . DOT

    DOT             shift and go to state 129


state 80

    (49) stament -> declarations ID . ASSIGN

    ASSIGN          shift and go to state 130


state 81

    (74) readln_declaration -> READLN LPARENT . ID RPARENT SEMI

    ID              shift and go to state 131


state 82

    (6) declaracion_variables -> VAR var_declaration COLON type_specifier . SEMI

    SEMI            shift and go to state 132


state 83

    (7) declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .

    WRITE           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    READLN          reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    VAR             reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    CONST           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    ID              reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    BREAK           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    FUNCTION        reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    WHILE           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    FOR             reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    IF              reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    NUMBER          reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    ELSE            reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    END             reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    RPARENT         reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    BEGIN           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    USES            reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)


state 84

    (18) type_specifier -> ARRAY LBLOCK . NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    NUMBER          shift and go to state 133


state 85

    (60) relation -> LPARENT relation . RPARENT
    (59) relation -> relation . op_logic relation
    (84) op_logic -> . EQ
    (85) op_logic -> . NE
    (86) op_logic -> . LT
    (87) op_logic -> . LE
    (88) op_logic -> . GT
    (89) op_logic -> . GE
    (90) op_logic -> . LNOT
    (91) op_logic -> . LOR
    (92) op_logic -> . LAND
    (93) op_logic -> . LXOR

    RPARENT         shift and go to state 134
    EQ              shift and go to state 98
    NE              shift and go to state 93
    LT              shift and go to state 91
    LE              shift and go to state 88
    GT              shift and go to state 95
    GE              shift and go to state 90
    LNOT            shift and go to state 97
    LOR             shift and go to state 94
    LAND            shift and go to state 96
    LXOR            shift and go to state 89

    op_logic                       shift and go to state 92

state 86

    (45) operation -> LPARENT operation . RPARENT
    (58) relation -> operation .
    (44) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

  ! shift/reduce conflict for RPARENT resolved as shift
    RPARENT         shift and go to state 135
    EQ              reduce using rule 58 (relation -> operation .)
    NE              reduce using rule 58 (relation -> operation .)
    LT              reduce using rule 58 (relation -> operation .)
    LE              reduce using rule 58 (relation -> operation .)
    GT              reduce using rule 58 (relation -> operation .)
    GE              reduce using rule 58 (relation -> operation .)
    LNOT            reduce using rule 58 (relation -> operation .)
    LOR             reduce using rule 58 (relation -> operation .)
    LAND            reduce using rule 58 (relation -> operation .)
    LXOR            reduce using rule 58 (relation -> operation .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 104

  ! RPARENT         [ reduce using rule 58 (relation -> operation .) ]

    op_arith                       shift and go to state 102

state 87

    (52) while_declaration -> WHILE relation DO . BEGIN declarations END SEMI

    BEGIN           shift and go to state 136


state 88

    (87) op_logic -> LE .

    ID              reduce using rule 87 (op_logic -> LE .)
    NUMBER          reduce using rule 87 (op_logic -> LE .)
    LPARENT         reduce using rule 87 (op_logic -> LE .)


state 89

    (93) op_logic -> LXOR .

    ID              reduce using rule 93 (op_logic -> LXOR .)
    NUMBER          reduce using rule 93 (op_logic -> LXOR .)
    LPARENT         reduce using rule 93 (op_logic -> LXOR .)


state 90

    (89) op_logic -> GE .

    ID              reduce using rule 89 (op_logic -> GE .)
    NUMBER          reduce using rule 89 (op_logic -> GE .)
    LPARENT         reduce using rule 89 (op_logic -> GE .)


state 91

    (86) op_logic -> LT .

    ID              reduce using rule 86 (op_logic -> LT .)
    NUMBER          reduce using rule 86 (op_logic -> LT .)
    LPARENT         reduce using rule 86 (op_logic -> LT .)


state 92

    (59) relation -> relation op_logic . relation
    (57) relation -> . op_var
    (58) relation -> . operation
    (59) relation -> . relation op_logic relation
    (60) relation -> . LPARENT relation RPARENT
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    LPARENT         shift and go to state 56
    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 58
    relation                       shift and go to state 137
    operation                      shift and go to state 60

state 93

    (85) op_logic -> NE .

    ID              reduce using rule 85 (op_logic -> NE .)
    NUMBER          reduce using rule 85 (op_logic -> NE .)
    LPARENT         reduce using rule 85 (op_logic -> NE .)


state 94

    (91) op_logic -> LOR .

    ID              reduce using rule 91 (op_logic -> LOR .)
    NUMBER          reduce using rule 91 (op_logic -> LOR .)
    LPARENT         reduce using rule 91 (op_logic -> LOR .)


state 95

    (88) op_logic -> GT .

    ID              reduce using rule 88 (op_logic -> GT .)
    NUMBER          reduce using rule 88 (op_logic -> GT .)
    LPARENT         reduce using rule 88 (op_logic -> GT .)


state 96

    (92) op_logic -> LAND .

    ID              reduce using rule 92 (op_logic -> LAND .)
    NUMBER          reduce using rule 92 (op_logic -> LAND .)
    LPARENT         reduce using rule 92 (op_logic -> LAND .)


state 97

    (90) op_logic -> LNOT .

    ID              reduce using rule 90 (op_logic -> LNOT .)
    NUMBER          reduce using rule 90 (op_logic -> LNOT .)
    LPARENT         reduce using rule 90 (op_logic -> LNOT .)


state 98

    (84) op_logic -> EQ .

    ID              reduce using rule 84 (op_logic -> EQ .)
    NUMBER          reduce using rule 84 (op_logic -> EQ .)
    LPARENT         reduce using rule 84 (op_logic -> EQ .)


state 99

    (82) op_arith -> DIVIDE .

    LPARENT         reduce using rule 82 (op_arith -> DIVIDE .)
    ID              reduce using rule 82 (op_arith -> DIVIDE .)
    NUMBER          reduce using rule 82 (op_arith -> DIVIDE .)


state 100

    (81) op_arith -> TIMES .

    LPARENT         reduce using rule 81 (op_arith -> TIMES .)
    ID              reduce using rule 81 (op_arith -> TIMES .)
    NUMBER          reduce using rule 81 (op_arith -> TIMES .)


state 101

    (79) op_arith -> PLUS .

    LPARENT         reduce using rule 79 (op_arith -> PLUS .)
    ID              reduce using rule 79 (op_arith -> PLUS .)
    NUMBER          reduce using rule 79 (op_arith -> PLUS .)


state 102

    (44) operation -> operation op_arith . operation
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    LPARENT         shift and go to state 109
    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 138
    operation                      shift and go to state 139

state 103

    (80) op_arith -> MINUS .

    LPARENT         reduce using rule 80 (op_arith -> MINUS .)
    ID              reduce using rule 80 (op_arith -> MINUS .)
    NUMBER          reduce using rule 80 (op_arith -> MINUS .)


state 104

    (83) op_arith -> MOD .

    LPARENT         reduce using rule 83 (op_arith -> MOD .)
    ID              reduce using rule 83 (op_arith -> MOD .)
    NUMBER          reduce using rule 83 (op_arith -> MOD .)


state 105

    (54) function_call -> ID LPARENT . var_declaration RPARENT
    (8) var_declaration -> . ID
    (9) var_declaration -> . ID COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 120

state 106

    (70) array_call -> ID LBLOCK . op_var RBLOCK
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    array_call                     shift and go to state 59
    op_var                         shift and go to state 126
    function_call                  shift and go to state 22

state 107

    (33) var_assignation -> op_var ASSIGN arith_operation . SEMI

    SEMI            shift and go to state 140


state 108

    (34) var_assignation -> op_var ASSIGN STRINGVAL . SEMI

    SEMI            shift and go to state 141


state 109

    (45) operation -> LPARENT . operation RPARENT
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    LPARENT         shift and go to state 109
    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 138
    operation                      shift and go to state 142

state 110

    (35) var_assignation -> op_var ASSIGN op_var . SEMI
    (40) arith_operation -> op_var . op_arith op_var
    (41) arith_operation -> op_var . op_arith arith_operation
    (43) operation -> op_var .
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMI            shift and go to state 143
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 104

  ! PLUS            [ reduce using rule 43 (operation -> op_var .) ]
  ! MINUS           [ reduce using rule 43 (operation -> op_var .) ]
  ! TIMES           [ reduce using rule 43 (operation -> op_var .) ]
  ! DIVIDE          [ reduce using rule 43 (operation -> op_var .) ]
  ! MOD             [ reduce using rule 43 (operation -> op_var .) ]
  ! SEMI            [ reduce using rule 43 (operation -> op_var .) ]

    op_arith                       shift and go to state 144

state 111

    (42) arith_operation -> operation .
    (44) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    SEMI            reduce using rule 42 (arith_operation -> operation .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 104

    op_arith                       shift and go to state 102

state 112

    (94) functions_declarations -> FUNCTION ID LPARENT . parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (95) parameters -> . ID end_parameters
    (96) parameters -> . ID COMMA parameters

    ID              shift and go to state 146

    parameters                     shift and go to state 145

state 113

    (53) for_declaration -> FOR assignation TO . op_var DO BEGIN declarations END SEMI
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 147

state 114

    (55) assignation -> op_var ASSIGN . op_var
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    array_call                     shift and go to state 59
    op_var                         shift and go to state 148
    function_call                  shift and go to state 22

state 115

    (67) op_write -> op_var .

    RPARENT         reduce using rule 67 (op_write -> op_var .)
    COMMA           reduce using rule 67 (op_write -> op_var .)


state 116

    (71) string_sentence -> STRINGVAL .
    (72) string_sentence -> STRINGVAL . PLUS ID
    (73) string_sentence -> STRINGVAL . PLUS string_sentence

    COMMA           reduce using rule 71 (string_sentence -> STRINGVAL .)
    RPARENT         reduce using rule 71 (string_sentence -> STRINGVAL .)
    PLUS            shift and go to state 149


state 117

    (68) op_write -> array_call .
    (77) op_var -> array_call .

  ! reduce/reduce conflict for COMMA resolved using rule 68 (op_write -> array_call .)
  ! reduce/reduce conflict for RPARENT resolved using rule 68 (op_write -> array_call .)
    RPARENT         reduce using rule 68 (op_write -> array_call .)
    COMMA           reduce using rule 68 (op_write -> array_call .)

  ! COMMA           [ reduce using rule 77 (op_var -> array_call .) ]
  ! RPARENT         [ reduce using rule 77 (op_var -> array_call .) ]


state 118

    (65) write_declaration -> WRITE LPARENT op_write . RPARENT SEMI
    (69) op_write -> op_write . COMMA op_write

    RPARENT         shift and go to state 151
    COMMA           shift and go to state 150


state 119

    (66) op_write -> string_sentence .

    RPARENT         reduce using rule 66 (op_write -> string_sentence .)
    COMMA           reduce using rule 66 (op_write -> string_sentence .)


state 120

    (54) function_call -> ID LPARENT var_declaration . RPARENT

    RPARENT         shift and go to state 152


state 121

    (8) var_declaration -> ID .
    (9) var_declaration -> ID . COMMA var_declaration
    (50) stament -> ID . LPARENT declarations RPARENT
    (36) array_assignation -> ID . LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> ID . LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> ID . LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (75) op_var -> ID .
    (70) array_call -> ID . LBLOCK op_var RBLOCK
    (54) function_call -> ID . LPARENT var_declaration RPARENT

    RPARENT         reduce using rule 8 (var_declaration -> ID .)
    COMMA           shift and go to state 19
    LPARENT         shift and go to state 74
    LBLOCK          shift and go to state 75
    ASSIGN          reduce using rule 75 (op_var -> ID .)


state 122

    (50) stament -> ID LPARENT declarations . RPARENT
    (49) stament -> declarations . ID ASSIGN

    RPARENT         shift and go to state 153
    ID              shift and go to state 80


state 123

    (36) array_assignation -> ID LBLOCK NUMBER . RBLOCK ASSIGN operation SEMI
    (76) op_var -> NUMBER .

  ! shift/reduce conflict for RBLOCK resolved as shift
    RBLOCK          shift and go to state 154

  ! RBLOCK          [ reduce using rule 76 (op_var -> NUMBER .) ]


state 124

    (37) array_assignation -> ID LBLOCK ID . RBLOCK ASSIGN operation SEMI
    (36) array_assignation -> ID . LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> ID . LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> ID . LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (75) op_var -> ID .
    (70) array_call -> ID . LBLOCK op_var RBLOCK
    (54) function_call -> ID . LPARENT var_declaration RPARENT

  ! shift/reduce conflict for RBLOCK resolved as shift
    RBLOCK          shift and go to state 155
    LBLOCK          shift and go to state 75
    LPARENT         shift and go to state 105

  ! RBLOCK          [ reduce using rule 75 (op_var -> ID .) ]


state 125

    (38) array_assignation -> ID LBLOCK array_assignation . RBLOCK ASSIGN operation SEMI

    RBLOCK          shift and go to state 156


state 126

    (70) array_call -> ID LBLOCK op_var . RBLOCK

    RBLOCK          shift and go to state 157


state 127

    (56) if_declaration -> IF relacion_if THEN . BEGIN declarations else_stament END SEMI

    BEGIN           shift and go to state 158


state 128

    (62) relacion_if -> LPARENT op_var . op_arith op_var RPARENT op_logic op_var
    (57) relation -> op_var .
    (43) operation -> op_var .
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

  ! reduce/reduce conflict for RPARENT resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for EQ resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for NE resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LT resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LE resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for GT resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for GE resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LNOT resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LOR resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LAND resolved using rule 43 (operation -> op_var .)
  ! reduce/reduce conflict for LXOR resolved using rule 43 (operation -> op_var .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    RPARENT         reduce using rule 43 (operation -> op_var .)
    EQ              reduce using rule 43 (operation -> op_var .)
    NE              reduce using rule 43 (operation -> op_var .)
    LT              reduce using rule 43 (operation -> op_var .)
    LE              reduce using rule 43 (operation -> op_var .)
    GT              reduce using rule 43 (operation -> op_var .)
    GE              reduce using rule 43 (operation -> op_var .)
    LNOT            reduce using rule 43 (operation -> op_var .)
    LOR             reduce using rule 43 (operation -> op_var .)
    LAND            reduce using rule 43 (operation -> op_var .)
    LXOR            reduce using rule 43 (operation -> op_var .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 104

  ! RPARENT         [ reduce using rule 57 (relation -> op_var .) ]
  ! EQ              [ reduce using rule 57 (relation -> op_var .) ]
  ! NE              [ reduce using rule 57 (relation -> op_var .) ]
  ! LT              [ reduce using rule 57 (relation -> op_var .) ]
  ! LE              [ reduce using rule 57 (relation -> op_var .) ]
  ! GT              [ reduce using rule 57 (relation -> op_var .) ]
  ! GE              [ reduce using rule 57 (relation -> op_var .) ]
  ! LNOT            [ reduce using rule 57 (relation -> op_var .) ]
  ! LOR             [ reduce using rule 57 (relation -> op_var .) ]
  ! LAND            [ reduce using rule 57 (relation -> op_var .) ]
  ! LXOR            [ reduce using rule 57 (relation -> op_var .) ]
  ! PLUS            [ reduce using rule 43 (operation -> op_var .) ]
  ! MINUS           [ reduce using rule 43 (operation -> op_var .) ]
  ! TIMES           [ reduce using rule 43 (operation -> op_var .) ]
  ! DIVIDE          [ reduce using rule 43 (operation -> op_var .) ]
  ! MOD             [ reduce using rule 43 (operation -> op_var .) ]

    op_arith                       shift and go to state 159

state 129

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT .)


state 130

    (49) stament -> declarations ID ASSIGN .

    WRITE           reduce using rule 49 (stament -> declarations ID ASSIGN .)
    READLN          reduce using rule 49 (stament -> declarations ID ASSIGN .)
    VAR             reduce using rule 49 (stament -> declarations ID ASSIGN .)
    CONST           reduce using rule 49 (stament -> declarations ID ASSIGN .)
    ID              reduce using rule 49 (stament -> declarations ID ASSIGN .)
    BREAK           reduce using rule 49 (stament -> declarations ID ASSIGN .)
    FUNCTION        reduce using rule 49 (stament -> declarations ID ASSIGN .)
    WHILE           reduce using rule 49 (stament -> declarations ID ASSIGN .)
    FOR             reduce using rule 49 (stament -> declarations ID ASSIGN .)
    IF              reduce using rule 49 (stament -> declarations ID ASSIGN .)
    NUMBER          reduce using rule 49 (stament -> declarations ID ASSIGN .)
    END             reduce using rule 49 (stament -> declarations ID ASSIGN .)
    RPARENT         reduce using rule 49 (stament -> declarations ID ASSIGN .)
    ELSE            reduce using rule 49 (stament -> declarations ID ASSIGN .)


state 131

    (74) readln_declaration -> READLN LPARENT ID . RPARENT SEMI

    RPARENT         shift and go to state 160


state 132

    (6) declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .

    WRITE           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    READLN          reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    VAR             reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    CONST           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    ID              reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    BREAK           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    FUNCTION        reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    WHILE           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    FOR             reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    IF              reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    NUMBER          reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    ELSE            reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    END             reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    RPARENT         reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    BEGIN           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    USES            reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)


state 133

    (18) type_specifier -> ARRAY LBLOCK NUMBER . DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    DOT             shift and go to state 161


state 134

    (60) relation -> LPARENT relation RPARENT .

    EQ              reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    NE              reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    LT              reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    LE              reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    GT              reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    GE              reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    LNOT            reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    LOR             reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    LAND            reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    LXOR            reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    THEN            reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    RPARENT         reduce using rule 60 (relation -> LPARENT relation RPARENT .)
    DO              reduce using rule 60 (relation -> LPARENT relation RPARENT .)


state 135

    (45) operation -> LPARENT operation RPARENT .

    RPARENT         reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    PLUS            reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    MINUS           reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    TIMES           reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    DIVIDE          reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    MOD             reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    EQ              reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    NE              reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    LT              reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    LE              reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    GT              reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    GE              reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    LNOT            reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    LOR             reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    LAND            reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    LXOR            reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    SEMI            reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    DO              reduce using rule 45 (operation -> LPARENT operation RPARENT .)
    THEN            reduce using rule 45 (operation -> LPARENT operation RPARENT .)


state 136

    (52) while_declaration -> WHILE relation DO BEGIN . declarations END SEMI
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 162
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 137

    (59) relation -> relation op_logic relation .
    (59) relation -> relation . op_logic relation
    (84) op_logic -> . EQ
    (85) op_logic -> . NE
    (86) op_logic -> . LT
    (87) op_logic -> . LE
    (88) op_logic -> . GT
    (89) op_logic -> . GE
    (90) op_logic -> . LNOT
    (91) op_logic -> . LOR
    (92) op_logic -> . LAND
    (93) op_logic -> . LXOR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LNOT resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LXOR resolved as shift
    THEN            reduce using rule 59 (relation -> relation op_logic relation .)
    RPARENT         reduce using rule 59 (relation -> relation op_logic relation .)
    DO              reduce using rule 59 (relation -> relation op_logic relation .)
    EQ              shift and go to state 98
    NE              shift and go to state 93
    LT              shift and go to state 91
    LE              shift and go to state 88
    GT              shift and go to state 95
    GE              shift and go to state 90
    LNOT            shift and go to state 97
    LOR             shift and go to state 94
    LAND            shift and go to state 96
    LXOR            shift and go to state 89

  ! EQ              [ reduce using rule 59 (relation -> relation op_logic relation .) ]
  ! NE              [ reduce using rule 59 (relation -> relation op_logic relation .) ]
  ! LT              [ reduce using rule 59 (relation -> relation op_logic relation .) ]
  ! LE              [ reduce using rule 59 (relation -> relation op_logic relation .) ]
  ! GT              [ reduce using rule 59 (relation -> relation op_logic relation .) ]
  ! GE              [ reduce using rule 59 (relation -> relation op_logic relation .) ]
  ! LNOT            [ reduce using rule 59 (relation -> relation op_logic relation .) ]
  ! LOR             [ reduce using rule 59 (relation -> relation op_logic relation .) ]
  ! LAND            [ reduce using rule 59 (relation -> relation op_logic relation .) ]
  ! LXOR            [ reduce using rule 59 (relation -> relation op_logic relation .) ]

    op_logic                       shift and go to state 92

state 138

    (43) operation -> op_var .

    RPARENT         reduce using rule 43 (operation -> op_var .)
    PLUS            reduce using rule 43 (operation -> op_var .)
    MINUS           reduce using rule 43 (operation -> op_var .)
    TIMES           reduce using rule 43 (operation -> op_var .)
    DIVIDE          reduce using rule 43 (operation -> op_var .)
    MOD             reduce using rule 43 (operation -> op_var .)
    SEMI            reduce using rule 43 (operation -> op_var .)
    DO              reduce using rule 43 (operation -> op_var .)
    EQ              reduce using rule 43 (operation -> op_var .)
    NE              reduce using rule 43 (operation -> op_var .)
    LT              reduce using rule 43 (operation -> op_var .)
    LE              reduce using rule 43 (operation -> op_var .)
    GT              reduce using rule 43 (operation -> op_var .)
    GE              reduce using rule 43 (operation -> op_var .)
    LNOT            reduce using rule 43 (operation -> op_var .)
    LOR             reduce using rule 43 (operation -> op_var .)
    LAND            reduce using rule 43 (operation -> op_var .)
    LXOR            reduce using rule 43 (operation -> op_var .)
    THEN            reduce using rule 43 (operation -> op_var .)


state 139

    (44) operation -> operation op_arith operation .
    (44) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    RPARENT         reduce using rule 44 (operation -> operation op_arith operation .)
    EQ              reduce using rule 44 (operation -> operation op_arith operation .)
    NE              reduce using rule 44 (operation -> operation op_arith operation .)
    LT              reduce using rule 44 (operation -> operation op_arith operation .)
    LE              reduce using rule 44 (operation -> operation op_arith operation .)
    GT              reduce using rule 44 (operation -> operation op_arith operation .)
    GE              reduce using rule 44 (operation -> operation op_arith operation .)
    LNOT            reduce using rule 44 (operation -> operation op_arith operation .)
    LOR             reduce using rule 44 (operation -> operation op_arith operation .)
    LAND            reduce using rule 44 (operation -> operation op_arith operation .)
    LXOR            reduce using rule 44 (operation -> operation op_arith operation .)
    SEMI            reduce using rule 44 (operation -> operation op_arith operation .)
    DO              reduce using rule 44 (operation -> operation op_arith operation .)
    THEN            reduce using rule 44 (operation -> operation op_arith operation .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 104

  ! PLUS            [ reduce using rule 44 (operation -> operation op_arith operation .) ]
  ! MINUS           [ reduce using rule 44 (operation -> operation op_arith operation .) ]
  ! TIMES           [ reduce using rule 44 (operation -> operation op_arith operation .) ]
  ! DIVIDE          [ reduce using rule 44 (operation -> operation op_arith operation .) ]
  ! MOD             [ reduce using rule 44 (operation -> operation op_arith operation .) ]

    op_arith                       shift and go to state 102

state 140

    (33) var_assignation -> op_var ASSIGN arith_operation SEMI .

    WRITE           reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    READLN          reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    VAR             reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    CONST           reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    ID              reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    BREAK           reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    FUNCTION        reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    WHILE           reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    FOR             reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    IF              reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    NUMBER          reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    END             reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    RPARENT         reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)
    ELSE            reduce using rule 33 (var_assignation -> op_var ASSIGN arith_operation SEMI .)


state 141

    (34) var_assignation -> op_var ASSIGN STRINGVAL SEMI .

    WRITE           reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    READLN          reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    VAR             reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    CONST           reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    ID              reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    BREAK           reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    FUNCTION        reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    WHILE           reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    FOR             reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    IF              reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    NUMBER          reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    END             reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    RPARENT         reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)
    ELSE            reduce using rule 34 (var_assignation -> op_var ASSIGN STRINGVAL SEMI .)


state 142

    (45) operation -> LPARENT operation . RPARENT
    (44) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    RPARENT         shift and go to state 135
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 104

    op_arith                       shift and go to state 102

state 143

    (35) var_assignation -> op_var ASSIGN op_var SEMI .

    WRITE           reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    READLN          reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    VAR             reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    CONST           reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    ID              reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    BREAK           reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    FUNCTION        reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    WHILE           reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    FOR             reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    IF              reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    NUMBER          reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    END             reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    RPARENT         reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)
    ELSE            reduce using rule 35 (var_assignation -> op_var ASSIGN op_var SEMI .)


state 144

    (40) arith_operation -> op_var op_arith . op_var
    (41) arith_operation -> op_var op_arith . arith_operation
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (40) arith_operation -> . op_var op_arith op_var
    (41) arith_operation -> . op_var op_arith arith_operation
    (42) arith_operation -> . operation
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT

    ID              shift and go to state 61
    NUMBER          shift and go to state 21
    LPARENT         shift and go to state 109

    arith_operation                shift and go to state 163
    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 164
    operation                      shift and go to state 111

state 145

    (94) functions_declarations -> FUNCTION ID LPARENT parameters . RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI

    RPARENT         shift and go to state 165


state 146

    (95) parameters -> ID . end_parameters
    (96) parameters -> ID . COMMA parameters
    (97) end_parameters -> . COLON type_specifier

    COMMA           shift and go to state 167
    COLON           shift and go to state 168

    end_parameters                 shift and go to state 166

state 147

    (53) for_declaration -> FOR assignation TO op_var . DO BEGIN declarations END SEMI

    DO              shift and go to state 169


state 148

    (55) assignation -> op_var ASSIGN op_var .

    TO              reduce using rule 55 (assignation -> op_var ASSIGN op_var .)


state 149

    (72) string_sentence -> STRINGVAL PLUS . ID
    (73) string_sentence -> STRINGVAL PLUS . string_sentence
    (71) string_sentence -> . STRINGVAL
    (72) string_sentence -> . STRINGVAL PLUS ID
    (73) string_sentence -> . STRINGVAL PLUS string_sentence

    ID              shift and go to state 171
    STRINGVAL       shift and go to state 116

    string_sentence                shift and go to state 170

state 150

    (69) op_write -> op_write COMMA . op_write
    (66) op_write -> . string_sentence
    (67) op_write -> . op_var
    (68) op_write -> . array_call
    (69) op_write -> . op_write COMMA op_write
    (71) string_sentence -> . STRINGVAL
    (72) string_sentence -> . STRINGVAL PLUS ID
    (73) string_sentence -> . STRINGVAL PLUS string_sentence
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    STRINGVAL       shift and go to state 116
    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 117
    op_write                       shift and go to state 172
    string_sentence                shift and go to state 119
    op_var                         shift and go to state 115

state 151

    (65) write_declaration -> WRITE LPARENT op_write RPARENT . SEMI

    SEMI            shift and go to state 173


state 152

    (54) function_call -> ID LPARENT var_declaration RPARENT .

    PLUS            reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    MINUS           reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    TIMES           reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    DIVIDE          reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    MOD             reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    SEMI            reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    ASSIGN          reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    DO              reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    EQ              reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    NE              reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    LT              reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    LE              reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    GT              reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    GE              reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    LNOT            reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    LOR             reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    LAND            reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    LXOR            reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    RPARENT         reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    THEN            reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    TO              reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    COMMA           reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)
    RBLOCK          reduce using rule 54 (function_call -> ID LPARENT var_declaration RPARENT .)


state 153

    (50) stament -> ID LPARENT declarations RPARENT .

    WRITE           reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    READLN          reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    VAR             reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    CONST           reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    ID              reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    BREAK           reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    FUNCTION        reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    WHILE           reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    FOR             reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    IF              reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    NUMBER          reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    END             reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    RPARENT         reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)
    ELSE            reduce using rule 50 (stament -> ID LPARENT declarations RPARENT .)


state 154

    (36) array_assignation -> ID LBLOCK NUMBER RBLOCK . ASSIGN operation SEMI

    ASSIGN          shift and go to state 174


state 155

    (37) array_assignation -> ID LBLOCK ID RBLOCK . ASSIGN operation SEMI

    ASSIGN          shift and go to state 175


state 156

    (38) array_assignation -> ID LBLOCK array_assignation RBLOCK . ASSIGN operation SEMI

    ASSIGN          shift and go to state 176


state 157

    (70) array_call -> ID LBLOCK op_var RBLOCK .

    COMMA           reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    RPARENT         reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    RBLOCK          reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    WRITE           reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    READLN          reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    VAR             reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    CONST           reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    ID              reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    BREAK           reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    FUNCTION        reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    WHILE           reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    FOR             reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    IF              reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    NUMBER          reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    END             reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    ELSE            reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    ASSIGN          reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    PLUS            reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    MINUS           reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    TIMES           reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    DIVIDE          reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    MOD             reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    EQ              reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    NE              reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    LT              reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    LE              reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    GT              reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    GE              reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    LNOT            reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    LOR             reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    LAND            reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    LXOR            reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    SEMI            reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    TO              reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    DO              reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)
    THEN            reduce using rule 70 (array_call -> ID LBLOCK op_var RBLOCK .)


state 158

    (56) if_declaration -> IF relacion_if THEN BEGIN . declarations else_stament END SEMI
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 177
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 159

    (62) relacion_if -> LPARENT op_var op_arith . op_var RPARENT op_logic op_var
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 178

state 160

    (74) readln_declaration -> READLN LPARENT ID RPARENT . SEMI

    SEMI            shift and go to state 179


state 161

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT . DOT NUMBER RBLOCK OF type_specifier SEMI

    DOT             shift and go to state 180


state 162

    (52) while_declaration -> WHILE relation DO BEGIN declarations . END SEMI
    (49) stament -> declarations . ID ASSIGN

    END             shift and go to state 181
    ID              shift and go to state 80


state 163

    (41) arith_operation -> op_var op_arith arith_operation .

    SEMI            reduce using rule 41 (arith_operation -> op_var op_arith arith_operation .)


state 164

    (40) arith_operation -> op_var op_arith op_var .
    (40) arith_operation -> op_var . op_arith op_var
    (41) arith_operation -> op_var . op_arith arith_operation
    (43) operation -> op_var .
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

  ! reduce/reduce conflict for SEMI resolved using rule 40 (arith_operation -> op_var op_arith op_var .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMI            reduce using rule 40 (arith_operation -> op_var op_arith op_var .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 104

  ! PLUS            [ reduce using rule 43 (operation -> op_var .) ]
  ! MINUS           [ reduce using rule 43 (operation -> op_var .) ]
  ! TIMES           [ reduce using rule 43 (operation -> op_var .) ]
  ! DIVIDE          [ reduce using rule 43 (operation -> op_var .) ]
  ! MOD             [ reduce using rule 43 (operation -> op_var .) ]
  ! SEMI            [ reduce using rule 43 (operation -> op_var .) ]

    op_arith                       shift and go to state 144

state 165

    (94) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT . COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI

    COLON           shift and go to state 182


state 166

    (95) parameters -> ID end_parameters .

    RPARENT         reduce using rule 95 (parameters -> ID end_parameters .)


state 167

    (96) parameters -> ID COMMA . parameters
    (95) parameters -> . ID end_parameters
    (96) parameters -> . ID COMMA parameters

    ID              shift and go to state 146

    parameters                     shift and go to state 183

state 168

    (97) end_parameters -> COLON . type_specifier
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 52
    CHAR            shift and go to state 49
    BYTE            shift and go to state 53
    REAL            shift and go to state 45
    SINGLE          shift and go to state 50
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 47
    BOOLEAN         shift and go to state 51
    ARRAY           shift and go to state 54

    type_specifier                 shift and go to state 184

state 169

    (53) for_declaration -> FOR assignation TO op_var DO . BEGIN declarations END SEMI

    BEGIN           shift and go to state 185


state 170

    (73) string_sentence -> STRINGVAL PLUS string_sentence .

    COMMA           reduce using rule 73 (string_sentence -> STRINGVAL PLUS string_sentence .)
    RPARENT         reduce using rule 73 (string_sentence -> STRINGVAL PLUS string_sentence .)


state 171

    (72) string_sentence -> STRINGVAL PLUS ID .

    COMMA           reduce using rule 72 (string_sentence -> STRINGVAL PLUS ID .)
    RPARENT         reduce using rule 72 (string_sentence -> STRINGVAL PLUS ID .)


state 172

    (69) op_write -> op_write COMMA op_write .
    (69) op_write -> op_write . COMMA op_write

  ! shift/reduce conflict for COMMA resolved as shift
    RPARENT         reduce using rule 69 (op_write -> op_write COMMA op_write .)
    COMMA           shift and go to state 150

  ! COMMA           [ reduce using rule 69 (op_write -> op_write COMMA op_write .) ]


state 173

    (65) write_declaration -> WRITE LPARENT op_write RPARENT SEMI .

    WRITE           reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    READLN          reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    VAR             reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    CONST           reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    ID              reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    BREAK           reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    FUNCTION        reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    WHILE           reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    FOR             reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    IF              reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    NUMBER          reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    END             reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    RPARENT         reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    ELSE            reduce using rule 65 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)


state 174

    (36) array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN . operation SEMI
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    LPARENT         shift and go to state 109
    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 138
    operation                      shift and go to state 186

state 175

    (37) array_assignation -> ID LBLOCK ID RBLOCK ASSIGN . operation SEMI
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    LPARENT         shift and go to state 109
    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 138
    operation                      shift and go to state 187

state 176

    (38) array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN . operation SEMI
    (43) operation -> . op_var
    (44) operation -> . operation op_arith operation
    (45) operation -> . LPARENT operation RPARENT
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    LPARENT         shift and go to state 109
    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 138
    operation                      shift and go to state 188

state 177

    (56) if_declaration -> IF relacion_if THEN BEGIN declarations . else_stament END SEMI
    (49) stament -> declarations . ID ASSIGN
    (63) else_stament -> . ELSE declarations
    (64) else_stament -> .

    ID              shift and go to state 80
    ELSE            shift and go to state 190
    END             reduce using rule 64 (else_stament -> .)

    else_stament                   shift and go to state 189

state 178

    (62) relacion_if -> LPARENT op_var op_arith op_var . RPARENT op_logic op_var

    RPARENT         shift and go to state 191


state 179

    (74) readln_declaration -> READLN LPARENT ID RPARENT SEMI .

    WRITE           reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    READLN          reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    VAR             reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    CONST           reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    ID              reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    BREAK           reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    FUNCTION        reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    WHILE           reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    FOR             reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    IF              reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    NUMBER          reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    END             reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    RPARENT         reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    ELSE            reduce using rule 74 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)


state 180

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT . NUMBER RBLOCK OF type_specifier SEMI

    NUMBER          shift and go to state 192


state 181

    (52) while_declaration -> WHILE relation DO BEGIN declarations END . SEMI

    SEMI            shift and go to state 193


state 182

    (94) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON . type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 52
    CHAR            shift and go to state 49
    BYTE            shift and go to state 53
    REAL            shift and go to state 45
    SINGLE          shift and go to state 50
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 47
    BOOLEAN         shift and go to state 51
    ARRAY           shift and go to state 54

    type_specifier                 shift and go to state 194

state 183

    (96) parameters -> ID COMMA parameters .

    RPARENT         reduce using rule 96 (parameters -> ID COMMA parameters .)


state 184

    (97) end_parameters -> COLON type_specifier .

    RPARENT         reduce using rule 97 (end_parameters -> COLON type_specifier .)


state 185

    (53) for_declaration -> FOR assignation TO op_var DO BEGIN . declarations END SEMI
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 195
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 186

    (36) array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation . SEMI
    (44) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    SEMI            shift and go to state 196
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 104

    op_arith                       shift and go to state 102

state 187

    (37) array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation . SEMI
    (44) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    SEMI            shift and go to state 197
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 104

    op_arith                       shift and go to state 102

state 188

    (38) array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation . SEMI
    (44) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    SEMI            shift and go to state 198
    PLUS            shift and go to state 101
    MINUS           shift and go to state 103
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 104

    op_arith                       shift and go to state 102

state 189

    (56) if_declaration -> IF relacion_if THEN BEGIN declarations else_stament . END SEMI

    END             shift and go to state 199


state 190

    (63) else_stament -> ELSE . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 200
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 191

    (62) relacion_if -> LPARENT op_var op_arith op_var RPARENT . op_logic op_var
    (84) op_logic -> . EQ
    (85) op_logic -> . NE
    (86) op_logic -> . LT
    (87) op_logic -> . LE
    (88) op_logic -> . GT
    (89) op_logic -> . GE
    (90) op_logic -> . LNOT
    (91) op_logic -> . LOR
    (92) op_logic -> . LAND
    (93) op_logic -> . LXOR

    EQ              shift and go to state 98
    NE              shift and go to state 93
    LT              shift and go to state 91
    LE              shift and go to state 88
    GT              shift and go to state 95
    GE              shift and go to state 90
    LNOT            shift and go to state 97
    LOR             shift and go to state 94
    LAND            shift and go to state 96
    LXOR            shift and go to state 89

    op_logic                       shift and go to state 201

state 192

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER . RBLOCK OF type_specifier SEMI

    RBLOCK          shift and go to state 202


state 193

    (52) while_declaration -> WHILE relation DO BEGIN declarations END SEMI .

    WRITE           reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    READLN          reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    VAR             reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    CONST           reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    ID              reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    BREAK           reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    FUNCTION        reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    WHILE           reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    FOR             reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    IF              reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    NUMBER          reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    END             reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    RPARENT         reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    ELSE            reduce using rule 52 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)


state 194

    (94) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier . SEMI VAR declaration_function_initial BEGIN declarations END SEMI

    SEMI            shift and go to state 203


state 195

    (53) for_declaration -> FOR assignation TO op_var DO BEGIN declarations . END SEMI
    (49) stament -> declarations . ID ASSIGN

    END             shift and go to state 204
    ID              shift and go to state 80


state 196

    (36) array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .

    WRITE           reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    READLN          reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    VAR             reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    CONST           reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    ID              reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    BREAK           reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    FUNCTION        reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    WHILE           reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    FOR             reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    IF              reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    NUMBER          reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    END             reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    RBLOCK          reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    RPARENT         reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    ELSE            reduce using rule 36 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)


state 197

    (37) array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .

    WRITE           reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    READLN          reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    VAR             reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    CONST           reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    ID              reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    BREAK           reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    FUNCTION        reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    WHILE           reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    FOR             reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    IF              reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    NUMBER          reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    END             reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    RBLOCK          reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    RPARENT         reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    ELSE            reduce using rule 37 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)


state 198

    (38) array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .

    WRITE           reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    READLN          reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    VAR             reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    CONST           reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    ID              reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    BREAK           reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    FUNCTION        reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    WHILE           reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    FOR             reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    IF              reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    NUMBER          reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    END             reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    RBLOCK          reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    RPARENT         reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    ELSE            reduce using rule 38 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)


state 199

    (56) if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END . SEMI

    SEMI            shift and go to state 205


state 200

    (63) else_stament -> ELSE declarations .
    (49) stament -> declarations . ID ASSIGN

    END             reduce using rule 63 (else_stament -> ELSE declarations .)
    ID              shift and go to state 80


state 201

    (62) relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic . op_var
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    ID              shift and go to state 61
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    array_call                     shift and go to state 59
    op_var                         shift and go to state 206

state 202

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK . OF type_specifier SEMI

    OF              shift and go to state 207


state 203

    (94) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI . VAR declaration_function_initial BEGIN declarations END SEMI

    VAR             shift and go to state 208


state 204

    (53) for_declaration -> FOR assignation TO op_var DO BEGIN declarations END . SEMI

    SEMI            shift and go to state 209


state 205

    (56) if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .

    WRITE           reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    READLN          reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    VAR             reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    CONST           reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    ID              reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    BREAK           reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    FUNCTION        reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    WHILE           reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    FOR             reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    IF              reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    NUMBER          reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    END             reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    RPARENT         reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    ELSE            reduce using rule 56 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)


state 206

    (62) relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic op_var .

    THEN            reduce using rule 62 (relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic op_var .)


state 207

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF . type_specifier SEMI
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 52
    CHAR            shift and go to state 49
    BYTE            shift and go to state 53
    REAL            shift and go to state 45
    SINGLE          shift and go to state 50
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 47
    BOOLEAN         shift and go to state 51
    ARRAY           shift and go to state 54

    type_specifier                 shift and go to state 210

state 208

    (94) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR . declaration_function_initial BEGIN declarations END SEMI
    (98) declaration_function_initial -> . ID COLON type_specifier SEMI
    (99) declaration_function_initial -> . ID COLON type_specifier SEMI declaration_function_initial

    ID              shift and go to state 212

    declaration_function_initial   shift and go to state 211

state 209

    (53) for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .

    WRITE           reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    READLN          reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    VAR             reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    CONST           reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    ID              reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    BREAK           reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    FUNCTION        reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    WHILE           reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    FOR             reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    IF              reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    NUMBER          reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    END             reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    RPARENT         reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    ELSE            reduce using rule 53 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)


state 210

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier . SEMI

    SEMI            shift and go to state 213


state 211

    (94) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial . BEGIN declarations END SEMI

    BEGIN           shift and go to state 214


state 212

    (98) declaration_function_initial -> ID . COLON type_specifier SEMI
    (99) declaration_function_initial -> ID . COLON type_specifier SEMI declaration_function_initial

    COLON           shift and go to state 215


state 213

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI .

    RPARENT         reduce using rule 18 (type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI .)
    SEMI            reduce using rule 18 (type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI .)


state 214

    (94) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN . declarations END SEMI
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (30) declarations -> . functions_declarations
    (31) declarations -> . functions_declarations declarations
    (65) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (74) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (46) stament -> . while_declaration
    (47) stament -> . for_declaration
    (48) stament -> . if_declaration
    (49) stament -> . declarations ID ASSIGN
    (50) stament -> . ID LPARENT declarations RPARENT
    (51) stament -> . BREAK SEMI
    (32) var_assignation -> . array_assignation
    (33) var_assignation -> . op_var ASSIGN arith_operation SEMI
    (34) var_assignation -> . op_var ASSIGN STRINGVAL SEMI
    (35) var_assignation -> . op_var ASSIGN op_var SEMI
    (94) functions_declarations -> . FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI
    (52) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (53) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (56) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (36) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (37) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (38) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (39) array_assignation -> . array_call
    (75) op_var -> . ID
    (76) op_var -> . NUMBER
    (77) op_var -> . array_call
    (78) op_var -> . function_call
    (70) array_call -> . ID LBLOCK op_var RBLOCK
    (54) function_call -> . ID LPARENT var_declaration RPARENT

    WRITE           shift and go to state 34
    READLN          shift and go to state 41
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 36
    BREAK           shift and go to state 30
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 23
    FOR             shift and go to state 31
    IF              shift and go to state 38
    NUMBER          shift and go to state 21

    function_call                  shift and go to state 22
    op_var                         shift and go to state 24
    stament                        shift and go to state 25
    var_assignation                shift and go to state 26
    readln_declaration             shift and go to state 27
    array_assignation              shift and go to state 40
    write_declaration              shift and go to state 32
    functions_declarations         shift and go to state 33
    for_declaration                shift and go to state 28
    declaracion_variables          shift and go to state 35
    while_declaration              shift and go to state 37
    declarations                   shift and go to state 216
    array_call                     shift and go to state 42
    if_declaration                 shift and go to state 43

state 215

    (98) declaration_function_initial -> ID COLON . type_specifier SEMI
    (99) declaration_function_initial -> ID COLON . type_specifier SEMI declaration_function_initial
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 52
    CHAR            shift and go to state 49
    BYTE            shift and go to state 53
    REAL            shift and go to state 45
    SINGLE          shift and go to state 50
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 47
    BOOLEAN         shift and go to state 51
    ARRAY           shift and go to state 54

    type_specifier                 shift and go to state 217

state 216

    (94) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations . END SEMI
    (49) stament -> declarations . ID ASSIGN

    END             shift and go to state 218
    ID              shift and go to state 80


state 217

    (98) declaration_function_initial -> ID COLON type_specifier . SEMI
    (99) declaration_function_initial -> ID COLON type_specifier . SEMI declaration_function_initial

    SEMI            shift and go to state 219


state 218

    (94) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END . SEMI

    SEMI            shift and go to state 220


state 219

    (98) declaration_function_initial -> ID COLON type_specifier SEMI .
    (99) declaration_function_initial -> ID COLON type_specifier SEMI . declaration_function_initial
    (98) declaration_function_initial -> . ID COLON type_specifier SEMI
    (99) declaration_function_initial -> . ID COLON type_specifier SEMI declaration_function_initial

    BEGIN           reduce using rule 98 (declaration_function_initial -> ID COLON type_specifier SEMI .)
    ID              shift and go to state 212

    declaration_function_initial   shift and go to state 221

state 220

    (94) functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .

    WRITE           reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    READLN          reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    VAR             reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    CONST           reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    ID              reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    BREAK           reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    FUNCTION        reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    WHILE           reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    FOR             reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    IF              reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    NUMBER          reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    END             reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    RPARENT         reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)
    ELSE            reduce using rule 94 (functions_declarations -> FUNCTION ID LPARENT parameters RPARENT COLON type_specifier SEMI VAR declaration_function_initial BEGIN declarations END SEMI .)


state 221

    (99) declaration_function_initial -> ID COLON type_specifier SEMI declaration_function_initial .

    BEGIN           reduce using rule 99 (declaration_function_initial -> ID COLON type_specifier SEMI declaration_function_initial .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 25 resolved as shift
WARNING: shift/reduce conflict for ID in state 26 resolved as shift
WARNING: shift/reduce conflict for ID in state 27 resolved as shift
WARNING: shift/reduce conflict for ID in state 32 resolved as shift
WARNING: shift/reduce conflict for ID in state 33 resolved as shift
WARNING: shift/reduce conflict for ID in state 35 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 71 resolved as shift
WARNING: shift/reduce conflict for ID in state 73 resolved as shift
WARNING: shift/reduce conflict for RPARENT in state 86 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for MOD in state 110 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 123 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 128 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 128 resolved as shift
WARNING: shift/reduce conflict for MOD in state 128 resolved as shift
WARNING: shift/reduce conflict for EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for NE in state 137 resolved as shift
WARNING: shift/reduce conflict for LT in state 137 resolved as shift
WARNING: shift/reduce conflict for LE in state 137 resolved as shift
WARNING: shift/reduce conflict for GT in state 137 resolved as shift
WARNING: shift/reduce conflict for GE in state 137 resolved as shift
WARNING: shift/reduce conflict for LNOT in state 137 resolved as shift
WARNING: shift/reduce conflict for LOR in state 137 resolved as shift
WARNING: shift/reduce conflict for LAND in state 137 resolved as shift
WARNING: shift/reduce conflict for LXOR in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 139 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 139 resolved as shift
WARNING: shift/reduce conflict for MOD in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 164 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 164 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 164 resolved as shift
WARNING: shift/reduce conflict for MOD in state 164 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 172 resolved as shift
WARNING: reduce/reduce conflict in state 42 resolved using rule (array_assignation -> array_call)
WARNING: rejected rule (op_var -> array_call) in state 42
WARNING: reduce/reduce conflict in state 58 resolved using rule (operation -> op_var)
WARNING: rejected rule (relation -> op_var) in state 58
WARNING: reduce/reduce conflict in state 117 resolved using rule (op_write -> array_call)
WARNING: rejected rule (op_var -> array_call) in state 117
WARNING: reduce/reduce conflict in state 128 resolved using rule (operation -> op_var)
WARNING: rejected rule (relation -> op_var) in state 128
WARNING: reduce/reduce conflict in state 164 resolved using rule (arith_operation -> op_var op_arith op_var)
WARNING: rejected rule (operation -> op_var) in state 164
WARNING: Rule (relation -> op_var) is never reduced
