Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    RBRACE
    FUNCTION
    CLRSCR
    LBRACE
    APOSTROPHE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT
Rule 2     declaration_initial -> uses_declaration
Rule 3     declaration_initial -> declaracion_variables
Rule 4     declaration_initial -> declaration_initial uses_declaration
Rule 5     declaration_initial -> declaration_initial declaracion_variables
Rule 6     declaracion_variables -> VAR var_declaration COLON type_specifier SEMI
Rule 7     declaracion_variables -> CONST var_declaration COLON type_specifier SEMI
Rule 8     var_declaration -> ID
Rule 9     var_declaration -> ID COMMA var_declaration
Rule 10    type_specifier -> INTEGER
Rule 11    type_specifier -> CHAR
Rule 12    type_specifier -> BYTE
Rule 13    type_specifier -> REAL
Rule 14    type_specifier -> SINGLE
Rule 15    type_specifier -> DOUBLE
Rule 16    type_specifier -> STRING
Rule 17    type_specifier -> BOOLEAN
Rule 18    type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI
Rule 19    uses_declaration -> USES ID SEMI
Rule 20    declarations -> write_declaration
Rule 21    declarations -> write_declaration declarations
Rule 22    declarations -> readln_declaration
Rule 23    declarations -> readln_declaration declarations
Rule 24    declarations -> declaracion_variables
Rule 25    declarations -> declaracion_variables declarations
Rule 26    declarations -> stament
Rule 27    declarations -> stament declarations
Rule 28    declarations -> var_assignation
Rule 29    declarations -> var_assignation declarations
Rule 30    var_assignation -> array_assignation
Rule 31    var_assignation -> ID ASSIGN arith_operation SEMI
Rule 32    array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
Rule 33    array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI
Rule 34    array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
Rule 35    array_assignation -> array_call
Rule 36    arith_operation -> op_var op_arith op_var
Rule 37    arith_operation -> op_var op_arith arith_operation
Rule 38    arith_operation -> operation
Rule 39    operation -> op_var
Rule 40    operation -> operation op_arith operation
Rule 41    operation -> LPARENT operation RPARENT
Rule 42    array_declaration -> <empty>
Rule 43    array_type_specifier -> INTEGER
Rule 44    array_type_specifier -> REAL
Rule 45    array_type_specifier -> DOUBLE
Rule 46    array_type_specifier -> BOOLEAN
Rule 47    array_type_specifier -> array_declaration
Rule 48    stament -> while_declaration
Rule 49    stament -> for_declaration
Rule 50    stament -> if_declaration
Rule 51    stament -> declarations ID ASSIGN
Rule 52    stament -> ID LPARENT declarations RPARENT
Rule 53    stament -> BREAK SEMI
Rule 54    while_declaration -> WHILE relation DO BEGIN declarations END SEMI
Rule 55    for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI
Rule 56    assignation -> op_var ASSIGN op_var
Rule 57    if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI
Rule 58    relation -> op_var
Rule 59    relation -> operation
Rule 60    relation -> relation op_logic relation
Rule 61    relation -> LPARENT relation RPARENT
Rule 62    relacion_if -> relation
Rule 63    relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic op_var
Rule 64    else_stament -> ELSE declarations
Rule 65    else_stament -> <empty>
Rule 66    write_declaration -> WRITE LPARENT op_write RPARENT SEMI
Rule 67    op_write -> string_sentence
Rule 68    op_write -> op_var
Rule 69    op_write -> array_call
Rule 70    op_write -> op_write COMMA op_write
Rule 71    array_call -> ID LBLOCK op_var RBLOCK
Rule 72    string_sentence -> STRINGVAL
Rule 73    string_sentence -> STRINGVAL PLUS ID
Rule 74    string_sentence -> STRINGVAL PLUS string_sentence
Rule 75    readln_declaration -> READLN LPARENT ID RPARENT SEMI
Rule 76    op_var -> ID
Rule 77    op_var -> NUMBER
Rule 78    op_var -> array_call
Rule 79    op_arith -> PLUS
Rule 80    op_arith -> MINUS
Rule 81    op_arith -> TIMES
Rule 82    op_arith -> DIVIDE
Rule 83    op_arith -> MOD
Rule 84    op_logic -> EQ
Rule 85    op_logic -> NE
Rule 86    op_logic -> LT
Rule 87    op_logic -> LE
Rule 88    op_logic -> GT
Rule 89    op_logic -> GE
Rule 90    op_logic -> LNOT
Rule 91    op_logic -> LOR
Rule 92    op_logic -> LAND
Rule 93    op_logic -> LXOR

Terminals, with rules where they appear

APOSTROPHE           : 
ARRAY                : 18
ASSIGN               : 31 32 33 34 51 56
BEGIN                : 1 54 55 57
BOOLEAN              : 17 46
BREAK                : 53
BYTE                 : 12
CHAR                 : 11
CLRSCR               : 
COLON                : 6 7
COMMA                : 9 70
CONST                : 7
DIVIDE               : 82
DO                   : 54 55
DOT                  : 1 18 18
DOUBLE               : 15 45
ELSE                 : 64
END                  : 1 54 55 57
EQ                   : 84
FOR                  : 55
FUNCTION             : 
GE                   : 89
GT                   : 88
ID                   : 1 8 9 19 31 32 33 33 34 51 52 71 73 75 76
IF                   : 57
INTEGER              : 10 43
LAND                 : 92
LBLOCK               : 18 32 33 34 71
LBRACE               : 
LE                   : 87
LNOT                 : 90
LOR                  : 91
LPARENT              : 41 52 61 63 66 75
LT                   : 86
LXOR                 : 93
MINUS                : 80
MOD                  : 83
NE                   : 85
NUMBER               : 18 18 32 77
OF                   : 18
PLUS                 : 73 74 79
PROGRAM              : 1
RBLOCK               : 18 32 33 34 71
RBRACE               : 
READLN               : 75
REAL                 : 13 44
RPARENT              : 41 52 61 63 66 75
SEMI                 : 1 6 7 18 19 31 32 33 34 53 54 55 57 66 75
SINGLE               : 14
STRING               : 16
STRINGVAL            : 72 73 74
THEN                 : 57
TIMES                : 81
TO                   : 55
USES                 : 19
VAR                  : 6
WHILE                : 54
WRITE                : 66
error                : 

Nonterminals, with rules where they appear

arith_operation      : 31 37
array_assignation    : 30 34
array_call           : 35 69 78
array_declaration    : 47
array_type_specifier : 
assignation          : 55
declaracion_variables : 3 5 24 25
declaration_initial  : 1 4 5
declarations         : 1 21 23 25 27 29 51 52 54 55 57 64
else_stament         : 57
for_declaration      : 49
if_declaration       : 50
op_arith             : 36 37 40 63
op_logic             : 60 63
op_var               : 36 36 37 39 55 56 56 58 63 63 63 68 71
op_write             : 66 70 70
operation            : 32 33 34 38 40 40 41 59
programa             : 0
readln_declaration   : 22 23
relacion_if          : 57
relation             : 54 60 60 61 62
stament              : 26 27
string_sentence      : 67 74
type_specifier       : 6 7 18
uses_declaration     : 2 4
var_assignation      : 28 29
var_declaration      : 6 7 9
while_declaration    : 48
write_declaration    : 20 21

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT

    PROGRAM         shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> PROGRAM . ID SEMI declaration_initial BEGIN declarations END DOT

    ID              shift and go to state 3


state 2

    (0) S' -> programa .



state 3

    (1) programa -> PROGRAM ID . SEMI declaration_initial BEGIN declarations END DOT

    SEMI            shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMI . declaration_initial BEGIN declarations END DOT
    (2) declaration_initial -> . uses_declaration
    (3) declaration_initial -> . declaracion_variables
    (4) declaration_initial -> . declaration_initial uses_declaration
    (5) declaration_initial -> . declaration_initial declaracion_variables
    (19) uses_declaration -> . USES ID SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI

    USES            shift and go to state 7
    VAR             shift and go to state 9
    CONST           shift and go to state 6

    declaration_initial            shift and go to state 8
    declaracion_variables          shift and go to state 5
    uses_declaration               shift and go to state 10

state 5

    (3) declaration_initial -> declaracion_variables .

    BEGIN           reduce using rule 3 (declaration_initial -> declaracion_variables .)
    USES            reduce using rule 3 (declaration_initial -> declaracion_variables .)
    VAR             reduce using rule 3 (declaration_initial -> declaracion_variables .)
    CONST           reduce using rule 3 (declaration_initial -> declaracion_variables .)


state 6

    (7) declaracion_variables -> CONST . var_declaration COLON type_specifier SEMI
    (8) var_declaration -> . ID
    (9) var_declaration -> . ID COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 11

state 7

    (19) uses_declaration -> USES . ID SEMI

    ID              shift and go to state 13


state 8

    (1) programa -> PROGRAM ID SEMI declaration_initial . BEGIN declarations END DOT
    (4) declaration_initial -> declaration_initial . uses_declaration
    (5) declaration_initial -> declaration_initial . declaracion_variables
    (19) uses_declaration -> . USES ID SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI

    BEGIN           shift and go to state 14
    USES            shift and go to state 7
    VAR             shift and go to state 9
    CONST           shift and go to state 6

    declaracion_variables          shift and go to state 15
    uses_declaration               shift and go to state 16

state 9

    (6) declaracion_variables -> VAR . var_declaration COLON type_specifier SEMI
    (8) var_declaration -> . ID
    (9) var_declaration -> . ID COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 17

state 10

    (2) declaration_initial -> uses_declaration .

    BEGIN           reduce using rule 2 (declaration_initial -> uses_declaration .)
    USES            reduce using rule 2 (declaration_initial -> uses_declaration .)
    VAR             reduce using rule 2 (declaration_initial -> uses_declaration .)
    CONST           reduce using rule 2 (declaration_initial -> uses_declaration .)


state 11

    (7) declaracion_variables -> CONST var_declaration . COLON type_specifier SEMI

    COLON           shift and go to state 18


state 12

    (8) var_declaration -> ID .
    (9) var_declaration -> ID . COMMA var_declaration

    COLON           reduce using rule 8 (var_declaration -> ID .)
    COMMA           shift and go to state 19


state 13

    (19) uses_declaration -> USES ID . SEMI

    SEMI            shift and go to state 20


state 14

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN . declarations END DOT
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (66) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (75) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (48) stament -> . while_declaration
    (49) stament -> . for_declaration
    (50) stament -> . if_declaration
    (51) stament -> . declarations ID ASSIGN
    (52) stament -> . ID LPARENT declarations RPARENT
    (53) stament -> . BREAK SEMI
    (30) var_assignation -> . array_assignation
    (31) var_assignation -> . ID ASSIGN arith_operation SEMI
    (54) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (55) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (57) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 29
    READLN          shift and go to state 36
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 31
    BREAK           shift and go to state 26
    WHILE           shift and go to state 21
    FOR             shift and go to state 27
    IF              shift and go to state 32

    stament                        shift and go to state 22
    var_assignation                shift and go to state 23
    readln_declaration             shift and go to state 24
    array_assignation              shift and go to state 35
    write_declaration              shift and go to state 28
    for_declaration                shift and go to state 25
    declaracion_variables          shift and go to state 30
    while_declaration              shift and go to state 33
    declarations                   shift and go to state 34
    array_call                     shift and go to state 37
    if_declaration                 shift and go to state 38

state 15

    (5) declaration_initial -> declaration_initial declaracion_variables .

    BEGIN           reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)
    USES            reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)
    VAR             reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)
    CONST           reduce using rule 5 (declaration_initial -> declaration_initial declaracion_variables .)


state 16

    (4) declaration_initial -> declaration_initial uses_declaration .

    BEGIN           reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)
    USES            reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)
    VAR             reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)
    CONST           reduce using rule 4 (declaration_initial -> declaration_initial uses_declaration .)


state 17

    (6) declaracion_variables -> VAR var_declaration . COLON type_specifier SEMI

    COLON           shift and go to state 39


state 18

    (7) declaracion_variables -> CONST var_declaration COLON . type_specifier SEMI
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 47
    CHAR            shift and go to state 44
    BYTE            shift and go to state 48
    REAL            shift and go to state 40
    SINGLE          shift and go to state 45
    DOUBLE          shift and go to state 43
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 46
    ARRAY           shift and go to state 49

    type_specifier                 shift and go to state 41

state 19

    (9) var_declaration -> ID COMMA . var_declaration
    (8) var_declaration -> . ID
    (9) var_declaration -> . ID COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 50

state 20

    (19) uses_declaration -> USES ID SEMI .

    BEGIN           reduce using rule 19 (uses_declaration -> USES ID SEMI .)
    USES            reduce using rule 19 (uses_declaration -> USES ID SEMI .)
    VAR             reduce using rule 19 (uses_declaration -> USES ID SEMI .)
    CONST           reduce using rule 19 (uses_declaration -> USES ID SEMI .)


state 21

    (54) while_declaration -> WHILE . relation DO BEGIN declarations END SEMI
    (58) relation -> . op_var
    (59) relation -> . operation
    (60) relation -> . relation op_logic relation
    (61) relation -> . LPARENT relation RPARENT
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 51
    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    array_call                     shift and go to state 55
    op_var                         shift and go to state 54
    relation                       shift and go to state 53
    operation                      shift and go to state 56

state 22

    (26) declarations -> stament .
    (27) declarations -> stament . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (66) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (75) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (48) stament -> . while_declaration
    (49) stament -> . for_declaration
    (50) stament -> . if_declaration
    (51) stament -> . declarations ID ASSIGN
    (52) stament -> . ID LPARENT declarations RPARENT
    (53) stament -> . BREAK SEMI
    (30) var_assignation -> . array_assignation
    (31) var_assignation -> . ID ASSIGN arith_operation SEMI
    (54) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (55) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (57) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 26 (declarations -> stament .)
    ELSE            reduce using rule 26 (declarations -> stament .)
    RPARENT         reduce using rule 26 (declarations -> stament .)
    WRITE           shift and go to state 29
    READLN          shift and go to state 36
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 31
    BREAK           shift and go to state 26
    WHILE           shift and go to state 21
    FOR             shift and go to state 27
    IF              shift and go to state 32

  ! ID              [ reduce using rule 26 (declarations -> stament .) ]

    stament                        shift and go to state 22
    var_assignation                shift and go to state 23
    declarations                   shift and go to state 58
    array_call                     shift and go to state 37
    write_declaration              shift and go to state 28
    while_declaration              shift and go to state 33
    declaracion_variables          shift and go to state 30
    readln_declaration             shift and go to state 24
    if_declaration                 shift and go to state 38
    for_declaration                shift and go to state 25
    array_assignation              shift and go to state 35

state 23

    (28) declarations -> var_assignation .
    (29) declarations -> var_assignation . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (66) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (75) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (48) stament -> . while_declaration
    (49) stament -> . for_declaration
    (50) stament -> . if_declaration
    (51) stament -> . declarations ID ASSIGN
    (52) stament -> . ID LPARENT declarations RPARENT
    (53) stament -> . BREAK SEMI
    (30) var_assignation -> . array_assignation
    (31) var_assignation -> . ID ASSIGN arith_operation SEMI
    (54) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (55) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (57) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 28 (declarations -> var_assignation .)
    ELSE            reduce using rule 28 (declarations -> var_assignation .)
    RPARENT         reduce using rule 28 (declarations -> var_assignation .)
    WRITE           shift and go to state 29
    READLN          shift and go to state 36
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 31
    BREAK           shift and go to state 26
    WHILE           shift and go to state 21
    FOR             shift and go to state 27
    IF              shift and go to state 32

  ! ID              [ reduce using rule 28 (declarations -> var_assignation .) ]

    stament                        shift and go to state 22
    var_assignation                shift and go to state 23
    declarations                   shift and go to state 59
    array_call                     shift and go to state 37
    write_declaration              shift and go to state 28
    while_declaration              shift and go to state 33
    declaracion_variables          shift and go to state 30
    readln_declaration             shift and go to state 24
    if_declaration                 shift and go to state 38
    for_declaration                shift and go to state 25
    array_assignation              shift and go to state 35

state 24

    (22) declarations -> readln_declaration .
    (23) declarations -> readln_declaration . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (66) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (75) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (48) stament -> . while_declaration
    (49) stament -> . for_declaration
    (50) stament -> . if_declaration
    (51) stament -> . declarations ID ASSIGN
    (52) stament -> . ID LPARENT declarations RPARENT
    (53) stament -> . BREAK SEMI
    (30) var_assignation -> . array_assignation
    (31) var_assignation -> . ID ASSIGN arith_operation SEMI
    (54) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (55) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (57) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 22 (declarations -> readln_declaration .)
    ELSE            reduce using rule 22 (declarations -> readln_declaration .)
    RPARENT         reduce using rule 22 (declarations -> readln_declaration .)
    WRITE           shift and go to state 29
    READLN          shift and go to state 36
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 31
    BREAK           shift and go to state 26
    WHILE           shift and go to state 21
    FOR             shift and go to state 27
    IF              shift and go to state 32

  ! ID              [ reduce using rule 22 (declarations -> readln_declaration .) ]

    stament                        shift and go to state 22
    var_assignation                shift and go to state 23
    declarations                   shift and go to state 60
    array_call                     shift and go to state 37
    write_declaration              shift and go to state 28
    while_declaration              shift and go to state 33
    declaracion_variables          shift and go to state 30
    readln_declaration             shift and go to state 24
    if_declaration                 shift and go to state 38
    for_declaration                shift and go to state 25
    array_assignation              shift and go to state 35

state 25

    (49) stament -> for_declaration .

    WRITE           reduce using rule 49 (stament -> for_declaration .)
    READLN          reduce using rule 49 (stament -> for_declaration .)
    VAR             reduce using rule 49 (stament -> for_declaration .)
    CONST           reduce using rule 49 (stament -> for_declaration .)
    ID              reduce using rule 49 (stament -> for_declaration .)
    BREAK           reduce using rule 49 (stament -> for_declaration .)
    WHILE           reduce using rule 49 (stament -> for_declaration .)
    FOR             reduce using rule 49 (stament -> for_declaration .)
    IF              reduce using rule 49 (stament -> for_declaration .)
    END             reduce using rule 49 (stament -> for_declaration .)
    ELSE            reduce using rule 49 (stament -> for_declaration .)
    RPARENT         reduce using rule 49 (stament -> for_declaration .)


state 26

    (53) stament -> BREAK . SEMI

    SEMI            shift and go to state 61


state 27

    (55) for_declaration -> FOR . assignation TO op_var DO BEGIN declarations END SEMI
    (56) assignation -> . op_var ASSIGN op_var
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    array_call                     shift and go to state 55
    assignation                    shift and go to state 62
    op_var                         shift and go to state 63

state 28

    (20) declarations -> write_declaration .
    (21) declarations -> write_declaration . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (66) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (75) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (48) stament -> . while_declaration
    (49) stament -> . for_declaration
    (50) stament -> . if_declaration
    (51) stament -> . declarations ID ASSIGN
    (52) stament -> . ID LPARENT declarations RPARENT
    (53) stament -> . BREAK SEMI
    (30) var_assignation -> . array_assignation
    (31) var_assignation -> . ID ASSIGN arith_operation SEMI
    (54) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (55) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (57) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 20 (declarations -> write_declaration .)
    ELSE            reduce using rule 20 (declarations -> write_declaration .)
    RPARENT         reduce using rule 20 (declarations -> write_declaration .)
    WRITE           shift and go to state 29
    READLN          shift and go to state 36
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 31
    BREAK           shift and go to state 26
    WHILE           shift and go to state 21
    FOR             shift and go to state 27
    IF              shift and go to state 32

  ! ID              [ reduce using rule 20 (declarations -> write_declaration .) ]

    stament                        shift and go to state 22
    var_assignation                shift and go to state 23
    declarations                   shift and go to state 64
    array_call                     shift and go to state 37
    write_declaration              shift and go to state 28
    while_declaration              shift and go to state 33
    declaracion_variables          shift and go to state 30
    readln_declaration             shift and go to state 24
    if_declaration                 shift and go to state 38
    for_declaration                shift and go to state 25
    array_assignation              shift and go to state 35

state 29

    (66) write_declaration -> WRITE . LPARENT op_write RPARENT SEMI

    LPARENT         shift and go to state 65


state 30

    (24) declarations -> declaracion_variables .
    (25) declarations -> declaracion_variables . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (66) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (75) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (48) stament -> . while_declaration
    (49) stament -> . for_declaration
    (50) stament -> . if_declaration
    (51) stament -> . declarations ID ASSIGN
    (52) stament -> . ID LPARENT declarations RPARENT
    (53) stament -> . BREAK SEMI
    (30) var_assignation -> . array_assignation
    (31) var_assignation -> . ID ASSIGN arith_operation SEMI
    (54) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (55) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (57) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 24 (declarations -> declaracion_variables .)
    ELSE            reduce using rule 24 (declarations -> declaracion_variables .)
    RPARENT         reduce using rule 24 (declarations -> declaracion_variables .)
    WRITE           shift and go to state 29
    READLN          shift and go to state 36
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 31
    BREAK           shift and go to state 26
    WHILE           shift and go to state 21
    FOR             shift and go to state 27
    IF              shift and go to state 32

  ! ID              [ reduce using rule 24 (declarations -> declaracion_variables .) ]

    stament                        shift and go to state 22
    var_assignation                shift and go to state 23
    declarations                   shift and go to state 66
    array_call                     shift and go to state 37
    write_declaration              shift and go to state 28
    while_declaration              shift and go to state 33
    declaracion_variables          shift and go to state 30
    readln_declaration             shift and go to state 24
    if_declaration                 shift and go to state 38
    for_declaration                shift and go to state 25
    array_assignation              shift and go to state 35

state 31

    (52) stament -> ID . LPARENT declarations RPARENT
    (31) var_assignation -> ID . ASSIGN arith_operation SEMI
    (32) array_assignation -> ID . LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> ID . LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> ID . LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (71) array_call -> ID . LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 67
    ASSIGN          shift and go to state 69
    LBLOCK          shift and go to state 68


state 32

    (57) if_declaration -> IF . relacion_if THEN BEGIN declarations else_stament END SEMI
    (62) relacion_if -> . relation
    (63) relacion_if -> . LPARENT op_var op_arith op_var RPARENT op_logic op_var
    (58) relation -> . op_var
    (59) relation -> . operation
    (60) relation -> . relation op_logic relation
    (61) relation -> . LPARENT relation RPARENT
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 70
    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    relation                       shift and go to state 71
    op_var                         shift and go to state 54
    relacion_if                    shift and go to state 72
    array_call                     shift and go to state 55
    operation                      shift and go to state 56

state 33

    (48) stament -> while_declaration .

    WRITE           reduce using rule 48 (stament -> while_declaration .)
    READLN          reduce using rule 48 (stament -> while_declaration .)
    VAR             reduce using rule 48 (stament -> while_declaration .)
    CONST           reduce using rule 48 (stament -> while_declaration .)
    ID              reduce using rule 48 (stament -> while_declaration .)
    BREAK           reduce using rule 48 (stament -> while_declaration .)
    WHILE           reduce using rule 48 (stament -> while_declaration .)
    FOR             reduce using rule 48 (stament -> while_declaration .)
    IF              reduce using rule 48 (stament -> while_declaration .)
    END             reduce using rule 48 (stament -> while_declaration .)
    ELSE            reduce using rule 48 (stament -> while_declaration .)
    RPARENT         reduce using rule 48 (stament -> while_declaration .)


state 34

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations . END DOT
    (51) stament -> declarations . ID ASSIGN

    END             shift and go to state 73
    ID              shift and go to state 74


state 35

    (30) var_assignation -> array_assignation .

    WRITE           reduce using rule 30 (var_assignation -> array_assignation .)
    READLN          reduce using rule 30 (var_assignation -> array_assignation .)
    VAR             reduce using rule 30 (var_assignation -> array_assignation .)
    CONST           reduce using rule 30 (var_assignation -> array_assignation .)
    ID              reduce using rule 30 (var_assignation -> array_assignation .)
    BREAK           reduce using rule 30 (var_assignation -> array_assignation .)
    WHILE           reduce using rule 30 (var_assignation -> array_assignation .)
    FOR             reduce using rule 30 (var_assignation -> array_assignation .)
    IF              reduce using rule 30 (var_assignation -> array_assignation .)
    END             reduce using rule 30 (var_assignation -> array_assignation .)
    RPARENT         reduce using rule 30 (var_assignation -> array_assignation .)
    ELSE            reduce using rule 30 (var_assignation -> array_assignation .)


state 36

    (75) readln_declaration -> READLN . LPARENT ID RPARENT SEMI

    LPARENT         shift and go to state 75


state 37

    (35) array_assignation -> array_call .

    WRITE           reduce using rule 35 (array_assignation -> array_call .)
    READLN          reduce using rule 35 (array_assignation -> array_call .)
    VAR             reduce using rule 35 (array_assignation -> array_call .)
    CONST           reduce using rule 35 (array_assignation -> array_call .)
    ID              reduce using rule 35 (array_assignation -> array_call .)
    BREAK           reduce using rule 35 (array_assignation -> array_call .)
    WHILE           reduce using rule 35 (array_assignation -> array_call .)
    FOR             reduce using rule 35 (array_assignation -> array_call .)
    IF              reduce using rule 35 (array_assignation -> array_call .)
    END             reduce using rule 35 (array_assignation -> array_call .)
    RPARENT         reduce using rule 35 (array_assignation -> array_call .)
    ELSE            reduce using rule 35 (array_assignation -> array_call .)


state 38

    (50) stament -> if_declaration .

    WRITE           reduce using rule 50 (stament -> if_declaration .)
    READLN          reduce using rule 50 (stament -> if_declaration .)
    VAR             reduce using rule 50 (stament -> if_declaration .)
    CONST           reduce using rule 50 (stament -> if_declaration .)
    ID              reduce using rule 50 (stament -> if_declaration .)
    BREAK           reduce using rule 50 (stament -> if_declaration .)
    WHILE           reduce using rule 50 (stament -> if_declaration .)
    FOR             reduce using rule 50 (stament -> if_declaration .)
    IF              reduce using rule 50 (stament -> if_declaration .)
    END             reduce using rule 50 (stament -> if_declaration .)
    ELSE            reduce using rule 50 (stament -> if_declaration .)
    RPARENT         reduce using rule 50 (stament -> if_declaration .)


state 39

    (6) declaracion_variables -> VAR var_declaration COLON . type_specifier SEMI
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 47
    CHAR            shift and go to state 44
    BYTE            shift and go to state 48
    REAL            shift and go to state 40
    SINGLE          shift and go to state 45
    DOUBLE          shift and go to state 43
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 46
    ARRAY           shift and go to state 49

    type_specifier                 shift and go to state 76

state 40

    (13) type_specifier -> REAL .

    SEMI            reduce using rule 13 (type_specifier -> REAL .)


state 41

    (7) declaracion_variables -> CONST var_declaration COLON type_specifier . SEMI

    SEMI            shift and go to state 77


state 42

    (16) type_specifier -> STRING .

    SEMI            reduce using rule 16 (type_specifier -> STRING .)


state 43

    (15) type_specifier -> DOUBLE .

    SEMI            reduce using rule 15 (type_specifier -> DOUBLE .)


state 44

    (11) type_specifier -> CHAR .

    SEMI            reduce using rule 11 (type_specifier -> CHAR .)


state 45

    (14) type_specifier -> SINGLE .

    SEMI            reduce using rule 14 (type_specifier -> SINGLE .)


state 46

    (17) type_specifier -> BOOLEAN .

    SEMI            reduce using rule 17 (type_specifier -> BOOLEAN .)


state 47

    (10) type_specifier -> INTEGER .

    SEMI            reduce using rule 10 (type_specifier -> INTEGER .)


state 48

    (12) type_specifier -> BYTE .

    SEMI            reduce using rule 12 (type_specifier -> BYTE .)


state 49

    (18) type_specifier -> ARRAY . LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    LBLOCK          shift and go to state 78


state 50

    (9) var_declaration -> ID COMMA var_declaration .

    COLON           reduce using rule 9 (var_declaration -> ID COMMA var_declaration .)


state 51

    (61) relation -> LPARENT . relation RPARENT
    (41) operation -> LPARENT . operation RPARENT
    (58) relation -> . op_var
    (59) relation -> . operation
    (60) relation -> . relation op_logic relation
    (61) relation -> . LPARENT relation RPARENT
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 51
    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    array_call                     shift and go to state 55
    op_var                         shift and go to state 54
    relation                       shift and go to state 79
    operation                      shift and go to state 80

state 52

    (77) op_var -> NUMBER .

    TO              reduce using rule 77 (op_var -> NUMBER .)
    RPARENT         reduce using rule 77 (op_var -> NUMBER .)
    PLUS            reduce using rule 77 (op_var -> NUMBER .)
    MINUS           reduce using rule 77 (op_var -> NUMBER .)
    TIMES           reduce using rule 77 (op_var -> NUMBER .)
    DIVIDE          reduce using rule 77 (op_var -> NUMBER .)
    MOD             reduce using rule 77 (op_var -> NUMBER .)
    SEMI            reduce using rule 77 (op_var -> NUMBER .)
    EQ              reduce using rule 77 (op_var -> NUMBER .)
    NE              reduce using rule 77 (op_var -> NUMBER .)
    LT              reduce using rule 77 (op_var -> NUMBER .)
    LE              reduce using rule 77 (op_var -> NUMBER .)
    GT              reduce using rule 77 (op_var -> NUMBER .)
    GE              reduce using rule 77 (op_var -> NUMBER .)
    LNOT            reduce using rule 77 (op_var -> NUMBER .)
    LOR             reduce using rule 77 (op_var -> NUMBER .)
    LAND            reduce using rule 77 (op_var -> NUMBER .)
    LXOR            reduce using rule 77 (op_var -> NUMBER .)
    DO              reduce using rule 77 (op_var -> NUMBER .)
    THEN            reduce using rule 77 (op_var -> NUMBER .)
    ASSIGN          reduce using rule 77 (op_var -> NUMBER .)
    COMMA           reduce using rule 77 (op_var -> NUMBER .)
    RBLOCK          reduce using rule 77 (op_var -> NUMBER .)


state 53

    (54) while_declaration -> WHILE relation . DO BEGIN declarations END SEMI
    (60) relation -> relation . op_logic relation
    (84) op_logic -> . EQ
    (85) op_logic -> . NE
    (86) op_logic -> . LT
    (87) op_logic -> . LE
    (88) op_logic -> . GT
    (89) op_logic -> . GE
    (90) op_logic -> . LNOT
    (91) op_logic -> . LOR
    (92) op_logic -> . LAND
    (93) op_logic -> . LXOR

    DO              shift and go to state 81
    EQ              shift and go to state 92
    NE              shift and go to state 87
    LT              shift and go to state 85
    LE              shift and go to state 82
    GT              shift and go to state 89
    GE              shift and go to state 84
    LNOT            shift and go to state 91
    LOR             shift and go to state 88
    LAND            shift and go to state 90
    LXOR            shift and go to state 83

    op_logic                       shift and go to state 86

state 54

    (58) relation -> op_var .
    (39) operation -> op_var .

  ! reduce/reduce conflict for RPARENT resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for EQ resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for NE resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LT resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LE resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for GT resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for GE resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LNOT resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LOR resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LAND resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LXOR resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for DO resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for THEN resolved using rule 39 (operation -> op_var .)
    RPARENT         reduce using rule 39 (operation -> op_var .)
    PLUS            reduce using rule 39 (operation -> op_var .)
    MINUS           reduce using rule 39 (operation -> op_var .)
    TIMES           reduce using rule 39 (operation -> op_var .)
    DIVIDE          reduce using rule 39 (operation -> op_var .)
    MOD             reduce using rule 39 (operation -> op_var .)
    EQ              reduce using rule 39 (operation -> op_var .)
    NE              reduce using rule 39 (operation -> op_var .)
    LT              reduce using rule 39 (operation -> op_var .)
    LE              reduce using rule 39 (operation -> op_var .)
    GT              reduce using rule 39 (operation -> op_var .)
    GE              reduce using rule 39 (operation -> op_var .)
    LNOT            reduce using rule 39 (operation -> op_var .)
    LOR             reduce using rule 39 (operation -> op_var .)
    LAND            reduce using rule 39 (operation -> op_var .)
    LXOR            reduce using rule 39 (operation -> op_var .)
    DO              reduce using rule 39 (operation -> op_var .)
    THEN            reduce using rule 39 (operation -> op_var .)

  ! EQ              [ reduce using rule 58 (relation -> op_var .) ]
  ! NE              [ reduce using rule 58 (relation -> op_var .) ]
  ! LT              [ reduce using rule 58 (relation -> op_var .) ]
  ! LE              [ reduce using rule 58 (relation -> op_var .) ]
  ! GT              [ reduce using rule 58 (relation -> op_var .) ]
  ! GE              [ reduce using rule 58 (relation -> op_var .) ]
  ! LNOT            [ reduce using rule 58 (relation -> op_var .) ]
  ! LOR             [ reduce using rule 58 (relation -> op_var .) ]
  ! LAND            [ reduce using rule 58 (relation -> op_var .) ]
  ! LXOR            [ reduce using rule 58 (relation -> op_var .) ]
  ! DO              [ reduce using rule 58 (relation -> op_var .) ]
  ! THEN            [ reduce using rule 58 (relation -> op_var .) ]
  ! RPARENT         [ reduce using rule 58 (relation -> op_var .) ]


state 55

    (78) op_var -> array_call .

    TO              reduce using rule 78 (op_var -> array_call .)
    RPARENT         reduce using rule 78 (op_var -> array_call .)
    PLUS            reduce using rule 78 (op_var -> array_call .)
    MINUS           reduce using rule 78 (op_var -> array_call .)
    TIMES           reduce using rule 78 (op_var -> array_call .)
    DIVIDE          reduce using rule 78 (op_var -> array_call .)
    MOD             reduce using rule 78 (op_var -> array_call .)
    SEMI            reduce using rule 78 (op_var -> array_call .)
    EQ              reduce using rule 78 (op_var -> array_call .)
    NE              reduce using rule 78 (op_var -> array_call .)
    LT              reduce using rule 78 (op_var -> array_call .)
    LE              reduce using rule 78 (op_var -> array_call .)
    GT              reduce using rule 78 (op_var -> array_call .)
    GE              reduce using rule 78 (op_var -> array_call .)
    LNOT            reduce using rule 78 (op_var -> array_call .)
    LOR             reduce using rule 78 (op_var -> array_call .)
    LAND            reduce using rule 78 (op_var -> array_call .)
    LXOR            reduce using rule 78 (op_var -> array_call .)
    DO              reduce using rule 78 (op_var -> array_call .)
    THEN            reduce using rule 78 (op_var -> array_call .)
    ASSIGN          reduce using rule 78 (op_var -> array_call .)
    RBLOCK          reduce using rule 78 (op_var -> array_call .)


state 56

    (59) relation -> operation .
    (40) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    EQ              reduce using rule 59 (relation -> operation .)
    NE              reduce using rule 59 (relation -> operation .)
    LT              reduce using rule 59 (relation -> operation .)
    LE              reduce using rule 59 (relation -> operation .)
    GT              reduce using rule 59 (relation -> operation .)
    GE              reduce using rule 59 (relation -> operation .)
    LNOT            reduce using rule 59 (relation -> operation .)
    LOR             reduce using rule 59 (relation -> operation .)
    LAND            reduce using rule 59 (relation -> operation .)
    LXOR            reduce using rule 59 (relation -> operation .)
    DO              reduce using rule 59 (relation -> operation .)
    THEN            reduce using rule 59 (relation -> operation .)
    RPARENT         reduce using rule 59 (relation -> operation .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 98

    op_arith                       shift and go to state 96

state 57

    (76) op_var -> ID .
    (71) array_call -> ID . LBLOCK op_var RBLOCK

    TO              reduce using rule 76 (op_var -> ID .)
    RPARENT         reduce using rule 76 (op_var -> ID .)
    PLUS            reduce using rule 76 (op_var -> ID .)
    MINUS           reduce using rule 76 (op_var -> ID .)
    TIMES           reduce using rule 76 (op_var -> ID .)
    DIVIDE          reduce using rule 76 (op_var -> ID .)
    MOD             reduce using rule 76 (op_var -> ID .)
    SEMI            reduce using rule 76 (op_var -> ID .)
    EQ              reduce using rule 76 (op_var -> ID .)
    NE              reduce using rule 76 (op_var -> ID .)
    LT              reduce using rule 76 (op_var -> ID .)
    LE              reduce using rule 76 (op_var -> ID .)
    GT              reduce using rule 76 (op_var -> ID .)
    GE              reduce using rule 76 (op_var -> ID .)
    LNOT            reduce using rule 76 (op_var -> ID .)
    LOR             reduce using rule 76 (op_var -> ID .)
    LAND            reduce using rule 76 (op_var -> ID .)
    LXOR            reduce using rule 76 (op_var -> ID .)
    DO              reduce using rule 76 (op_var -> ID .)
    THEN            reduce using rule 76 (op_var -> ID .)
    ASSIGN          reduce using rule 76 (op_var -> ID .)
    COMMA           reduce using rule 76 (op_var -> ID .)
    RBLOCK          reduce using rule 76 (op_var -> ID .)
    LBLOCK          shift and go to state 99


state 58

    (27) declarations -> stament declarations .
    (51) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 27 (declarations -> stament declarations .)
    ELSE            reduce using rule 27 (declarations -> stament declarations .)
    RPARENT         reduce using rule 27 (declarations -> stament declarations .)
    ID              shift and go to state 74

  ! ID              [ reduce using rule 27 (declarations -> stament declarations .) ]


state 59

    (29) declarations -> var_assignation declarations .
    (51) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 29 (declarations -> var_assignation declarations .)
    ELSE            reduce using rule 29 (declarations -> var_assignation declarations .)
    RPARENT         reduce using rule 29 (declarations -> var_assignation declarations .)
    ID              shift and go to state 74

  ! ID              [ reduce using rule 29 (declarations -> var_assignation declarations .) ]


state 60

    (23) declarations -> readln_declaration declarations .
    (51) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 23 (declarations -> readln_declaration declarations .)
    ELSE            reduce using rule 23 (declarations -> readln_declaration declarations .)
    RPARENT         reduce using rule 23 (declarations -> readln_declaration declarations .)
    ID              shift and go to state 74

  ! ID              [ reduce using rule 23 (declarations -> readln_declaration declarations .) ]


state 61

    (53) stament -> BREAK SEMI .

    WRITE           reduce using rule 53 (stament -> BREAK SEMI .)
    READLN          reduce using rule 53 (stament -> BREAK SEMI .)
    VAR             reduce using rule 53 (stament -> BREAK SEMI .)
    CONST           reduce using rule 53 (stament -> BREAK SEMI .)
    ID              reduce using rule 53 (stament -> BREAK SEMI .)
    BREAK           reduce using rule 53 (stament -> BREAK SEMI .)
    WHILE           reduce using rule 53 (stament -> BREAK SEMI .)
    FOR             reduce using rule 53 (stament -> BREAK SEMI .)
    IF              reduce using rule 53 (stament -> BREAK SEMI .)
    END             reduce using rule 53 (stament -> BREAK SEMI .)
    ELSE            reduce using rule 53 (stament -> BREAK SEMI .)
    RPARENT         reduce using rule 53 (stament -> BREAK SEMI .)


state 62

    (55) for_declaration -> FOR assignation . TO op_var DO BEGIN declarations END SEMI

    TO              shift and go to state 100


state 63

    (56) assignation -> op_var . ASSIGN op_var

    ASSIGN          shift and go to state 101


state 64

    (21) declarations -> write_declaration declarations .
    (51) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 21 (declarations -> write_declaration declarations .)
    ELSE            reduce using rule 21 (declarations -> write_declaration declarations .)
    RPARENT         reduce using rule 21 (declarations -> write_declaration declarations .)
    ID              shift and go to state 74

  ! ID              [ reduce using rule 21 (declarations -> write_declaration declarations .) ]


state 65

    (66) write_declaration -> WRITE LPARENT . op_write RPARENT SEMI
    (67) op_write -> . string_sentence
    (68) op_write -> . op_var
    (69) op_write -> . array_call
    (70) op_write -> . op_write COMMA op_write
    (72) string_sentence -> . STRINGVAL
    (73) string_sentence -> . STRINGVAL PLUS ID
    (74) string_sentence -> . STRINGVAL PLUS string_sentence
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    STRINGVAL       shift and go to state 103
    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    string_sentence                shift and go to state 106
    array_call                     shift and go to state 104
    op_write                       shift and go to state 105
    op_var                         shift and go to state 102

state 66

    (25) declarations -> declaracion_variables declarations .
    (51) stament -> declarations . ID ASSIGN

  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 25 (declarations -> declaracion_variables declarations .)
    ELSE            reduce using rule 25 (declarations -> declaracion_variables declarations .)
    RPARENT         reduce using rule 25 (declarations -> declaracion_variables declarations .)
    ID              shift and go to state 74

  ! ID              [ reduce using rule 25 (declarations -> declaracion_variables declarations .) ]


state 67

    (52) stament -> ID LPARENT . declarations RPARENT
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (66) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (75) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (48) stament -> . while_declaration
    (49) stament -> . for_declaration
    (50) stament -> . if_declaration
    (51) stament -> . declarations ID ASSIGN
    (52) stament -> . ID LPARENT declarations RPARENT
    (53) stament -> . BREAK SEMI
    (30) var_assignation -> . array_assignation
    (31) var_assignation -> . ID ASSIGN arith_operation SEMI
    (54) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (55) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (57) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 29
    READLN          shift and go to state 36
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 31
    BREAK           shift and go to state 26
    WHILE           shift and go to state 21
    FOR             shift and go to state 27
    IF              shift and go to state 32

    stament                        shift and go to state 22
    var_assignation                shift and go to state 23
    declarations                   shift and go to state 107
    array_call                     shift and go to state 37
    write_declaration              shift and go to state 28
    while_declaration              shift and go to state 33
    declaracion_variables          shift and go to state 30
    readln_declaration             shift and go to state 24
    if_declaration                 shift and go to state 38
    for_declaration                shift and go to state 25
    array_assignation              shift and go to state 35

state 68

    (32) array_assignation -> ID LBLOCK . NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> ID LBLOCK . ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> ID LBLOCK . array_assignation RBLOCK ASSIGN operation SEMI
    (71) array_call -> ID LBLOCK . op_var RBLOCK
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    NUMBER          shift and go to state 108
    ID              shift and go to state 109

    array_call                     shift and go to state 111
    array_assignation              shift and go to state 110
    op_var                         shift and go to state 112

state 69

    (31) var_assignation -> ID ASSIGN . arith_operation SEMI
    (36) arith_operation -> . op_var op_arith op_var
    (37) arith_operation -> . op_var op_arith arith_operation
    (38) arith_operation -> . operation
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 57
    NUMBER          shift and go to state 52
    LPARENT         shift and go to state 114

    operation                      shift and go to state 116
    arith_operation                shift and go to state 113
    array_call                     shift and go to state 55
    op_var                         shift and go to state 115

state 70

    (63) relacion_if -> LPARENT . op_var op_arith op_var RPARENT op_logic op_var
    (61) relation -> LPARENT . relation RPARENT
    (41) operation -> LPARENT . operation RPARENT
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (58) relation -> . op_var
    (59) relation -> . operation
    (60) relation -> . relation op_logic relation
    (61) relation -> . LPARENT relation RPARENT
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 57
    NUMBER          shift and go to state 52
    LPARENT         shift and go to state 51

    array_call                     shift and go to state 55
    op_var                         shift and go to state 117
    relation                       shift and go to state 79
    operation                      shift and go to state 80

state 71

    (62) relacion_if -> relation .
    (60) relation -> relation . op_logic relation
    (84) op_logic -> . EQ
    (85) op_logic -> . NE
    (86) op_logic -> . LT
    (87) op_logic -> . LE
    (88) op_logic -> . GT
    (89) op_logic -> . GE
    (90) op_logic -> . LNOT
    (91) op_logic -> . LOR
    (92) op_logic -> . LAND
    (93) op_logic -> . LXOR

    THEN            reduce using rule 62 (relacion_if -> relation .)
    EQ              shift and go to state 92
    NE              shift and go to state 87
    LT              shift and go to state 85
    LE              shift and go to state 82
    GT              shift and go to state 89
    GE              shift and go to state 84
    LNOT            shift and go to state 91
    LOR             shift and go to state 88
    LAND            shift and go to state 90
    LXOR            shift and go to state 83

    op_logic                       shift and go to state 86

state 72

    (57) if_declaration -> IF relacion_if . THEN BEGIN declarations else_stament END SEMI

    THEN            shift and go to state 118


state 73

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END . DOT

    DOT             shift and go to state 119


state 74

    (51) stament -> declarations ID . ASSIGN

    ASSIGN          shift and go to state 120


state 75

    (75) readln_declaration -> READLN LPARENT . ID RPARENT SEMI

    ID              shift and go to state 121


state 76

    (6) declaracion_variables -> VAR var_declaration COLON type_specifier . SEMI

    SEMI            shift and go to state 122


state 77

    (7) declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .

    WRITE           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    READLN          reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    VAR             reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    CONST           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    ID              reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    BREAK           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    WHILE           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    FOR             reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    IF              reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    END             reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    RPARENT         reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    ELSE            reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    BEGIN           reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)
    USES            reduce using rule 7 (declaracion_variables -> CONST var_declaration COLON type_specifier SEMI .)


state 78

    (18) type_specifier -> ARRAY LBLOCK . NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    NUMBER          shift and go to state 123


state 79

    (61) relation -> LPARENT relation . RPARENT
    (60) relation -> relation . op_logic relation
    (84) op_logic -> . EQ
    (85) op_logic -> . NE
    (86) op_logic -> . LT
    (87) op_logic -> . LE
    (88) op_logic -> . GT
    (89) op_logic -> . GE
    (90) op_logic -> . LNOT
    (91) op_logic -> . LOR
    (92) op_logic -> . LAND
    (93) op_logic -> . LXOR

    RPARENT         shift and go to state 124
    EQ              shift and go to state 92
    NE              shift and go to state 87
    LT              shift and go to state 85
    LE              shift and go to state 82
    GT              shift and go to state 89
    GE              shift and go to state 84
    LNOT            shift and go to state 91
    LOR             shift and go to state 88
    LAND            shift and go to state 90
    LXOR            shift and go to state 83

    op_logic                       shift and go to state 86

state 80

    (41) operation -> LPARENT operation . RPARENT
    (59) relation -> operation .
    (40) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

  ! shift/reduce conflict for RPARENT resolved as shift
    RPARENT         shift and go to state 125
    EQ              reduce using rule 59 (relation -> operation .)
    NE              reduce using rule 59 (relation -> operation .)
    LT              reduce using rule 59 (relation -> operation .)
    LE              reduce using rule 59 (relation -> operation .)
    GT              reduce using rule 59 (relation -> operation .)
    GE              reduce using rule 59 (relation -> operation .)
    LNOT            reduce using rule 59 (relation -> operation .)
    LOR             reduce using rule 59 (relation -> operation .)
    LAND            reduce using rule 59 (relation -> operation .)
    LXOR            reduce using rule 59 (relation -> operation .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 98

  ! RPARENT         [ reduce using rule 59 (relation -> operation .) ]

    op_arith                       shift and go to state 96

state 81

    (54) while_declaration -> WHILE relation DO . BEGIN declarations END SEMI

    BEGIN           shift and go to state 126


state 82

    (87) op_logic -> LE .

    LPARENT         reduce using rule 87 (op_logic -> LE .)
    ID              reduce using rule 87 (op_logic -> LE .)
    NUMBER          reduce using rule 87 (op_logic -> LE .)


state 83

    (93) op_logic -> LXOR .

    LPARENT         reduce using rule 93 (op_logic -> LXOR .)
    ID              reduce using rule 93 (op_logic -> LXOR .)
    NUMBER          reduce using rule 93 (op_logic -> LXOR .)


state 84

    (89) op_logic -> GE .

    LPARENT         reduce using rule 89 (op_logic -> GE .)
    ID              reduce using rule 89 (op_logic -> GE .)
    NUMBER          reduce using rule 89 (op_logic -> GE .)


state 85

    (86) op_logic -> LT .

    LPARENT         reduce using rule 86 (op_logic -> LT .)
    ID              reduce using rule 86 (op_logic -> LT .)
    NUMBER          reduce using rule 86 (op_logic -> LT .)


state 86

    (60) relation -> relation op_logic . relation
    (58) relation -> . op_var
    (59) relation -> . operation
    (60) relation -> . relation op_logic relation
    (61) relation -> . LPARENT relation RPARENT
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 51
    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    array_call                     shift and go to state 55
    op_var                         shift and go to state 54
    relation                       shift and go to state 127
    operation                      shift and go to state 56

state 87

    (85) op_logic -> NE .

    LPARENT         reduce using rule 85 (op_logic -> NE .)
    ID              reduce using rule 85 (op_logic -> NE .)
    NUMBER          reduce using rule 85 (op_logic -> NE .)


state 88

    (91) op_logic -> LOR .

    LPARENT         reduce using rule 91 (op_logic -> LOR .)
    ID              reduce using rule 91 (op_logic -> LOR .)
    NUMBER          reduce using rule 91 (op_logic -> LOR .)


state 89

    (88) op_logic -> GT .

    LPARENT         reduce using rule 88 (op_logic -> GT .)
    ID              reduce using rule 88 (op_logic -> GT .)
    NUMBER          reduce using rule 88 (op_logic -> GT .)


state 90

    (92) op_logic -> LAND .

    LPARENT         reduce using rule 92 (op_logic -> LAND .)
    ID              reduce using rule 92 (op_logic -> LAND .)
    NUMBER          reduce using rule 92 (op_logic -> LAND .)


state 91

    (90) op_logic -> LNOT .

    LPARENT         reduce using rule 90 (op_logic -> LNOT .)
    ID              reduce using rule 90 (op_logic -> LNOT .)
    NUMBER          reduce using rule 90 (op_logic -> LNOT .)


state 92

    (84) op_logic -> EQ .

    LPARENT         reduce using rule 84 (op_logic -> EQ .)
    ID              reduce using rule 84 (op_logic -> EQ .)
    NUMBER          reduce using rule 84 (op_logic -> EQ .)


state 93

    (82) op_arith -> DIVIDE .

    LPARENT         reduce using rule 82 (op_arith -> DIVIDE .)
    ID              reduce using rule 82 (op_arith -> DIVIDE .)
    NUMBER          reduce using rule 82 (op_arith -> DIVIDE .)


state 94

    (81) op_arith -> TIMES .

    LPARENT         reduce using rule 81 (op_arith -> TIMES .)
    ID              reduce using rule 81 (op_arith -> TIMES .)
    NUMBER          reduce using rule 81 (op_arith -> TIMES .)


state 95

    (79) op_arith -> PLUS .

    LPARENT         reduce using rule 79 (op_arith -> PLUS .)
    ID              reduce using rule 79 (op_arith -> PLUS .)
    NUMBER          reduce using rule 79 (op_arith -> PLUS .)


state 96

    (40) operation -> operation op_arith . operation
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 114
    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    operation                      shift and go to state 129
    array_call                     shift and go to state 55
    op_var                         shift and go to state 128

state 97

    (80) op_arith -> MINUS .

    LPARENT         reduce using rule 80 (op_arith -> MINUS .)
    ID              reduce using rule 80 (op_arith -> MINUS .)
    NUMBER          reduce using rule 80 (op_arith -> MINUS .)


state 98

    (83) op_arith -> MOD .

    LPARENT         reduce using rule 83 (op_arith -> MOD .)
    ID              reduce using rule 83 (op_arith -> MOD .)
    NUMBER          reduce using rule 83 (op_arith -> MOD .)


state 99

    (71) array_call -> ID LBLOCK . op_var RBLOCK
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    array_call                     shift and go to state 55
    op_var                         shift and go to state 112

state 100

    (55) for_declaration -> FOR assignation TO . op_var DO BEGIN declarations END SEMI
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    array_call                     shift and go to state 55
    op_var                         shift and go to state 130

state 101

    (56) assignation -> op_var ASSIGN . op_var
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    array_call                     shift and go to state 55
    op_var                         shift and go to state 131

state 102

    (68) op_write -> op_var .

    RPARENT         reduce using rule 68 (op_write -> op_var .)
    COMMA           reduce using rule 68 (op_write -> op_var .)


state 103

    (72) string_sentence -> STRINGVAL .
    (73) string_sentence -> STRINGVAL . PLUS ID
    (74) string_sentence -> STRINGVAL . PLUS string_sentence

    RPARENT         reduce using rule 72 (string_sentence -> STRINGVAL .)
    COMMA           reduce using rule 72 (string_sentence -> STRINGVAL .)
    PLUS            shift and go to state 132


state 104

    (69) op_write -> array_call .
    (78) op_var -> array_call .

  ! reduce/reduce conflict for RPARENT resolved using rule 69 (op_write -> array_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 69 (op_write -> array_call .)
    RPARENT         reduce using rule 69 (op_write -> array_call .)
    COMMA           reduce using rule 69 (op_write -> array_call .)

  ! RPARENT         [ reduce using rule 78 (op_var -> array_call .) ]
  ! COMMA           [ reduce using rule 78 (op_var -> array_call .) ]


state 105

    (66) write_declaration -> WRITE LPARENT op_write . RPARENT SEMI
    (70) op_write -> op_write . COMMA op_write

    RPARENT         shift and go to state 134
    COMMA           shift and go to state 133


state 106

    (67) op_write -> string_sentence .

    RPARENT         reduce using rule 67 (op_write -> string_sentence .)
    COMMA           reduce using rule 67 (op_write -> string_sentence .)


state 107

    (52) stament -> ID LPARENT declarations . RPARENT
    (51) stament -> declarations . ID ASSIGN

    RPARENT         shift and go to state 135
    ID              shift and go to state 74


state 108

    (32) array_assignation -> ID LBLOCK NUMBER . RBLOCK ASSIGN operation SEMI
    (77) op_var -> NUMBER .

  ! shift/reduce conflict for RBLOCK resolved as shift
    RBLOCK          shift and go to state 136

  ! RBLOCK          [ reduce using rule 77 (op_var -> NUMBER .) ]


state 109

    (33) array_assignation -> ID LBLOCK ID . RBLOCK ASSIGN operation SEMI
    (32) array_assignation -> ID . LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> ID . LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> ID . LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (76) op_var -> ID .
    (71) array_call -> ID . LBLOCK op_var RBLOCK

  ! shift/reduce conflict for RBLOCK resolved as shift
    RBLOCK          shift and go to state 137
    LBLOCK          shift and go to state 68

  ! RBLOCK          [ reduce using rule 76 (op_var -> ID .) ]


state 110

    (34) array_assignation -> ID LBLOCK array_assignation . RBLOCK ASSIGN operation SEMI

    RBLOCK          shift and go to state 138


state 111

    (35) array_assignation -> array_call .
    (78) op_var -> array_call .

  ! reduce/reduce conflict for RBLOCK resolved using rule 35 (array_assignation -> array_call .)
    RBLOCK          reduce using rule 35 (array_assignation -> array_call .)

  ! RBLOCK          [ reduce using rule 78 (op_var -> array_call .) ]


state 112

    (71) array_call -> ID LBLOCK op_var . RBLOCK

    RBLOCK          shift and go to state 139


state 113

    (31) var_assignation -> ID ASSIGN arith_operation . SEMI

    SEMI            shift and go to state 140


state 114

    (41) operation -> LPARENT . operation RPARENT
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 114
    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    operation                      shift and go to state 141
    array_call                     shift and go to state 55
    op_var                         shift and go to state 128

state 115

    (36) arith_operation -> op_var . op_arith op_var
    (37) arith_operation -> op_var . op_arith arith_operation
    (39) operation -> op_var .
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMI            reduce using rule 39 (operation -> op_var .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 98

  ! PLUS            [ reduce using rule 39 (operation -> op_var .) ]
  ! MINUS           [ reduce using rule 39 (operation -> op_var .) ]
  ! TIMES           [ reduce using rule 39 (operation -> op_var .) ]
  ! DIVIDE          [ reduce using rule 39 (operation -> op_var .) ]
  ! MOD             [ reduce using rule 39 (operation -> op_var .) ]

    op_arith                       shift and go to state 142

state 116

    (38) arith_operation -> operation .
    (40) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    SEMI            reduce using rule 38 (arith_operation -> operation .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 98

    op_arith                       shift and go to state 96

state 117

    (63) relacion_if -> LPARENT op_var . op_arith op_var RPARENT op_logic op_var
    (58) relation -> op_var .
    (39) operation -> op_var .
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

  ! reduce/reduce conflict for RPARENT resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for EQ resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for NE resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LT resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LE resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for GT resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for GE resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LNOT resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LOR resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LAND resolved using rule 39 (operation -> op_var .)
  ! reduce/reduce conflict for LXOR resolved using rule 39 (operation -> op_var .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    RPARENT         reduce using rule 39 (operation -> op_var .)
    EQ              reduce using rule 39 (operation -> op_var .)
    NE              reduce using rule 39 (operation -> op_var .)
    LT              reduce using rule 39 (operation -> op_var .)
    LE              reduce using rule 39 (operation -> op_var .)
    GT              reduce using rule 39 (operation -> op_var .)
    GE              reduce using rule 39 (operation -> op_var .)
    LNOT            reduce using rule 39 (operation -> op_var .)
    LOR             reduce using rule 39 (operation -> op_var .)
    LAND            reduce using rule 39 (operation -> op_var .)
    LXOR            reduce using rule 39 (operation -> op_var .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 98

  ! RPARENT         [ reduce using rule 58 (relation -> op_var .) ]
  ! EQ              [ reduce using rule 58 (relation -> op_var .) ]
  ! NE              [ reduce using rule 58 (relation -> op_var .) ]
  ! LT              [ reduce using rule 58 (relation -> op_var .) ]
  ! LE              [ reduce using rule 58 (relation -> op_var .) ]
  ! GT              [ reduce using rule 58 (relation -> op_var .) ]
  ! GE              [ reduce using rule 58 (relation -> op_var .) ]
  ! LNOT            [ reduce using rule 58 (relation -> op_var .) ]
  ! LOR             [ reduce using rule 58 (relation -> op_var .) ]
  ! LAND            [ reduce using rule 58 (relation -> op_var .) ]
  ! LXOR            [ reduce using rule 58 (relation -> op_var .) ]
  ! PLUS            [ reduce using rule 39 (operation -> op_var .) ]
  ! MINUS           [ reduce using rule 39 (operation -> op_var .) ]
  ! TIMES           [ reduce using rule 39 (operation -> op_var .) ]
  ! DIVIDE          [ reduce using rule 39 (operation -> op_var .) ]
  ! MOD             [ reduce using rule 39 (operation -> op_var .) ]

    op_arith                       shift and go to state 143

state 118

    (57) if_declaration -> IF relacion_if THEN . BEGIN declarations else_stament END SEMI

    BEGIN           shift and go to state 144


state 119

    (1) programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMI declaration_initial BEGIN declarations END DOT .)


state 120

    (51) stament -> declarations ID ASSIGN .

    WRITE           reduce using rule 51 (stament -> declarations ID ASSIGN .)
    READLN          reduce using rule 51 (stament -> declarations ID ASSIGN .)
    VAR             reduce using rule 51 (stament -> declarations ID ASSIGN .)
    CONST           reduce using rule 51 (stament -> declarations ID ASSIGN .)
    ID              reduce using rule 51 (stament -> declarations ID ASSIGN .)
    BREAK           reduce using rule 51 (stament -> declarations ID ASSIGN .)
    WHILE           reduce using rule 51 (stament -> declarations ID ASSIGN .)
    FOR             reduce using rule 51 (stament -> declarations ID ASSIGN .)
    IF              reduce using rule 51 (stament -> declarations ID ASSIGN .)
    END             reduce using rule 51 (stament -> declarations ID ASSIGN .)
    ELSE            reduce using rule 51 (stament -> declarations ID ASSIGN .)
    RPARENT         reduce using rule 51 (stament -> declarations ID ASSIGN .)


state 121

    (75) readln_declaration -> READLN LPARENT ID . RPARENT SEMI

    RPARENT         shift and go to state 145


state 122

    (6) declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .

    WRITE           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    READLN          reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    VAR             reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    CONST           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    ID              reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    BREAK           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    WHILE           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    FOR             reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    IF              reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    END             reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    RPARENT         reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    ELSE            reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    BEGIN           reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)
    USES            reduce using rule 6 (declaracion_variables -> VAR var_declaration COLON type_specifier SEMI .)


state 123

    (18) type_specifier -> ARRAY LBLOCK NUMBER . DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    DOT             shift and go to state 146


state 124

    (61) relation -> LPARENT relation RPARENT .

    EQ              reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    NE              reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    LT              reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    LE              reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    GT              reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    GE              reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    LNOT            reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    LOR             reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    LAND            reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    LXOR            reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    DO              reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    THEN            reduce using rule 61 (relation -> LPARENT relation RPARENT .)
    RPARENT         reduce using rule 61 (relation -> LPARENT relation RPARENT .)


state 125

    (41) operation -> LPARENT operation RPARENT .

    SEMI            reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    PLUS            reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    MINUS           reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    TIMES           reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    DIVIDE          reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    MOD             reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    RPARENT         reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    EQ              reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    NE              reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    LT              reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    LE              reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    GT              reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    GE              reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    LNOT            reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    LOR             reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    LAND            reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    LXOR            reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    DO              reduce using rule 41 (operation -> LPARENT operation RPARENT .)
    THEN            reduce using rule 41 (operation -> LPARENT operation RPARENT .)


state 126

    (54) while_declaration -> WHILE relation DO BEGIN . declarations END SEMI
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (66) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (75) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (48) stament -> . while_declaration
    (49) stament -> . for_declaration
    (50) stament -> . if_declaration
    (51) stament -> . declarations ID ASSIGN
    (52) stament -> . ID LPARENT declarations RPARENT
    (53) stament -> . BREAK SEMI
    (30) var_assignation -> . array_assignation
    (31) var_assignation -> . ID ASSIGN arith_operation SEMI
    (54) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (55) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (57) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 29
    READLN          shift and go to state 36
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 31
    BREAK           shift and go to state 26
    WHILE           shift and go to state 21
    FOR             shift and go to state 27
    IF              shift and go to state 32

    stament                        shift and go to state 22
    var_assignation                shift and go to state 23
    declarations                   shift and go to state 147
    array_call                     shift and go to state 37
    write_declaration              shift and go to state 28
    while_declaration              shift and go to state 33
    declaracion_variables          shift and go to state 30
    readln_declaration             shift and go to state 24
    if_declaration                 shift and go to state 38
    for_declaration                shift and go to state 25
    array_assignation              shift and go to state 35

state 127

    (60) relation -> relation op_logic relation .
    (60) relation -> relation . op_logic relation
    (84) op_logic -> . EQ
    (85) op_logic -> . NE
    (86) op_logic -> . LT
    (87) op_logic -> . LE
    (88) op_logic -> . GT
    (89) op_logic -> . GE
    (90) op_logic -> . LNOT
    (91) op_logic -> . LOR
    (92) op_logic -> . LAND
    (93) op_logic -> . LXOR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LNOT resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LXOR resolved as shift
    DO              reduce using rule 60 (relation -> relation op_logic relation .)
    THEN            reduce using rule 60 (relation -> relation op_logic relation .)
    RPARENT         reduce using rule 60 (relation -> relation op_logic relation .)
    EQ              shift and go to state 92
    NE              shift and go to state 87
    LT              shift and go to state 85
    LE              shift and go to state 82
    GT              shift and go to state 89
    GE              shift and go to state 84
    LNOT            shift and go to state 91
    LOR             shift and go to state 88
    LAND            shift and go to state 90
    LXOR            shift and go to state 83

  ! EQ              [ reduce using rule 60 (relation -> relation op_logic relation .) ]
  ! NE              [ reduce using rule 60 (relation -> relation op_logic relation .) ]
  ! LT              [ reduce using rule 60 (relation -> relation op_logic relation .) ]
  ! LE              [ reduce using rule 60 (relation -> relation op_logic relation .) ]
  ! GT              [ reduce using rule 60 (relation -> relation op_logic relation .) ]
  ! GE              [ reduce using rule 60 (relation -> relation op_logic relation .) ]
  ! LNOT            [ reduce using rule 60 (relation -> relation op_logic relation .) ]
  ! LOR             [ reduce using rule 60 (relation -> relation op_logic relation .) ]
  ! LAND            [ reduce using rule 60 (relation -> relation op_logic relation .) ]
  ! LXOR            [ reduce using rule 60 (relation -> relation op_logic relation .) ]

    op_logic                       shift and go to state 86

state 128

    (39) operation -> op_var .

    SEMI            reduce using rule 39 (operation -> op_var .)
    PLUS            reduce using rule 39 (operation -> op_var .)
    MINUS           reduce using rule 39 (operation -> op_var .)
    TIMES           reduce using rule 39 (operation -> op_var .)
    DIVIDE          reduce using rule 39 (operation -> op_var .)
    MOD             reduce using rule 39 (operation -> op_var .)
    DO              reduce using rule 39 (operation -> op_var .)
    EQ              reduce using rule 39 (operation -> op_var .)
    NE              reduce using rule 39 (operation -> op_var .)
    LT              reduce using rule 39 (operation -> op_var .)
    LE              reduce using rule 39 (operation -> op_var .)
    GT              reduce using rule 39 (operation -> op_var .)
    GE              reduce using rule 39 (operation -> op_var .)
    LNOT            reduce using rule 39 (operation -> op_var .)
    LOR             reduce using rule 39 (operation -> op_var .)
    LAND            reduce using rule 39 (operation -> op_var .)
    LXOR            reduce using rule 39 (operation -> op_var .)
    THEN            reduce using rule 39 (operation -> op_var .)
    RPARENT         reduce using rule 39 (operation -> op_var .)


state 129

    (40) operation -> operation op_arith operation .
    (40) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMI            reduce using rule 40 (operation -> operation op_arith operation .)
    RPARENT         reduce using rule 40 (operation -> operation op_arith operation .)
    EQ              reduce using rule 40 (operation -> operation op_arith operation .)
    NE              reduce using rule 40 (operation -> operation op_arith operation .)
    LT              reduce using rule 40 (operation -> operation op_arith operation .)
    LE              reduce using rule 40 (operation -> operation op_arith operation .)
    GT              reduce using rule 40 (operation -> operation op_arith operation .)
    GE              reduce using rule 40 (operation -> operation op_arith operation .)
    LNOT            reduce using rule 40 (operation -> operation op_arith operation .)
    LOR             reduce using rule 40 (operation -> operation op_arith operation .)
    LAND            reduce using rule 40 (operation -> operation op_arith operation .)
    LXOR            reduce using rule 40 (operation -> operation op_arith operation .)
    DO              reduce using rule 40 (operation -> operation op_arith operation .)
    THEN            reduce using rule 40 (operation -> operation op_arith operation .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 98

  ! PLUS            [ reduce using rule 40 (operation -> operation op_arith operation .) ]
  ! MINUS           [ reduce using rule 40 (operation -> operation op_arith operation .) ]
  ! TIMES           [ reduce using rule 40 (operation -> operation op_arith operation .) ]
  ! DIVIDE          [ reduce using rule 40 (operation -> operation op_arith operation .) ]
  ! MOD             [ reduce using rule 40 (operation -> operation op_arith operation .) ]

    op_arith                       shift and go to state 96

state 130

    (55) for_declaration -> FOR assignation TO op_var . DO BEGIN declarations END SEMI

    DO              shift and go to state 148


state 131

    (56) assignation -> op_var ASSIGN op_var .

    TO              reduce using rule 56 (assignation -> op_var ASSIGN op_var .)


state 132

    (73) string_sentence -> STRINGVAL PLUS . ID
    (74) string_sentence -> STRINGVAL PLUS . string_sentence
    (72) string_sentence -> . STRINGVAL
    (73) string_sentence -> . STRINGVAL PLUS ID
    (74) string_sentence -> . STRINGVAL PLUS string_sentence

    ID              shift and go to state 150
    STRINGVAL       shift and go to state 103

    string_sentence                shift and go to state 149

state 133

    (70) op_write -> op_write COMMA . op_write
    (67) op_write -> . string_sentence
    (68) op_write -> . op_var
    (69) op_write -> . array_call
    (70) op_write -> . op_write COMMA op_write
    (72) string_sentence -> . STRINGVAL
    (73) string_sentence -> . STRINGVAL PLUS ID
    (74) string_sentence -> . STRINGVAL PLUS string_sentence
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    STRINGVAL       shift and go to state 103
    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    string_sentence                shift and go to state 106
    array_call                     shift and go to state 104
    op_write                       shift and go to state 151
    op_var                         shift and go to state 102

state 134

    (66) write_declaration -> WRITE LPARENT op_write RPARENT . SEMI

    SEMI            shift and go to state 152


state 135

    (52) stament -> ID LPARENT declarations RPARENT .

    WRITE           reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)
    READLN          reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)
    VAR             reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)
    CONST           reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)
    ID              reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)
    BREAK           reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)
    WHILE           reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)
    FOR             reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)
    IF              reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)
    END             reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)
    ELSE            reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)
    RPARENT         reduce using rule 52 (stament -> ID LPARENT declarations RPARENT .)


state 136

    (32) array_assignation -> ID LBLOCK NUMBER RBLOCK . ASSIGN operation SEMI

    ASSIGN          shift and go to state 153


state 137

    (33) array_assignation -> ID LBLOCK ID RBLOCK . ASSIGN operation SEMI

    ASSIGN          shift and go to state 154


state 138

    (34) array_assignation -> ID LBLOCK array_assignation RBLOCK . ASSIGN operation SEMI

    ASSIGN          shift and go to state 155


state 139

    (71) array_call -> ID LBLOCK op_var RBLOCK .

    WRITE           reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    READLN          reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    VAR             reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    CONST           reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    ID              reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    BREAK           reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    WHILE           reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    FOR             reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    IF              reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    END             reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    RPARENT         reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    ASSIGN          reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    EQ              reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    NE              reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    LT              reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    LE              reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    GT              reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    GE              reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    LNOT            reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    LOR             reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    LAND            reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    LXOR            reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    THEN            reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    PLUS            reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    MINUS           reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    TIMES           reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    DIVIDE          reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    MOD             reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    TO              reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    ELSE            reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    SEMI            reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    DO              reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    RBLOCK          reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)
    COMMA           reduce using rule 71 (array_call -> ID LBLOCK op_var RBLOCK .)


state 140

    (31) var_assignation -> ID ASSIGN arith_operation SEMI .

    WRITE           reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)
    READLN          reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)
    VAR             reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)
    CONST           reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)
    ID              reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)
    BREAK           reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)
    WHILE           reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)
    FOR             reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)
    IF              reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)
    END             reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)
    RPARENT         reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)
    ELSE            reduce using rule 31 (var_assignation -> ID ASSIGN arith_operation SEMI .)


state 141

    (41) operation -> LPARENT operation . RPARENT
    (40) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    RPARENT         shift and go to state 125
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 98

    op_arith                       shift and go to state 96

state 142

    (36) arith_operation -> op_var op_arith . op_var
    (37) arith_operation -> op_var op_arith . arith_operation
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (36) arith_operation -> . op_var op_arith op_var
    (37) arith_operation -> . op_var op_arith arith_operation
    (38) arith_operation -> . operation
    (71) array_call -> . ID LBLOCK op_var RBLOCK
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT

    ID              shift and go to state 57
    NUMBER          shift and go to state 52
    LPARENT         shift and go to state 114

    operation                      shift and go to state 116
    arith_operation                shift and go to state 156
    array_call                     shift and go to state 55
    op_var                         shift and go to state 157

state 143

    (63) relacion_if -> LPARENT op_var op_arith . op_var RPARENT op_logic op_var
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    array_call                     shift and go to state 55
    op_var                         shift and go to state 158

state 144

    (57) if_declaration -> IF relacion_if THEN BEGIN . declarations else_stament END SEMI
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (66) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (75) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (48) stament -> . while_declaration
    (49) stament -> . for_declaration
    (50) stament -> . if_declaration
    (51) stament -> . declarations ID ASSIGN
    (52) stament -> . ID LPARENT declarations RPARENT
    (53) stament -> . BREAK SEMI
    (30) var_assignation -> . array_assignation
    (31) var_assignation -> . ID ASSIGN arith_operation SEMI
    (54) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (55) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (57) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 29
    READLN          shift and go to state 36
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 31
    BREAK           shift and go to state 26
    WHILE           shift and go to state 21
    FOR             shift and go to state 27
    IF              shift and go to state 32

    stament                        shift and go to state 22
    declaracion_variables          shift and go to state 30
    var_assignation                shift and go to state 23
    declarations                   shift and go to state 159
    array_call                     shift and go to state 37
    write_declaration              shift and go to state 28
    while_declaration              shift and go to state 33
    readln_declaration             shift and go to state 24
    if_declaration                 shift and go to state 38
    for_declaration                shift and go to state 25
    array_assignation              shift and go to state 35

state 145

    (75) readln_declaration -> READLN LPARENT ID RPARENT . SEMI

    SEMI            shift and go to state 160


state 146

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT . DOT NUMBER RBLOCK OF type_specifier SEMI

    DOT             shift and go to state 161


state 147

    (54) while_declaration -> WHILE relation DO BEGIN declarations . END SEMI
    (51) stament -> declarations . ID ASSIGN

    END             shift and go to state 162
    ID              shift and go to state 74


state 148

    (55) for_declaration -> FOR assignation TO op_var DO . BEGIN declarations END SEMI

    BEGIN           shift and go to state 163


state 149

    (74) string_sentence -> STRINGVAL PLUS string_sentence .

    RPARENT         reduce using rule 74 (string_sentence -> STRINGVAL PLUS string_sentence .)
    COMMA           reduce using rule 74 (string_sentence -> STRINGVAL PLUS string_sentence .)


state 150

    (73) string_sentence -> STRINGVAL PLUS ID .

    RPARENT         reduce using rule 73 (string_sentence -> STRINGVAL PLUS ID .)
    COMMA           reduce using rule 73 (string_sentence -> STRINGVAL PLUS ID .)


state 151

    (70) op_write -> op_write COMMA op_write .
    (70) op_write -> op_write . COMMA op_write

  ! shift/reduce conflict for COMMA resolved as shift
    RPARENT         reduce using rule 70 (op_write -> op_write COMMA op_write .)
    COMMA           shift and go to state 133

  ! COMMA           [ reduce using rule 70 (op_write -> op_write COMMA op_write .) ]


state 152

    (66) write_declaration -> WRITE LPARENT op_write RPARENT SEMI .

    WRITE           reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    READLN          reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    VAR             reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    CONST           reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    ID              reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    BREAK           reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    WHILE           reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    FOR             reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    IF              reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    END             reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    RPARENT         reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)
    ELSE            reduce using rule 66 (write_declaration -> WRITE LPARENT op_write RPARENT SEMI .)


state 153

    (32) array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN . operation SEMI
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 114
    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    operation                      shift and go to state 164
    array_call                     shift and go to state 55
    op_var                         shift and go to state 128

state 154

    (33) array_assignation -> ID LBLOCK ID RBLOCK ASSIGN . operation SEMI
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 114
    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    operation                      shift and go to state 165
    array_call                     shift and go to state 55
    op_var                         shift and go to state 128

state 155

    (34) array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN . operation SEMI
    (39) operation -> . op_var
    (40) operation -> . operation op_arith operation
    (41) operation -> . LPARENT operation RPARENT
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    LPARENT         shift and go to state 114
    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    operation                      shift and go to state 166
    array_call                     shift and go to state 55
    op_var                         shift and go to state 128

state 156

    (37) arith_operation -> op_var op_arith arith_operation .

    SEMI            reduce using rule 37 (arith_operation -> op_var op_arith arith_operation .)


state 157

    (36) arith_operation -> op_var op_arith op_var .
    (36) arith_operation -> op_var . op_arith op_var
    (37) arith_operation -> op_var . op_arith arith_operation
    (39) operation -> op_var .
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

  ! reduce/reduce conflict for SEMI resolved using rule 36 (arith_operation -> op_var op_arith op_var .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMI            reduce using rule 36 (arith_operation -> op_var op_arith op_var .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 98

  ! PLUS            [ reduce using rule 39 (operation -> op_var .) ]
  ! MINUS           [ reduce using rule 39 (operation -> op_var .) ]
  ! TIMES           [ reduce using rule 39 (operation -> op_var .) ]
  ! DIVIDE          [ reduce using rule 39 (operation -> op_var .) ]
  ! MOD             [ reduce using rule 39 (operation -> op_var .) ]
  ! SEMI            [ reduce using rule 39 (operation -> op_var .) ]

    op_arith                       shift and go to state 142

state 158

    (63) relacion_if -> LPARENT op_var op_arith op_var . RPARENT op_logic op_var

    RPARENT         shift and go to state 167


state 159

    (57) if_declaration -> IF relacion_if THEN BEGIN declarations . else_stament END SEMI
    (51) stament -> declarations . ID ASSIGN
    (64) else_stament -> . ELSE declarations
    (65) else_stament -> .

    ID              shift and go to state 74
    ELSE            shift and go to state 169
    END             reduce using rule 65 (else_stament -> .)

    else_stament                   shift and go to state 168

state 160

    (75) readln_declaration -> READLN LPARENT ID RPARENT SEMI .

    WRITE           reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    READLN          reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    VAR             reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    CONST           reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    ID              reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    BREAK           reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    WHILE           reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    FOR             reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    IF              reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    END             reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    RPARENT         reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)
    ELSE            reduce using rule 75 (readln_declaration -> READLN LPARENT ID RPARENT SEMI .)


state 161

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT . NUMBER RBLOCK OF type_specifier SEMI

    NUMBER          shift and go to state 170


state 162

    (54) while_declaration -> WHILE relation DO BEGIN declarations END . SEMI

    SEMI            shift and go to state 171


state 163

    (55) for_declaration -> FOR assignation TO op_var DO BEGIN . declarations END SEMI
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (66) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (75) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (48) stament -> . while_declaration
    (49) stament -> . for_declaration
    (50) stament -> . if_declaration
    (51) stament -> . declarations ID ASSIGN
    (52) stament -> . ID LPARENT declarations RPARENT
    (53) stament -> . BREAK SEMI
    (30) var_assignation -> . array_assignation
    (31) var_assignation -> . ID ASSIGN arith_operation SEMI
    (54) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (55) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (57) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 29
    READLN          shift and go to state 36
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 31
    BREAK           shift and go to state 26
    WHILE           shift and go to state 21
    FOR             shift and go to state 27
    IF              shift and go to state 32

    stament                        shift and go to state 22
    var_assignation                shift and go to state 23
    declarations                   shift and go to state 172
    array_call                     shift and go to state 37
    write_declaration              shift and go to state 28
    while_declaration              shift and go to state 33
    declaracion_variables          shift and go to state 30
    readln_declaration             shift and go to state 24
    if_declaration                 shift and go to state 38
    for_declaration                shift and go to state 25
    array_assignation              shift and go to state 35

state 164

    (32) array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation . SEMI
    (40) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    SEMI            shift and go to state 173
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 98

    op_arith                       shift and go to state 96

state 165

    (33) array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation . SEMI
    (40) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    SEMI            shift and go to state 174
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 98

    op_arith                       shift and go to state 96

state 166

    (34) array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation . SEMI
    (40) operation -> operation . op_arith operation
    (79) op_arith -> . PLUS
    (80) op_arith -> . MINUS
    (81) op_arith -> . TIMES
    (82) op_arith -> . DIVIDE
    (83) op_arith -> . MOD

    SEMI            shift and go to state 175
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 98

    op_arith                       shift and go to state 96

state 167

    (63) relacion_if -> LPARENT op_var op_arith op_var RPARENT . op_logic op_var
    (84) op_logic -> . EQ
    (85) op_logic -> . NE
    (86) op_logic -> . LT
    (87) op_logic -> . LE
    (88) op_logic -> . GT
    (89) op_logic -> . GE
    (90) op_logic -> . LNOT
    (91) op_logic -> . LOR
    (92) op_logic -> . LAND
    (93) op_logic -> . LXOR

    EQ              shift and go to state 92
    NE              shift and go to state 87
    LT              shift and go to state 85
    LE              shift and go to state 82
    GT              shift and go to state 89
    GE              shift and go to state 84
    LNOT            shift and go to state 91
    LOR             shift and go to state 88
    LAND            shift and go to state 90
    LXOR            shift and go to state 83

    op_logic                       shift and go to state 176

state 168

    (57) if_declaration -> IF relacion_if THEN BEGIN declarations else_stament . END SEMI

    END             shift and go to state 177


state 169

    (64) else_stament -> ELSE . declarations
    (20) declarations -> . write_declaration
    (21) declarations -> . write_declaration declarations
    (22) declarations -> . readln_declaration
    (23) declarations -> . readln_declaration declarations
    (24) declarations -> . declaracion_variables
    (25) declarations -> . declaracion_variables declarations
    (26) declarations -> . stament
    (27) declarations -> . stament declarations
    (28) declarations -> . var_assignation
    (29) declarations -> . var_assignation declarations
    (66) write_declaration -> . WRITE LPARENT op_write RPARENT SEMI
    (75) readln_declaration -> . READLN LPARENT ID RPARENT SEMI
    (6) declaracion_variables -> . VAR var_declaration COLON type_specifier SEMI
    (7) declaracion_variables -> . CONST var_declaration COLON type_specifier SEMI
    (48) stament -> . while_declaration
    (49) stament -> . for_declaration
    (50) stament -> . if_declaration
    (51) stament -> . declarations ID ASSIGN
    (52) stament -> . ID LPARENT declarations RPARENT
    (53) stament -> . BREAK SEMI
    (30) var_assignation -> . array_assignation
    (31) var_assignation -> . ID ASSIGN arith_operation SEMI
    (54) while_declaration -> . WHILE relation DO BEGIN declarations END SEMI
    (55) for_declaration -> . FOR assignation TO op_var DO BEGIN declarations END SEMI
    (57) if_declaration -> . IF relacion_if THEN BEGIN declarations else_stament END SEMI
    (32) array_assignation -> . ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI
    (33) array_assignation -> . ID LBLOCK ID RBLOCK ASSIGN operation SEMI
    (34) array_assignation -> . ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI
    (35) array_assignation -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    WRITE           shift and go to state 29
    READLN          shift and go to state 36
    VAR             shift and go to state 9
    CONST           shift and go to state 6
    ID              shift and go to state 31
    BREAK           shift and go to state 26
    WHILE           shift and go to state 21
    FOR             shift and go to state 27
    IF              shift and go to state 32

    stament                        shift and go to state 22
    var_assignation                shift and go to state 23
    declarations                   shift and go to state 178
    array_call                     shift and go to state 37
    write_declaration              shift and go to state 28
    while_declaration              shift and go to state 33
    declaracion_variables          shift and go to state 30
    readln_declaration             shift and go to state 24
    if_declaration                 shift and go to state 38
    for_declaration                shift and go to state 25
    array_assignation              shift and go to state 35

state 170

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER . RBLOCK OF type_specifier SEMI

    RBLOCK          shift and go to state 179


state 171

    (54) while_declaration -> WHILE relation DO BEGIN declarations END SEMI .

    WRITE           reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    READLN          reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    VAR             reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    CONST           reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    ID              reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    BREAK           reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    WHILE           reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    FOR             reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    IF              reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    RPARENT         reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    END             reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)
    ELSE            reduce using rule 54 (while_declaration -> WHILE relation DO BEGIN declarations END SEMI .)


state 172

    (55) for_declaration -> FOR assignation TO op_var DO BEGIN declarations . END SEMI
    (51) stament -> declarations . ID ASSIGN

    END             shift and go to state 180
    ID              shift and go to state 74


state 173

    (32) array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .

    WRITE           reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    READLN          reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    VAR             reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    CONST           reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    ID              reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    BREAK           reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    WHILE           reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    FOR             reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    IF              reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    END             reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    RPARENT         reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    ELSE            reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)
    RBLOCK          reduce using rule 32 (array_assignation -> ID LBLOCK NUMBER RBLOCK ASSIGN operation SEMI .)


state 174

    (33) array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .

    WRITE           reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    READLN          reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    VAR             reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    CONST           reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    ID              reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    BREAK           reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    WHILE           reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    FOR             reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    IF              reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    END             reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    RPARENT         reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    ELSE            reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)
    RBLOCK          reduce using rule 33 (array_assignation -> ID LBLOCK ID RBLOCK ASSIGN operation SEMI .)


state 175

    (34) array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .

    WRITE           reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    READLN          reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    VAR             reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    CONST           reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    ID              reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    BREAK           reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    WHILE           reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    FOR             reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    IF              reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    END             reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    RPARENT         reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    ELSE            reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)
    RBLOCK          reduce using rule 34 (array_assignation -> ID LBLOCK array_assignation RBLOCK ASSIGN operation SEMI .)


state 176

    (63) relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic . op_var
    (76) op_var -> . ID
    (77) op_var -> . NUMBER
    (78) op_var -> . array_call
    (71) array_call -> . ID LBLOCK op_var RBLOCK

    ID              shift and go to state 57
    NUMBER          shift and go to state 52

    array_call                     shift and go to state 55
    op_var                         shift and go to state 181

state 177

    (57) if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END . SEMI

    SEMI            shift and go to state 182


state 178

    (64) else_stament -> ELSE declarations .
    (51) stament -> declarations . ID ASSIGN

    END             reduce using rule 64 (else_stament -> ELSE declarations .)
    ID              shift and go to state 74


state 179

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK . OF type_specifier SEMI

    OF              shift and go to state 183


state 180

    (55) for_declaration -> FOR assignation TO op_var DO BEGIN declarations END . SEMI

    SEMI            shift and go to state 184


state 181

    (63) relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic op_var .

    THEN            reduce using rule 63 (relacion_if -> LPARENT op_var op_arith op_var RPARENT op_logic op_var .)


state 182

    (57) if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .

    WRITE           reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    READLN          reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    VAR             reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    CONST           reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    ID              reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    BREAK           reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    WHILE           reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    FOR             reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    IF              reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    END             reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    RPARENT         reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)
    ELSE            reduce using rule 57 (if_declaration -> IF relacion_if THEN BEGIN declarations else_stament END SEMI .)


state 183

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF . type_specifier SEMI
    (10) type_specifier -> . INTEGER
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . BYTE
    (13) type_specifier -> . REAL
    (14) type_specifier -> . SINGLE
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . STRING
    (17) type_specifier -> . BOOLEAN
    (18) type_specifier -> . ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI

    INTEGER         shift and go to state 47
    CHAR            shift and go to state 44
    BYTE            shift and go to state 48
    REAL            shift and go to state 40
    SINGLE          shift and go to state 45
    DOUBLE          shift and go to state 43
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 46
    ARRAY           shift and go to state 49

    type_specifier                 shift and go to state 185

state 184

    (55) for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .

    WRITE           reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    READLN          reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    VAR             reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    CONST           reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    ID              reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    BREAK           reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    WHILE           reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    FOR             reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    IF              reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    RPARENT         reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    END             reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)
    ELSE            reduce using rule 55 (for_declaration -> FOR assignation TO op_var DO BEGIN declarations END SEMI .)


state 185

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier . SEMI

    SEMI            shift and go to state 186


state 186

    (18) type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI .

    SEMI            reduce using rule 18 (type_specifier -> ARRAY LBLOCK NUMBER DOT DOT NUMBER RBLOCK OF type_specifier SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 22 resolved as shift
WARNING: shift/reduce conflict for ID in state 23 resolved as shift
WARNING: shift/reduce conflict for ID in state 24 resolved as shift
WARNING: shift/reduce conflict for ID in state 28 resolved as shift
WARNING: shift/reduce conflict for ID in state 30 resolved as shift
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for RPARENT in state 80 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 108 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 115 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for MOD in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for MOD in state 117 resolved as shift
WARNING: shift/reduce conflict for EQ in state 127 resolved as shift
WARNING: shift/reduce conflict for NE in state 127 resolved as shift
WARNING: shift/reduce conflict for LT in state 127 resolved as shift
WARNING: shift/reduce conflict for LE in state 127 resolved as shift
WARNING: shift/reduce conflict for GT in state 127 resolved as shift
WARNING: shift/reduce conflict for GE in state 127 resolved as shift
WARNING: shift/reduce conflict for LNOT in state 127 resolved as shift
WARNING: shift/reduce conflict for LOR in state 127 resolved as shift
WARNING: shift/reduce conflict for LAND in state 127 resolved as shift
WARNING: shift/reduce conflict for LXOR in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 129 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 129 resolved as shift
WARNING: shift/reduce conflict for MOD in state 129 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 151 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 157 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 157 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 157 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 157 resolved as shift
WARNING: shift/reduce conflict for MOD in state 157 resolved as shift
WARNING: reduce/reduce conflict in state 54 resolved using rule (operation -> op_var)
WARNING: rejected rule (relation -> op_var) in state 54
WARNING: reduce/reduce conflict in state 104 resolved using rule (op_write -> array_call)
WARNING: rejected rule (op_var -> array_call) in state 104
WARNING: reduce/reduce conflict in state 111 resolved using rule (array_assignation -> array_call)
WARNING: rejected rule (op_var -> array_call) in state 111
WARNING: reduce/reduce conflict in state 117 resolved using rule (operation -> op_var)
WARNING: rejected rule (relation -> op_var) in state 117
WARNING: reduce/reduce conflict in state 157 resolved using rule (arith_operation -> op_var op_arith op_var)
WARNING: rejected rule (operation -> op_var) in state 157
WARNING: Rule (relation -> op_var) is never reduced
